Total Repositories with 'thread' keyword: 1436

https://github.com/robertdavidgraham/masscan
- src/pixie-threads.c:2 #include "pixie-threads.h"
- src/pixie-threads.h:12  * On a dual socket, dual-core per socket, hyperthreaded system, the
- README.md:46 by using the multi-threaded build. This requires more than 2gigs on a 
- src/xring.c:2 #include "pixie-threads.h"
- src/rte-ring.c:81 #include "pixie-threads.h"

https://github.com/julycoding/The-Art-Of-Programming-By-July-2nd
- ebook/en/28.0.md:102 Here we record the largest and the smallest product of i'th element as "M" and "m" individually. We also record starting point of these two intervals(the end points are i) and keep updating.[Source](http://www.51weixue.com/thread-246-1-1.html).

https://github.com/SamyPesse/How-to-Make-a-Computer-Operating-System
- src/sdk/src/libc/src/unistd/sleep.c:10     syscall2( SYS_sleep_thread, ( int )&time, ( int )NULL );
- src/sdk/src/libc/src/time/nanosleep.c:21     error = syscall2( SYS_sleep_thread, ( int )&microsecs, ( int )&remaining );
- src/kernel/core/api/kernel/syscall_table.h:29 	SYS_sleep_thread		=NOT_DEFINED,
- src/sdk/src/libc/Makefile:245 src/os/thread.c \

https://github.com/micropython/micropython
- docs/library/_thread.rst:1 :mod:`_thread` -- multithreading support
- py/mpthread.h:33 struct _mp_state_thread_t;
- py/modthread.c:35 #include "py/mpthread.h"
- ports/stm32/pybthread.c:31 #include "pybthread.h"
- ports/stm32/pybthread.h:31 typedef struct _pyb_thread_t {

https://github.com/allinurl/goaccess
- src/ui.h:44 #include <pthread.h>
- src/gdns.c:40 #include <pthread.h>
- src/gwsocket.c:158  * If the thread is done, 1 is returned */
- src/gwsocket.h:35 #include <pthread.h>
- ChangeLog:79   - Enabled DNS thread when resolving a host and outputting real-time HTML.

https://github.com/raysan5/raylib
- examples/core/core_loading_thread.c:3 *   raylib [core] example - loading thread
- projects/VS2022/examples/core_loading_thread.vcxproj:40     <RootNamespace>core_loading_thread</RootNamespace>
- src/rglfw.c:76     #include "external/glfw/src/win32_thread.c"
- examples/build.zig:19         // zig's mingw headers do not include pthread.h
- examples/CMakeLists.txt:17 # They are needed for the physac example and threads examples

https://github.com/davatorium/rofi
- include/rofi-types.h:368  * Structure with data to process by each worker thread.
- doc/rofi-debugging.5.markdown:162 thread apply all bt
- source/rofi-icon-fetcher.c:74   thread_state state;
- source/modes/recursivebrowser.c:87   GThread *reading_thread;
- doc/rofi.1.markdown:163 `-threads` *num*

https://github.com/jedisct1/libsodium
- m4/ax_pthread.m4:2 #        https://www.gnu.org/software/autoconf-archive/ax_pthread.html
- m4/ax_tls.m4:11 #   Provides a test for the compiler support of thread local storage (TLS)
- configure.ac:132 AC_ARG_WITH(pthreads, AS_HELP_STRING([--with-pthreads],
- src/libsodium/include/sodium/crypto_sign.h:5  * THREAD SAFETY: crypto_sign_keypair() is thread-safe,
- ChangeLog:155  - The Salsa20-based PRNG example is now thread-safe on platforms with

https://github.com/glfw/glfw
- src/posix_thread.h:28 #include <pthread.h>
- src/posix_thread.c:46     if (pthread_key_create(&tls->posix.key, NULL) != 0)
- src/win32_thread.h:33 // Win32-specific thread local storage data
- docs/main.dox:34 reentrancy, thread safety, event order and backward and forward compatibility.
- src/CMakeLists.txt:10 # The time, thread and module code is shared between all backends on a given OS,

https://github.com/TsudaKageyu/minhook
- README.md:30   * Fixed a possible thread deadlock in x64 mode. (Thanks to Aleh Kazakevich)
- src/hook.c:44 // Initial capacity of the thread IDs buffer.

https://github.com/plasma-umass/coz
- libcoz/thread_state.h:15 class thread_state {
- benchmarks/pca/pca-pthread.c:36 #include <pthread.h>
- benchmarks/kmeans/kmeans-pthread.c:36 #include <pthread.h>
- benchmarks/histogram/histogram-pthread.c:38 #include <pthread.h>
- benchmarks/string_match/string_match-pthread.c:39 #include <pthread.h>

https://github.com/jorisvink/kore
- src/tasks.c:21 #include <pthread.h>
- include/kore/tasks.h:20 #include <pthread.h>
- misc/linux/x86_64_syscall.h.in:206 #define __NR_set_thread_area		205
- examples/tasks/conf/tasks.conf:7 task_threads			4
- Makefile:97 	LDFLAGS+=-lpthread

https://github.com/kohler/gifsicle
- src/gifsicle.h:27 #include <pthread.h>
- NEWS.md:39 * Add thread support for resizing. `-j[NTHREADS]` tells gifsicle to use
- src/xform.c:575 static pthread_mutex_t global_colormap_lock = PTHREAD_MUTEX_INITIALIZER;
- src/gifsicle.c:39 int thread_count = 0;
- src/clp.c:2470  * @note This function is not thread safe.

https://github.com/Dav1dde/glad
- glad/files/egl.xml:79         <type>typedef void (<apientry/> *<name>EGLDEBUGPROCKHR</name>)(EGLenum error,const char *command,EGLint messageType,EGLLabelKHR threadLabel,EGLLabelKHR objectLabel,const char* message);</type>
- glad/generator/rust/templates/types/egl.rs:63     threadLabel: EGLLabelKHR,
- example/c/vulkan_tri_glfw/vulkan_tri_glfw.c:1692         "VK_LAYER_GOOGLE_threading",       "VK_LAYER_LUNARG_parameter_validation",

https://github.com/westes/flex
- examples/manual/example_er.lex:1 /* basic example, fully reentrant thread-safe version */
- doc/flex.texi:3031 may safely be used in a multi-threaded environment. The API for a
- configure.ac:154 # The test test-pthread uses libpthread, so we check for it here, but
- tests/pthread.l:28    We create N_THREADS number of threads. Each thread has it's own scanner.
- tests/Makefile.am:32 TEST_EXTENSIONS = .direct .cn .i3 .pthread .opt .ser .ver

https://github.com/alibaba/LVS
- tools/quagga/lib/thread.h:34 #define GETRUSAGE(X) thread_getrusage(X)
- kernel/fs/btrfs/async-thread.c:19 #include <linux/kthread.h>
- kernel/arch/x86/include/asm/thread_info.h:1 /* thread_info.h: low-level thread information
- tools/quagga/lib/thread.c:26 #include "thread.h"
- kernel/kernel/kthread.c:1 /* Kernel thread helper functions.

https://github.com/syslog-ng/syslog-ng
- lib/thread-utils.h:26 #include <pthread.h>
- lib/control/control-command-thread.c:24 #include "control-command-thread.h"
- lib/control/control-command-thread.h:30 void control_command_thread_run(ControlCommandThread *self);
- lib/mainloop-threaded-worker.c:25 #include "mainloop-threaded-worker.h"
- lib/mainloop-threaded-worker.h:37   GThread *thread;

https://github.com/ejoy/ejoy2d
- lua/lua.h:44 /* thread status */
- lua/lfunc.c:75   if (!isintwups(L)) {  /* thread not in list of threads with upvalues? */
- lua/lfunc.h:21 /* test whether thread is in 'twups' list */
- lua/lstate.c:55 ** thread state + extra space
- lua/lstate.h:58 ** When a thread yields, 'func' is adjusted to pretend that the

https://github.com/omnirom/android_bootable_recovery
- ui.h:21 #include <pthread.h>
- pigz/yarn.h:1 /* yarn.h -- generic interface for thread operations
- ui.cpp:22 #include <pthread.h>
- pigz/yarn.c:1 /* yarn.c -- generic thread operations implemented using pthread functions
- otafault/Android.mk:28     -Wthread-safety \

https://github.com/rsyslog/rsyslog
- threads.c:1 /* threads.c
- threads.h:1 /* Definition of the threading support module.
- tools/coreanalysis.sh:34 echo "info thread" >> gdb.in
- contrib/imczmq/README:32 authenticator: whether to start an authenticator thread
- runtime/wti.c:3  * This file implements the worker thread instance (wti) class.

https://github.com/dresden-elektronik/deconz-rest-plugin
- device_js/duktape.h:231 struct duk_thread_state;
- device_descriptions.cpp:1112     the main thread while loading DDF files.
- device_js/duk_config.h:856  * but it's not thread safe so use with caution.

https://github.com/rspamd/rspamd
- src/lua/lua_thread_pool.h:10 struct thread_entry;
- src/lua/lua_thread_pool.cxx:21 #include "lua_thread_pool.h"
- cmake/Openblas.cmake:73     file(WRITE "${CMAKE_CURRENT_BINARY_DIR}/openblas_set_num_threads.c" "
- src/lua/lua_dns.c:16 #include "lua_thread_pool.h"
- src/lua/CMakeLists.txt:28 					  ${CMAKE_CURRENT_SOURCE_DIR}/lua_thread_pool.cxx

https://github.com/pmwkaa/sophia
- sophia/std/ss_thread.c:12 int ss_threadpool_init(ssthreadpool *p)
- sophia/std/ss_thread.h:12 typedef struct ssthread ssthread;
- documentation/arch/v12.md:13 Additionally there was a need for multi-threaded compaction.
- sophia/std/makefile:6           ss_thread.o \
- documentation/arch/v11.md:40 3. merger thread is being woken up

https://github.com/joan2937/pigpio
- pigpiod_if.c:39 #include <pthread.h>
- EXAMPLES/Python/SENT_PROTOCOL/read_SENT.py:9 import threading
- pigpiod_if2.c:39 #include <pthread.h>
- pigpio.py:330 import threading
- pigpiod_if.h:63 o a simple interface to start and stop new threads

https://github.com/solusipse/fiche
- fiche.c:19 Compile with Makefile or manually with -O2 and -pthread flags.
- Makefile:2 CFLAGS+=-pthread -O2 -Wall -Wextra -Wpedantic -Wstrict-overflow -fno-strict-aliasing -std=gnu11 -g -O0

https://github.com/libimobiledevice/usbmuxd
- NEWS:71   - Improve thread safety
- src/preflight.c:37 #include <libimobiledevice-glue/thread.h>
- src/Makefile.am:17 	$(libpthread_LIBS)
- src/client.c:42 #include <libimobiledevice-glue/thread.h>
- src/device.c:38 #include <libimobiledevice-glue/thread.h>

https://github.com/OpenRC/openrc
- src/kill_all/kill_all.c:108 		 * process or kernel thread, so we say it is a kernel thread to
- src/openrc-run/openrc-run.c:278  * Why don't we use (f)printf, as it is thread-safe through POSIX already?
- src/openrc-shutdown/broadcast.c:115  *	NB: Not multithread safe.

https://github.com/ellson/MOTHBALLED-graphviz
- lib/sfio/vthread.h:23 /*	Header for the Vthread library.
- lib/sfio/README:23 	libsfio.a and libstdio.a: for uni-threaded applications, and
- lib/ast/fmtbuf.c:19  * spin lock for thread access
- lib/gvc/gvcontext.c:19     Sometime in the future it may become the basis for a thread.
- lib/sfio/sfio_t.h:41 	void*			mutex;	/* mutex for thread-safety	*/ \

https://github.com/posva/catimg
- src/stb_image.h:855 // this is not threadsafe

https://github.com/nicklockwood/FastCoding
- README.md:37 It is safe to call the FastCoder encoding and decoding class methods concurrently from multiple threads. It should also be safe to encode the same object concurrently on multiple threads provided that you do not mutate the object while it is being encoded.

https://github.com/vermaseren/form
- sources/threads.c:1 /** @file threads.c
- sources/evaluate.c:87 	int totnum = AM.totalnumberofthreads, id;
- doc/manual/dollar.tex:274 thread could define \verb:$x: and then the next thread could overwrite this 
- sources/mallocprotect.h:52    of a thread with LPW id ### to continue"
- doc/devref/source.tex:156 \C{threads.c} & \TFORM. Almost all of the \TFORM\ specific code. \\

https://github.com/krakjoe/apcu
- apc_cache.h:45 	void ***owner_thread;    /* TSRMLS cache of thread that created this key */
- apc_cache.c:657 	apc_error("Cannot load data from apc.preload_path=%s in thread-safe mode", path);
- config.m4:90       LIBS="$LIBS -lpthread"
- apc_lock.h:41 # include "pthread.h"
- apc_lock.c:67 static pthread_rwlockattr_t apc_lock_attr;

https://github.com/dev47apps/droidcam
- src/droidcam-cli.c:9 #include <pthread.h>
- src/av.c:19 extern int thread_cmd;
- src/droidcam.c:47 volatile int thread_cmd = 0;
- Makefile:24 LIBS  = -lspeex -lasound -lpthread -lm
- src/queue.h:8 #include <pthread.h>

https://github.com/zendtech/ZendOptimizerPlus
- zend_accelerator_debug.c:60     fprintf(fLog, "%s (%lu): ", time_string, (unsigned long)tsrm_thread_id());
- ZendAccelerator.h:256 	zend_bool               locked;    /* thread obtained exclusive lock */
- ZendAccelerator.c:98 /* true globals, no need for thread safety */

https://github.com/rene-dev/stmbl
- shared/hal.h:116   enum thread_state_t {
- docs/linuxcnc/stmbl.hal:9 addf hm2_[HOSTMOT2](BOARD).0.read         servo-thread

https://github.com/libreswan/libreswan
- include/err.h:28  * XXX: Since the above was written pluto has become multi-threaded
- testing/utils/kvmrunner.py:38     # If SIGUSR1, backtrace all threads; hopefully this is early
- programs/pluto/log.c:26 #include <pthread.h>    /* Must be the first include file; XXX: why? */
- testing/guestbin/check-for-core.sh:29 thread apply all bt
- testing/utils/kvmprocessor.py:38     # If SIGUSR1, backtrace all threads; hopefully this is early

https://github.com/mongodb/mongo-c-driver
- lldb.pyi:113     def thread(self) -> SBThread: ...
- src/common/common-thread.c:17 #include "common-thread-private.h"
- src/common/common-thread-private.h:32 #define mcommon_thread_create COMMON_NAME (thread_create)
- src/libmongoc/doc/includes/mongoc_client_pool_thread_safe.txt:4 This function is safe to call from multiple threads.
- src/libmongoc/src/mongoc/mongoc-thread-private.h:24 #include "common-thread-private.h"

https://github.com/renard314/textfairy
- app/libs/tesseract/tesseract/src/viewer/svutil.h:20 // classes, which are used for thread/process creation & synchronization
- app/libs/tesseract/tesseract/unittest/Makefile.am:50 libgtest_la_CPPFLAGS = -I$(top_srcdir)/googletest/googletest/include -I$(top_srcdir)/googletest/googletest -pthread
- app/libs/tesseract/tesseract/ChangeLog:148   * Thread-safety! Moved all critical globals and statics to members of the appropriate class. Tesseract is now thread-safe (multiple instances can be used in parallel in multiple threads.) with the minor exception that some control parameters are still global and affect all threads.
- app/libs/tesseract/tesseract/src/viewer/svutil.cpp:20 // thread/process creation & synchronization and network connection.
- app/libs/leptonica/leptonica/README.md:60   * _Nearly thread-safe_: ref counting on some structs

https://github.com/lwindolf/liferea
- src/update.h:192  * Must be called before gtk_init() and after thread initialization
- ChangeLog:1445 	* Removing deprecated g_thread_init() call
- src/update.c:830                 g_task_run_in_thread(task, update_apply_filter_async);
- configure.ac:40 		gthread-2.0
- src/xml.c:610 	/* has to be called for multithreaded programs */

https://github.com/nodogsplash/nodogsplash
- src/ndsctl_thread.c:21 /** @file ndsctl_thread.c
- src/ndsctl_thread.h:21 /** @file ndsctl_thread.h
- Makefile:6 LDFLAGS+=-pthread
- ChangeLog:59   * ndsctl_thread - ignore interupts when returning from epoll [lynxis]
- src/auth.h:22     @brief Authentication handling thread

https://github.com/coreos/rpm-ostree
- rust/src/main.rs:12 // As of today, basically every function here is blocking, so we spawn a thread.
- rust/src/cliwrap/cliutil.rs:5 use std::{thread, time};
- src/libpriv/rpmostree-postprocess.cxx:733 write_dfd_thread (gpointer datap)
- src/libpriv/rpmostree-output.cxx:75 // a thread today) we want output to go to the transaction's DBus progress.  But for other methods
- rust/src/testutils.rs:94         let extra = rand::thread_rng()

https://github.com/pfalcon/pycopy
- docs/library/_thread.rst:1 :mod:`_thread` -- multithreading support
- py/mpthread.h:33 struct _mp_state_thread_t;
- py/modthread.c:35 #include "py/mpthread.h"
- ports/stm32/pybthread.h:29 typedef struct _pyb_thread_t {
- ports/stm32/pybthread.c:33 #include "pybthread.h"

https://github.com/n64dev/cen64
- os/posix/thread.h:2 // os/posix/thread.h: Multi-threading functions and types.
- os/winapi/thread.h:2 // os/winapi/thread.h: Multi-threading functions and types.
- cen64.c:28 #include "thread.h"
- gdb/gdb.h:33     cen64_thread thread;
- gdb/gdb.c:81 CEN64_THREAD_RETURN_TYPE gdb_thread(void *opaque) {

https://github.com/cbuchner1/CudaMiner
- README.txt:63   -t, --threads=N       number of miner threads (default: number of processors)
- miner.h:13 #include <pthread.h>
- titan_kernel.cu:24 #define THREADS_PER_WU 4  // four threads per hash
- util.c:60 struct thread_q {
- config.log:54 configure:2752: checking for a thread-safe mkdir -p

https://github.com/MoarVM/MoarVM
- src/core/threads.c:3 /* Temporary structure for passing data to thread start. */
- src/core/threads.h:1 MVMObject * MVM_thread_new(MVMThreadContext *tc, MVMObject *invokee, MVMint64 app_lifetime);
- src/core/threadcontext.h:7 /* Possible values for the thread execution interrupt flag. */
- src/core/threadcontext.c:4 /* Initializes a new thread context. Note that this doesn't set up a
- src/6model/reprs/MVMThread.h:1 /* Various stages a thread can be in. */

https://github.com/f9micro/f9-kernel
- kernel/thread.c:6 #include <thread.h>
- include/thread.h:17  * @file thread.h
- user/root_thread.c:6 #include <l4/thread.h>
- kernel/systhread.c:8 #include <thread.h>
- include/systhread.h:9 #include <thread.h>

https://github.com/libhybris/libhybris
- hybris/common/n/bionic/libc/private/thread_private.h:1 /* $OpenBSD: thread_private.h,v 1.18 2006/02/22 07:16:31 otto Exp $ */
- hybris/common/q/bionic/libc/include/android-base/thread_annotations.h:108       THREAD_ANNOTATION_ATTRIBUTE__(no_thread_safety_analysis)
- hybris/common/q/bionic/libc/bionic/pthread_internal.h:31 #include <pthread.h>
- hybris/common/q/bionic/libc/private/thread_private.h:1 /* $OpenBSD: thread_private.h,v 1.18 2006/02/22 07:16:31 otto Exp $ */
- hybris/common/n/bionic/libc/private/ThreadLocalBuffer.h:33 #include <pthread.h>

https://github.com/wseemann/FFmpegMediaPlayer
- core/src/main/jni/SDL/include/SDL_thread.h:22 #ifndef _SDL_thread_h
- core/src/main/jni/SDL/src/thread/SDL_thread.c:23 /* System independent thread management routines for SDL */
- core/src/main/jni/SDL/src/thread/SDL_thread_c.h:23 #ifndef _SDL_thread_c_h
- core/src/main/jni/SDL/src/thread/stdcpp/SDL_syscond.cpp:24 #include "SDL_thread.h"
- core/src/main/jni/SDL/src/thread/stdcpp/SDL_sysmutex.cpp:24 #include "SDL_thread.h"

https://github.com/xroche/coffeecatch
- README.md:22 The handler is thread-safe, but client must have exclusive control on the signal handlers (ie. the library is installing its own signal handlers on top of the existing ones).
- coffeejni.h:16  * The handler is thread-safe, but client must have exclusive control on the
- coffeecatch.c:54 #include <pthread.h>
- Makefile:19 	gcc -c -fPIC -O3 -g3 -pthread \
- coffeecatch.h:16  * The handler is thread-safe, but client must have exclusive control on the

https://github.com/tsgates/mbox
- doc/NOTE.md:58      - race with malicious threads: rewrite arg to the read-only region
- src/time.c:725 			} thread;
- src/strace.spec:138 - fix multithread issues (#240962, #240961, #247907)
- src/README-linux-ptrace:13 process (tracer). Attachment and subsequent commands are per-thread: in
- src/linux/dummy.h:53 #define	sys_get_thread_area	printargs

https://github.com/steve-m/librtlsdr
- src/rtl_tcp.c:42 #include <pthread.h>
- src/rtl_adsb.c:40 #include <pthread.h>
- src/rtl_fm.c:72 #include <pthread.h>
- configure.ac:30 AC_CHECK_HEADERS(pthread.h,, [AC_MSG_ERROR([pthread.h required])])
- src/rtl_power.c:30  *	threading

https://github.com/matlo/GIMX
- core/gimx.c:75       set_done();//signal the main thread to terminate

https://github.com/artclarke/humble-video
- humble-video-captive/src/main/gnu/librtmp/csrc/src/thread.h:32 #include <pthread.h>
- humble-video-captive/src/main/gnu/libx264/csrc/input/thread.c:2  * thread.c: threaded input
- humble-video-captive/src/main/gnu/openssl/csrc/doc/man3/CRYPTO_THREAD_run_once.pod:8 CRYPTO_atomic_add - OpenSSL thread support
- humble-video-captive/src/main/gnu/libvpx/csrc/vpx_util/vpx_thread.h:10 // Multi-threaded worker
- humble-video-captive/src/main/gnu/libvpx/csrc/vpx_util/vpx_thread.c:10 // Multi-threaded worker

https://github.com/bminor/bash
- m4/intl-thread-locale.m4:1 # intl-thread-locale.m4 serial 4
- m4/threadlib.m4:1 # threadlib.m4 serial 16
- m4/pthread_rwlock_rdlock.m4:1 # pthread_rwlock_rdlock.m4 serial 2
- support/signames.c:215 #if defined (SIGLWP)	/* Solaris: special signal used by thread library */
- m4/intl.m4:175 #define glthread_in_use  libintl_thread_in_use

https://github.com/Xilinx/u-boot-xlnx
- tools/buildman/builderthread.py:10 import threading
- doc/README.sched:4   'sched.c' provides an very simplistic multi-threading scheduler.
- lib/smbios-parser.c:194 	{offsetof(struct smbios_type4, thread_count),
- board/intel/Kconfig:24 	  a 64-bit quad-core, single-thread, Intel Atom processor, along with
- tools/binman/state.py:12 import threading

https://github.com/manugarg/pacparser
- src/spidermonkey/js/src/jslock.h:48 #include "prthread.h"
- src/spidermonkey/js/src/config/SunOS5.6.mk:76 ifdef JS_THREADSAFE		# only in thread-safe mode
- src/spidermonkey/js/src/jsobj.h:157 /* Fast macros for accessing obj->slots while obj is locked (if thread-safe). */
- src/spidermonkey/js/src/config/SunOS5.5.mk:74 ifdef JS_THREADSAFE		# only in thread-safe mode
- src/spidermonkey/js/src/jscntxt.h:97  * Structure uniquely representing a thread.  It holds thread-private data

https://github.com/mhogomchungu/zuluCrypt
- external_libraries/lxqt_wallet/frontend/task.h:50  * 1. .get()   This method runs the wrapped function on the current thread
- external_libraries/tasks/README.md:11 1. .get().  This method runs the wrapped function on the current thread
- zuluCrypt-gui/luksaddkey.cpp:457 		if( !utility::enablePolkit( utility::background_thread::False ) ){
- zuluCrypt-cli/utility/process/process.c:31 #include <pthread.h>
- zuluCrypt-gui/utility.h:360 	enum class background_thread{ True,False } ;

https://github.com/tangledpath/ruby-fann
- docs/js/searcher.js:27       // stop current search thread if new search started

https://github.com/bminor/binutils-gdb
- gdb/python/lib/gdb/__init__.py:17 import threading
- gdb/thread-fsm.h:25 struct thread_fsm_ops;
- gdb/thread-iter.c:21 #include "gdbthread.h"
- gdb/thread-iter.h:29    threads.  */
- gdb/nat/gdb_thread_db.h:22 #include <thread_db.h>

https://github.com/Unidata/netcdf-c
- libdispatch/dcrc64.c:36                      Make use of the pthread library optional
- docs/FAQ.md:1825 Are the netCDF libraries thread-safe? {#Are-the-netCDF-libraries-thread-safe}
- Makefile.am:25 # comment thread at https://github.com/Unidata/netcdf-c/pull/2348
- docs/nczarr.md:28 * NCZarr currently is not thread-safe. So any attempt to use it with parallelism, including MPIO, is likely to fail.
- libdispatch/dcrc32.c:66   one thread to use crc32().

https://github.com/yixuan/showtext
- src/tidy.h:7   on any globals.  Thus, thread-safety may be introduced w/out

https://github.com/mobile-web-messaging/MQTTKit
- libmosquitto/thread_mosq.c:38 void *_mosquitto_thread_main(void *obj);
- libmosquitto/mosquitto_internal.h:45 #  include <pthread.h>
- MQTTKit.xcodeproj/project.pbxproj:29 		93F20A91181A68AB00C34747 /* thread_mosq.c in Sources */ = {isa = PBXBuildFile; fileRef = 93F20A6A181A68AB00C34747 /* thread_mosq.c */; };
- libmosquitto/dummypthread.h:4 #define pthread_create(A, B, C, D)
- libmosquitto/mosquitto.h:120  *	libmosquitto provides thread safe operation. 

https://github.com/mwarning/KadNode
- src/windows.c:176 	// Close process and thread handles.
- changelog:227   * Use only one thread to save resources.
- src/main.c:216 		// Fork before any threads are started

https://github.com/quixdb/squash
- NEWS:6  * File API is now thread safe, with *_unlocked variants
- squash/squash.h:49 #  define SQUASH_THREAD_LOCAL __thread
- .travis.sh:72                 CONFIGURE_FLAGS="${CONFIGURE_FLAGS} -DENABLE_SANITIZER=thread"
- docs/internals.md:154 implement the splicing interface, Squash will spawn a new thread and
- squash/CMakeLists.txt:40   tinycthread/source/tinycthread.c)

https://github.com/ruby-numo/numo-narray
- ToDo.md:62 - [ ] use rb_thread_call_without_gvl??
- fft/fftsg.c:754 #include <pthread.h>

https://github.com/skoobe/riofs
- src/rfuse.c:51     pthread_t *unmount_thread;
- src/main.c:580     ERR_remove_thread_state (NULL);
- src/file_io_ops.c:237     // XXX: move to separate thread
- include/global.h:70     #include <pthread.h>
- tests/test_dir_list_many.py:2 import threading

https://github.com/pulseaudio/pulseaudio
- src/pulse/thread-mainloop.c:26 #include <pthread.h>
- src/pulsecore/thread.h:1 #ifndef foopulsethreadhfoo
- src/pulsecore/thread-mq.h:1 #ifndef foopulsethreadmqhfoo
- src/pulsecore/thread-mq.c:27 #include <pulsecore/thread.h>
- src/pulse/thread-mainloop.h:1 #ifndef foothreadmainloophfoo

https://github.com/ParRes/Kernels
- Cxx11/transpose-thread.cc:60 #include <thread>
- C1z/transpose-thread.c:110   pthread_exit(NULL);
- C1z/Makefile:31 .PHONY: all clean serial thread openmp tasks target taskloop ispc
- Cxx11/p2p-cuda.cu:39 ///          is distributed among the threads (stripwise decomposition).
- PYTHON/dgemm_omp.py:57 from numba.openmp import omp_set_num_threads, omp_get_thread_num, omp_get_num_threads, omp_get_wtime

https://github.com/crmulliner/ddi
- dalvikhook/jni/Globals.h:36 #include <pthread.h>
- dalvikhook/jni/dexstuff.h:122     /* threadId, used to check for recursive <clinit> invocation */
- examples/smsdispatch/jni/smsdispatch.c:22 #include <pthread.h>
- examples/strmon/jni/mon.c:22 #include <pthread.h>

https://github.com/strophe/libstrophe
- src/rand.c:256      *  rand(3) can't be used as it isn't thread-safe.
- src/tls_openssl.c:279     ERR_remove_thread_state(NULL);
- Doxyfile:455 # The NUM_PROC_THREADS specifies the number threads doxygen is allowed to use
- m4/ax_valgrind_check.m4:14 #   memory and threading errors.

https://github.com/dfelinto/blender
- intern/cycles/util/thread.h:11 #include <thread>
- intern/cycles/util/thread.cpp:4 #include "util/thread.h"
- intern/cycles/device/cpu/kernel_thread_globals.h:14  * which is not thread-safe for access. Every worker thread which needs to operate on
- source/blender/blenlib/BLI_enumerable_thread_specific.hh:15 #    include <tbb/enumerable_thread_specific.h>
- source/blender/blenlib/BLI_threads.h:10 #include <pthread.h>

https://github.com/royhills/ike-scan
- inet_aton.c:10 **  thread-safe.

https://github.com/richardgv/skippy-xd
- src/img-gif.c:14 // More thread-safe error flag on >=giflib-5.1

https://github.com/sonyxperiadev/kernel
- tools/perf/util/thread_map.c:18 #include "thread_map.h"
- tools/perf/util/thread_map.h:8 #include <internal/threadmap.h>
- drivers/staging/speakup/thread.c:2 #include <linux/kthread.h>
- arch/sparc/include/asm/thread_info.h:5 #include <asm/thread_info_64.h>
- arch/arm/include/asm/thread_notify.h:3  *  arch/arm/include/asm/thread_notify.h

https://github.com/charmedlabs/pixy
- src/host/pixymon/chirpmon.cpp:78     // todo: save the call and use the chirp thread to send (so send and receive are handled by
- src/host/libpixyusb_swig/setup.py:13 	libraries = ['boost_thread',
- src/host/libpixyusb/CMakeLists.txt:10 find_package ( Boost 1.49 COMPONENTS thread system REQUIRED)
- src/host/pixymon/interpreter.h:185     // for thread
- src/host/libpixyusb_swig/get_blocks.py:8 # Initialize Pixy Interpreter thread #

https://github.com/GNS3/dynamips
- stable/cpu.c:17 #include <pthread.h>
- stable/cpu.h:9 #include <pthread.h>
- cmake/dependencies.cmake:6 #  - pthreads        : required
- common/timer.h:12 #include <pthread.h>
- common/timer.c:24 #include <pthread.h>

https://github.com/cetic/6lbr
- examples/multi-threading/multi-threading.c:38  *         Multi-threading library
- doc/pt-doc.txt:7 \defgroup pt Protothreads 
- core/sys/mt.c:38  * multithreading library for Contiki.
- doc/contiki-mainpage.txt:20 protothreads, first released in 2005, have been used in many different
- core/sys/pt.h:42  * Protothreads implementation.

https://github.com/scen/osxinj
- bootstrap/main.cpp:5 #include <mach/thread_act.h>
- osxinj/mach_inject.h:14 #define	err_threadEntry_image_not_found			(err_local|1)
- osxinj/mach_inject.c:51             const mach_inject_entry	threadEntry,
- osxinj/injector.cpp:7 #include <mach/thread_act.h>

https://github.com/mirror/firmware-mod-kit
- src/others/squashfs-3.3-lzma/CPP/Windows/Thread.h:17   ::CThread thread;
- src/others/squashfs-3.3-lzma/C/Threads.h:15 #define Thread_Construct(thread) (thread)->handle = NULL
- src/others/squashfs-3.3-lzma/C/Threads.c:24 HRes Thread_Create(CThread *thread, THREAD_FUNC_RET_TYPE (THREAD_FUNC_CALL_TYPE *startAddress)(void *), LPVOID parameter)
- src/others/squashfs-4.2/lzma-4.65/CPP/Windows/Thread.h:17   ::CThread thread;
- src/binwalk-1.0/src/bin/binwalk-script:6 from threading import Thread

https://github.com/theos/headers
- openssl/crypto.h:280 /* Adds thread number to the memory checking information */
- openssl/bn.h:316  * It cannot be shared between threads
- openssl/bio.h:649 /* We might want a thread-safe interface too:
- IOKit/OSKext.h:52  * <b>NOTICE:</b> This library is neither thread-safe nor garbage-collection
- QuartzCore/QuartzCore-Structs.h:46 	pthread_t _m;

https://github.com/mjansson/foundation_lib
- foundation/thread.h:1 /* thread.h  -  Foundation library  -  Public Domain  -  2013 Mattias Jansson
- foundation/thread.c:1 /* thread.c  -  Foundation library  -  Public Domain  -  2013 Mattias Jansson
- CHANGELOG:17 Add function to query if a thread has finished execution (thread_is_finished)
- foundation/fs.m:139 	bool bootstrap_thread = !thread_is_entered();
- foundation/apple.h:48 #define thread_create __system_thread_create

https://github.com/thpatch/thtk
- thecl/eclmap.h:54 /* Loads entries from eclmap file (thread unsafe) */
- util/seqmap.h:76 /* Loads entries from seqmap file (thread unsafe) */
- util/util.h:63  * static buffer, not thread-safe. */
- contrib/wcxhead.h:58 #define BACKGROUND_UNPACK   1    /* Which operations are thread-safe?    */
- thdat/thdat.1:89 The number of threads to be used for compression and decompression.

https://github.com/libxmp/libxmp
- src/depackers/bunzip2.c:533   // First thing that can be done by a background thread.
- docs/libxmp.rst:192 SDL callbacks run in a separate thread, so don't forget to protect sections
- docs/Changelog:724 	- fix thread-unsafe Archimedes Tracker loader
- src/depackers/ptpopen.c:153      NULL,              // primary thread security attributes
- src/loaders/vorbis.c:100 // Individual stb_vorbis* handles are not thread-safe; you cannot decode from

https://github.com/cs3157/recitations
- O-Smart-Pointer/smart-pointers.md:196 * Atomic reference counting for thread safety.

https://github.com/BennyQBD/3DEngineCpp
- lib/SDL2/include/SDL2/SDL_thread.h:22 #ifndef _SDL_thread_h
- lib/SDL2/include/SDL2/SDL_mutex.h:28  *  Functions to provide thread synchronization primitives.
- lib/SDL2/include/SDL2/SDL_hints.h:98  *  \brief  A variable controlling whether the Direct3D device is initialized for thread-safe operations.
- lib/SDL2/include/SDL2/SDL_messagebox.h:114  *  \note This function should be called on the thread that created the parent
- lib/SDL2/include/SDL2/SDL_config.h:159 /* Enable various threading systems */

https://github.com/genometools/genometools
- src/core/thread.c:22 #include "core/thread_api.h"
- src/core/thread_api.h:24 /* Number of parallel threads to be used. */
- src/core/multithread.c:18 #include "core/multithread_api.h"
- src/core/multithread_api.h:21 #include "core/thread_api.h"
- testsuite/stest.rb:6 require 'thread'

https://github.com/thaytan/gst-rpicamsrc
- examples/dynamicprops.py:35     GObject.threads_init()
- configure.ac:46 RPI_INCLUDEPATH="-I$RPIPATH -I$RPIPATH/interface/vcos/pthreads -I$RPIPATH/interface/vmcs_host/linux"

https://github.com/yixia/librtmp
- thread.h:32 #include <pthread.h>
- thread.c:22 #include "thread.h"
- Makefile:41 THREADLIB_posix=-lpthread
- rtmpsuck.c:40 #include "thread.h"
- rtmpsrv.c:40 #include "thread.h"

https://github.com/rockcarry/ffplayer
- player-win32/pthreads-win32/include/pthread_time.h:43 /* Clock support in threads are available.  */
- player-win32/pthreads-win32/include/pthread_unistd.h:28   Basic support for POSIX threads is available. The functions
- player-win32/ffmpeg-win32/include/libavutil/threadmessage.h:42  *          lavu was built without thread support
- player-win32/pthreads-win32/include/pthread.h:72 #include "pthread_compat.h"
- src/ffplayer.cpp:2 #include <pthread.h>

https://github.com/raboof/notion
- de/draw.c:338     /* Not thread-safe, but neither is the rest of the drawing code
- contrib/statusd/statusd_nmaild.lua:156 	local threads = coroutine.create(plan_count) --> Trying to avoid read bottlenecks  ,>

https://github.com/skgmn/RapidDecoder
- library/src/main/java/rapid/decoder/cache/LruCache.java:204      * <p>The method is called without synchronization: other threads may
- library/src/main/java/rapid/decoder/cache/DiskLruCacheEngine.java:269     /** This cache uses a single background thread to evict entries. */

https://github.com/roman10/android-ffmpeg-tutorial
- android-ffmpeg-tutorial02/jni/tutorial02.c:24 #include <pthread.h>
- android-ffmpeg-tutorial01/jni/tutorial01.c:49 	//reference: https://forums.oracle.com/thread/1548728

https://github.com/ksherlock/mpw
- mplite/mplite.h:76  * @brief Lock object to be used in a threadsafe memory pool
- macos/errors.cpp:377 	case -1300: return "No file thread exists.";
- mpw/mpw.cpp:141 		// thread-safe
- macos/errors.h:97     fidNotFound = -1300,                            /*no file thread exists.*/
- mplite/mplite.c:377  ** threads can be in this routine at the same time.

https://github.com/mozilla-services/lua_sandbox
- src/lua/ltm.c:25   "string", "table", "function", "userdata", "thread",
- src/lua/lgc.c:131   GCObject **p = &g->mainthread->next;
- src/lua/lstate.c:33 ** Main thread combines a thread state and the global state
- src/lua/lstate.h:66 ** `global state', shared by all threads of this state
- src/lua/lstring.c:106   /* chain it on udata list (after main thread) */

https://github.com/AdrienHerubel/imgui
- lib/glfw/lib/thread.c:40 // Find pointer to thread with a matching ID
- lib/glfw/lib/cocoa/cocoa_thread.c:42 // thread function.
- lib/glfw/lib/win32/win32_thread.c:63 // This is simply a "wrapper" for calling the user thread function.
- lib/glfw/lib/x11/x11_thread.c:42 // This is simply a "wrapper" for calling the user thread function.
- lib/glfw/lib/cocoa/platform.h:44 #include <pthread.h>

https://github.com/wc-duck/dbgtools
- src/hw_breakpoint.cpp:175 	HANDLE thread = GetCurrentThread();

https://github.com/svanderburg/disnix
- src/dbus-service/signaling.c:36 static gpointer signal_boolean_result_thread_func(gpointer data)
- src/dbus-service/signaling.h:29  * Spawns a thread that waits for process to complete and propagates a finish
- src/dbus-service/disnix-service.c:205     DaemonData *data = (DaemonData*)g_malloc(sizeof(DaemonData)); /* We must allocate the daemon data on the heap -> it is required by callback functions invoked from a thread */

https://github.com/zturtleman/spearmint
- code/SDL2/include/SDL_thread.h:22 #ifndef SDL_thread_h_
- code/SDL2/include-macppc/SDL_thread.h:22 #ifndef _SDL_thread_h
- code/bspc/l_threads.c:32 #include "l_threads.h"
- code/SDL2/include/SDL_config.h.in:354 /* Enable various threading systems */
- code/AL/alext.h:152 #ifndef ALC_EXT_thread_local_context

https://github.com/blitz-research/monkey
- modules/brl/thread.monkey:2 ' Highly unsafe threads!!!!! Use at your own considerable risk!!!!!
- modules/brl/native/thread.cs:6 	private Thread _thread;
- modules/brl/native/thread.cpp:2 // ***** thread.h *****
- modules/brl/native/thread.java:6 	Thread _thread;
- targets/__deprecated__/glfw/template/glfw/lib/thread.c:40 // Find pointer to thread with a matching ID

https://github.com/dawnbreaks/mysql2redis
- README.md:85    Now all update events for that mysql table has been transfer to a redis queue.  You need to start a thread(or process) to handle these update events and update the redis cache properly. 
- lib_mysqludf_redis.c:57     	apr_thread_pool_destroy(thrp);
- lib_mysqludf_redis.h:2 #include <pthread.h>

https://github.com/torch/image
- test/test_rotate.lua:4 torch.setnumthreads(16)
- test/test_warp.lua:3 torch.setnumthreads(16)

https://github.com/stingergraph/stinger
- external/googletest/m4/acx_pthread.m4:2 #    http://svn.0pointer.de/viewvc/trunk/common/acx_pthread.m4?revision=1277&root=avahi
- src/server/src/server.cpp:43 static pthread_t batch_server_tid, alg_server_tid;
- src/server/src/batch_server.cpp:92   pthread_t garbage_thread_handle;
- lib/stinger_core/src/core_util.c:71  * calling this with all threads (although it will also work outside of 
- lib/stinger_core/inc/stinger_defs.h.in:77 static inline int omp_get_num_threads (void) { return 1; }

https://github.com/esl/erlang_ale
- rebar.config:14 {port_env, [{"linux", "LDFLAGS", "$LDFLAGS -lpthread"}]}.

https://github.com/gurugio/book_cprogramming
- old/calib/util/thrsafe.c:3 #include <pthread.h>
- old/calib/src/atomic_list.c:164     /* Other thread try to remove left or current node,
- old/calib/include/thrsafe.h:6  * thread-specific data
- old/calib/calib.mk:84 # util for thread safety test
- old/calib/src/tls_errno.c:6 int32_t tls_init(pthread_key_t *tls_key)

https://github.com/truenas/os
- lib/libthr/thread/thr_exit.c:43 #include <pthread.h>
- lib/libthr/thread/thr_attr.c:101 #include <pthread.h>
- lib/libthr/thread/thr_fork.c:70 #include <pthread.h>
- lib/libthr/thread/thr_cond.c:40 #include <pthread.h>
- lib/libthr/thread/thr_init.c:53 #include <pthread.h>

https://github.com/Perlmint/glew-cmake
- include/GL/eglew.h:140 typedef void (EGLAPIENTRY  *EGLDEBUGPROCKHR)(EGLenum error,const char *command,EGLint messageType,EGLLabelKHR threadLabel,EGLLabelKHR objectLabel,const char* message);
- doc/log.html:491 <li> GL_NV_shader_thread_group
- doc/glew.html:792 <tr><td class="num">670</td><td>&nbsp;</td><td><a href="https://www.khronos.org/registry/OpenGL/extensions/NV/NV_shader_thread_group.txt">NV_shader_thread_group</a></td></tr>
- auto/doc/install.html:75 runtime library, so it does not matter which version (single-threaded,
- doc/install.html:171 runtime library, so it does not matter which version (single-threaded,

https://github.com/cloudwu/hive
- README.md:23   thread = 4,   -- 4 worker thread, You can set more if you have more cpu core.
- src/hive_scheduler.c:11 #include <pthread.h>
- Makefile:20 	gcc -g -Wall --shared -fPIC -o $@ $^ -lpthread
- hive-0.1-1.rockspec:45 			libraries = { "pthread" },
- test.lua:6 	thread = 4,

https://github.com/baylej/tmx
- doc/src/error.rst:5    Error management is the only non thread-safe functionality in **libTMX**, due to the *tmx_errno* global it is based on.

https://github.com/drhelius/Gearsystem
- platforms/ios/dependencies/SDL-2.0.4-9174/include/SDL_thread.h:22 #ifndef _SDL_thread_h
- platforms/ios/dependencies/SDL-2.0.4-9174/src/thread/SDL_thread.c:23 /* System independent thread management routines for SDL */
- platforms/ios/dependencies/SDL-2.0.4-9174/src/thread/SDL_thread_c.h:23 #ifndef _SDL_thread_c_h
- platforms/ios/dependencies/SDL-2.0.4-9174/src/thread/SDL_systhread.h:25 #ifndef _SDL_systhread_h
- platforms/ios/dependencies/SDL-2.0.4-9174/src/thread/stdcpp/SDL_syscond.cpp:24 #include "SDL_thread.h"

https://github.com/stefanberger/libtpms
- man/man3/TPMLIB_CancelCommand.pod:23 needs to process TPM commands in one thread and cancel them in another.
- src/tpm_tpm12_tis.c:158 	    printf("TPM_IO_Hash_Data: Error, no existing SHA1 thread\n");
- src/tpm12/tpm_global.c:108 	/* initialize the SHA1 thread context */
- include/libtpms/tpm_error.h:108 #define TPM_SHA_THREAD          TPM_BASE + 26 /* There is no existing SHA-1 thread.  */
- src/tpm12/tpm_cryptoh.c:3245        TPM_SHA1CompleteExtend command. The capability SHALL open a thread that calculates a SHA-1

https://github.com/njh/mqtt-sn-tools
- mqtt-sn-dump.c:125     // Signal the main thread to stop
- mqtt-sn-sub.c:207     // Signal the main thread to stop
- test/fake_server.rb:24   attr_reader :thread

https://github.com/Temptin/SkypeExport
- src/SkypeExport/libs/sqlite3/sqlite3ext.h:143   void  (*thread_cleanup)(void);
- src/SkypeExport/model/skypeparser_core.cpp:67 		// NOTE: the "NOT GLOB" check avoids all names with # or $ or @ in their IDs, since those are illegal characters in *real* SkypeIDs and are only used internally for certain situations that seem related to "cloud history" data not having finished downloading yet (examples of those internal IDs are "19:0062db31a2714735a93f5a8365cb0838@thread.skype" and "#test.acc2001/$test.acc2004;8c67a909bc2228f8"; I've only seen the prior format and only in a single row in the dialog_partner field for a partial "cloud history" test database, and it vanished after the database continued downloading the history, but we might as well validate all names to make sure no temporary, internal names are caught anywhere)
- src/SkypeExport/_gccbuild/macosx/README.md:17     ./b2 -a link=static variant=release threading=multi toolset=darwin architecture=x86 address-model=32_64 stage
- src/SkypeExport/_gccbuild/linux/CMakeLists.txt:28 # disable sqlite3 threading and dynamic extension loader to avoid pthreads/dl dependencies
- src/SkypeExport/libs/sqlite3/shell.c:3226       { "worker_threads",        SQLITE_LIMIT_WORKER_THREADS            },

https://github.com/middlefeng/LuaVMRead
- lgc.c:147 2. Objects which refer to other collectable objects (table, closure, thread,

https://github.com/storpipfugl/pykdtree
- README.rst:17 Queries are optionally multithreaded using OpenMP.
- CHANGELOG.md:48 ## v1.2.1Fixed OpenMP thread safety issue introduced in v1.2.0

https://github.com/liexusong/atom
- atom.c:64 /* True global resources - no need for thread safety here */

https://github.com/signal11/m-stack
- apps/msc_test/main.c:86  * USB peripheral to be working at the same time as the main CPU thread is
- host_test/test.c:38 #include <pthread.h>
- host_test/control_transfer_out.c:37 #include <pthread.h>
- host_test/control_transfer_in.c:37 #include <pthread.h>
- host_test/feature.c:56 #include <pthread.h>

https://github.com/linuxmint/cinnamon-desktop
- libcinnamon-desktop/gnome-installer.c:124 check_for_packages_thread (GTask        *task,
- ChangeLog:2877     GnomeDesktopThumbnail: Use GOnce for thread safety
- libcinnamon-desktop/gnome-desktop-thumbnail.c:863  * This function must be called on the main thread.
- libcinnamon-desktop/gnome-bg.c:3176 threadsafe_localtime (time_t time, struct tm *tm)
- debian/changelog:512   * gnome-installer: use a GTask for the IsInstalled loop, so the main thread isn't blocked.  Add some feedback to the test script to check this.

https://github.com/Freescale/gstreamer-imx
- gst-libs/imx2d/backend/g2d/meson.build:94 	# Starting with G2D 2.0, the previous thread limitation is gone.
- ChangeLog:22   * g2d: Don't restrict calls to one thread if G2D is new enough
- gst-libs/imx2d/imx2d.h:817  * be called from the same thread. These functions are:
- ext/vpu/gstimxvpudeccontext.h:100 	/* This mutex is used for thread-synchronized access to the decoder instance. */
- gst-libs/imx2d/backend/g2d/g2d_blitter.c:363  * to be made from one and the same thread. Newer G2D versions do not require

https://github.com/conda/pycosat
- .github/workflows/lock.yml:21       - uses: dessant/lock-threads@v5

https://github.com/McNopper/OpenGL_ES
- Example01_ES2/CMakeLists.txt:20 		include_directories(/opt/vc/include /opt/vc/include/interface/vcos/pthreads /opt/vc/include/interface/vmcs_host/linux ${Example01_ES2_SOURCE_DIR}/../GLUS/src)		
- GLUS/README.txt:44 - MinGW-w64 - for 32 and 64 bit Windows: http://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win32/Personal%20Builds/mingw-builds/5.1.0/threads-posix/dwarf/  
- GLUS/src/glus_os_linux_raspberrypi_es.c:20 #include <pthread.h>
- Example06_ES2/CMakeLists.txt:20 		include_directories(/opt/vc/include /opt/vc/include/interface/vcos/pthreads /opt/vc/include/interface/vmcs_host/linux ${Example06_ES2_SOURCE_DIR}/../GLUS/src)		
- Example06_ES2/.cproject:35 									<listOptionValue builtIn="false" value="${workspace_loc:}/../RaspberryPi/rootfs/opt/vc/include/interface/vcos/pthreads"/>

https://github.com/ppelleti/https-example
- https-common.h:21  * entries in the OpenSSL "error stack", which is a bit of thread-local
- configure.ac:35                                libevent_pthreads >= 2.1.2

https://github.com/TTimo/es_core
- README.md:14 Each logical part of the framework executes in it's own thread. The input thread (main.cpp, also doing the initialization), the game thread (game.cpp) and the renderer thread (render.cpp). The threads communicate with each other using a lightweight messaging system, backed by ZeroMQ.
- main.cpp:31 #include "SDL_thread.h"
- game_main.h:44 int game_thread( void * ); // GameThreadParms *
- render_main.h:45 int render_thread( void * );
- game_main.cpp:33 #include "SDL_thread.h"

https://github.com/philberty/cython-book
- chapter5/webserver-gil-example/PyMessageServer.pyx:4 import threading
- chapter5/webserver-gil-example/AsyncMessageServer.c:23 #include <pthread.h>
- README.org:77 releated to threading. And finally 2 more examples on how you could
- chapter3/tmux-project/tmux-1.8/configure:2617 { $as_echo "$as_me:${as_lineno-$LINENO}: checking for a thread-safe mkdir -p" >&5

https://github.com/zeromq/libcurve
- doc/curve_server.txt:100 //  server in this foreground thread. Don't pass verbose to
- doc/curve_client.txt:90 //  client in this foreground thread.
- doc/curve_server.doc:91     //  server in this foreground thread. Don't pass verbose to
- doc/curve_client.doc:81     //  client in this foreground thread.
- src/curve_server.c:33 //  This background thread does all the real work

https://github.com/poliva/rootadb
- src/org/eslack/rootadb/RootAdb.java:89 		Thread thread = new Thread(new Runnable() {
- jni/system_properties.c:526             // The init process is single-threaded and its property

https://github.com/saghul/python-fibers
- docs/why.rst:8 like a thread but with greenlet, but the API offered by greenlet got in the way,
- docs/index.rst:12 threads, which are preemptively scheduled, fibers are scheduled cooperatively,
- src/fibers.h:25     stacklet_thread_handle thread_h;
- fibers/_pyfibers.py:3 import threading
- src/stacklet.c:57     stacklet_thread_handle stack_thrd;  /* the thread where the stacklet is */

https://github.com/openchange/openchange
- configure.ac:509 dnl Check for pthread libs
- doc/examples/multiple_notif.c:41 #include <pthread.h> 
- .travis.yml:9   - sudo apt-get install -qq autoconf automake bison doxygen flex libboost-system-dev libboost-thread-dev libical-dev libldb-dev libmagic-dev libpopt-dev libsqlite3-dev libsubunit-dev libtalloc-dev libtevent-dev pkg-config python-all-dev python-samba samba-dev zlib1g-dev python-twisted-core python-subunit check python-mysqldb libpcap-dev libmemcached-dev libnanomsg0
- python/openchange/web/auth/NTLMAuthHandler.py:512         # process or thread starting a daemon if needed
- doc/examples/Makefile:20 		gcc multiple_notif.c -o multiple_notif `pkg-config libmapi --cflags --libs` -lpthread -lpopt

https://github.com/GrayFace/wog
- T1/LuaJIT/src/lua.h:42 /* thread status; 0 is OK */
- T1/LuaJIT/src/lj_obj.c:14   "table", "function", "userdata", "thread", "proto", "cdata"
- T1/LuaJIT/src/lj_state.c:129   setthreadV(L1, st, L1);  /* Needed for curr_funcisL() on empty stack. */
- T1/LuaJIT/src/lj_udata.c:24   /* Chain to userdata list (after main thread). */
- T1/LuaJIT/src/lib_base.c:60 LJLIB_PUSH("thread")

https://github.com/hpc/mpifileutils
- test/legacy/dtest/dtest:21 import thread

https://github.com/Skycrab/Linux-C-Web-Server
- info.txt:1633    } _sigev_thread;
- Makefile:5 #If you support https,then LIB=-DHTTPS -lpthread -lssl -lcrypto
- wrap.h:22 #include <pthread.h>

https://github.com/arduino/openwrt-yun
- target/linux/ubicom32/files/arch/ubicom32/kernel/thread.c:2  * arch/ubicom32/kernel/thread.c
- target/linux/ubicom32/files/arch/ubicom32/include/asm/thread.h:2  * arch/ubicom32/include/asm/thread.h
- target/linux/ubicom32/files/arch/ubicom32/include/asm/thread-asm.h:2  * arch/ubicom32/include/asm/thread-asm.h
- target/linux/ubicom32/files/arch/ubicom32/include/asm/thread_info.h:2  * arch/ubicom32/include/asm/thread_info.h
- target/linux/goldfish/patches-2.6.30/0061--ARM-Save-thread-registers-in-coredumps.patch:4 Subject: [PATCH 061/134] [ARM] Save thread registers in coredumps

https://github.com/jpsdr/x264
- input/thread.c:2  * thread.c: threaded input
- doc/threads.txt:2 Slice-based threads was the original threading model of x264.  It was replaced with frame-based threads in r607.  This document was originally written at that time.  Slice-based threading was brought back (as an optional mode) in r1364 for low-latency encoding.  Furthermore, frame-based threading was modified significantly in r1246, with the addition of threaded lookahead.
- common/threadpool.h:2  * threadpool.h: thread pooling
- common/win32thread.c:2  * win32thread.c: windows threading
- common/win32thread.h:2  * win32thread.h: windows threading

https://github.com/NVIDIA/cuda-gdb
- gdb/testsuite/gdb.linespec/thread.c:21 thread ()
- gdb/testsuite/gdb.python/py-inferior.c:5 #include <pthread.h>
- gdb/thread-fsm.h:25 struct thread_fsm_ops;
- gdb/thread-iter.h:29    threads.  */
- gdb/thread-iter.c:21 #include "gdbthread.h"

https://github.com/gregrahn/tpch-kit
- dbgen/HISTORY:416            (Note: updates are still single-threaded; -C is cleared 

https://github.com/jncronin/rpi-boot
- log.c:36  * compromise.  The ideal situation would be to have a background thread
- malloc.c:112   Thread-safety: NOT thread-safe unless USE_LOCKS defined non-zero

https://github.com/naemon/naemon-core
- src/naemon/macros.h:218  * not thread-safe. It's not used in-core, and its use in
- tap/src/tap.3:322 .Lb libpthread
- src/naemon/utils.c:185 /* from GNU defines errno as a macro, since it's a per-thread variable */
- src/naemon/macros.c:2294  * the thread-safe version
- src/naemon/commands.c:203 /* shutdown command file worker thread */

https://github.com/MitchBradley/cforth
- src/cforth/util.fth:459 1 constant #threads
- src/cforth/makename.c:34 	int varno  = 1;  // Var 0 is the threads for the forth vocabulary
- build/bluez64/Makefile:6 LIBS += -lpthread
- src/cforth/compiler.c:118     token_t *threadp = hash ((vocabulary_t *)XT_FROM_CT(T(CURRENT), up), adr, len);
- src/ofw/ofw-support.fth:175    >threads                                   ( new-alf prev-link )

https://github.com/Lupus/libevfibers
- coro/coro.h:56  * 2008-04-04 New (but highly unrecommended) pthreads backend.
- README.md:6 You may ask why yet another fiber library, there are GNU Pth, State threads, etc. When I was looking at their API, I found it being too restrictive: you cannot use other event loop. For GNU Pth it's solely select based implementation, as for state threads --- they provide several implementations including poll, epoll, select though event loop is hidden underneath the public API and is not usable directly. I found another approach more sensible, namely: just put fiber layer on top of well-known and robust event loop implementation.
- coro/coro.c:395 /* pthread backend                                                           */
- include/evfibers/fiber.h:28  * You may ask why yet another fiber library, there are GNU Pth, State threads,
- test/CMakeLists.txt:17 	target_compile_options(evfibers_test PUBLIC "-pthread")

https://github.com/heiher/hev-socks5-server
- src/hev-socks5-proxy.c:15 #include <pthread.h>
- README.md:41   # Worker threads
- Makefile:16 		-lpthread
- conf/main.yml:4   # Worker threads

https://github.com/devernay/cminpack
- README.md:99     single thread). cminpack can now also be compiled with
- docs/index.html:54 <li>If the function to be optimized has to use extra parameters or data (this is the case most of the time), the only way to access them was though global variables, which is very bad, especially if you want to use the same function with different data in different threads: <em>The Minpack code is not MT-Safe.</em></li>
- cuda/examples/tlmderc.cu:33 //  fixed arrangement of threads to be run 
- cuda/examples/tlmdifc.cu:33 //  fixed arrangement of threads to be run 
- cuda/examples/tlmdif1c.cu:32 //  fixed arrangement of threads to be run 

https://github.com/fomy/destor
- configure.ac:13 AC_CHECK_LIB([pthread], [pthread_create])
- src/restore.h:16 void* assembly_restore_thread(void *arg);
- src/read_phase.c:5 static pthread_t read_t;
- src/hash_phase.c:5 static pthread_t hash_t;
- src/do_restore.c:8 static void* lru_restore_thread(void *arg) {

https://github.com/leapcode/pysqlcipher
- src/blob.c:13     if (!pysqlite_check_thread(self->connection)){
- doc/sphinx/sqlcipher.rst:338    You can call this method from a different thread to abort any queries that might

https://github.com/ghewgill/puzzles
- gtk.c:157     int preset_threaded;
- windows.c:1309      * (If we were running HTML Help single-threaded, this is where we'd

https://github.com/etsy/mod_realdoc
- redhat/10-mod_realdoc.conf:8 # conditions in other mpms due to not being thread-safe

https://github.com/technion/libscrypt
- crypto_scrypt-check.c:11 /* On windows, strtok uses a thread-local static variable in strtok to

https://github.com/mncoppola/rpef
- utilities_src/squashfs4.2/lzma465/CPP/Windows/Thread.h:17   ::CThread thread;
- utilities_src/squashfs4.2/lzma465/C/Threads.c:1 /* Threads.c -- multithreading library
- utilities_src/squashfs4.2/lzma465/C/Threads.h:1 /* Threads.h -- multithreading library
- utilities_src/squashfs4.1/OLD-READMEs/README-3.1:15 Mksquashfs has been rewritten and it is now multi-threaded.  It offers
- utilities_src/squashfs4.1/CHANGES:78 		and decompression is now multi-threaded.  Up to 40% speed

https://github.com/cooperative-computing-lab/cctools
- dttools/src/load_average.c:56 		char *p = string_format("/sys/devices/system/cpu/cpu%u/topology/thread_siblings", i);
- devel/tlq/server/tlq_server:73     use threads;
- makeflow/src/mf_mesos_executor:17 import threading
- devel/apps/wq_hypersweep/resnet.py:22 # Limit Tensorflow to single thread execution
- makeflow/example/example.categories.makeflow:34 	$CONVERT -delay 10 -loop 0 -limit thread $CORES capitol.jpg capitol.90.jpg capitol.180.jpg capitol.270.jpg capitol.360.jpg capitol.270.jpg capitol.180.jpg capitol.90.jpg capitol.montage.gif

https://github.com/mwarning/SimpleDNS
- README.md:9 * single-threaded

https://github.com/martinrybak/SQLClient
- SQLClient/SQLClient/SQLClient/cspublic.h:673 	CS_VOID *thread;

https://github.com/ljalves/linux_media
- fs/proc/thread_self.c:7  * /proc/thread_self:
- include/linux/thread_info.h:1 /* thread_info.h: common low-level thread information accessors
- tools/perf/util/thread_map.h:8 struct thread_map_data {
- net/rds/threads.c:41  * work queues that execute in a connection managing thread.
- include/linux/kthread.h:3 /* Simple interface for creating and stopping kernel threads without mess. */

https://github.com/aerospike/aerospike-client-c
- src/include/aerospike/as_tls.h:33 AS_EXTERN void as_tls_thread_cleanup(void);
- src/include/aerospike/as_cpu.h:19 #include <pthread.h>
- src/main/aerospike/aerospike.c:29 #include <pthread.h>
- src/include/aerospike/as_node.h:260 	 * Array of IP addresses. Not thread-safe.
- src/include/aerospike/as_event.h:21 #include <pthread.h>

https://github.com/CyanogenMod/android_device_samsung_jf-common
- include/hardware/gps.h:23 #include <pthread.h>
- ril/telephony/java/com/android/internal/telephony/jflteRIL.java:501     // one-shot thread for each. Unfortunately the ToneGenerator API does
- camera/CameraWrapper.cpp:31 #include <utils/threads.h>

https://github.com/happykevins/cocos2dx-ext
- extensions/cells/CCells.cpp:39 static pthread_t s_thread;
- extensions/cells/CCreationWorker.h:81 	pthread_t m_thread;
- extensions/cells/CCreationFactory.h:76 	// worker thread callback
- extensions/cells/cells.cpp:48 	worker_thread_num(CELLS_DEFAULT_WORKERNUM), max_download_speed(CELLS_DOWNLOAD_SPEED_NOLIMIT),
- extensions/cells/CUtils.cpp:345 					// FIXED: if return here, multi-thread mkdir will cause error.

https://github.com/zhanglei/ucmq
- source/gtest/ucmq_common.h:8 // max messages per queue per thread
- source/log.c:240     static __thread int t_tid = -1;
- ltmain.sh:1152     thread_safe=no
- source/util.h:121 Description  :  Get current thread id
- client/php/ucmq.c:189 /* True global resources - no need for thread safety here */

https://github.com/CyanogenMod/android_device_samsung_i9500
- include/hardware/gps.h:23 #include <pthread.h>
- audio/audio_hw.c:25 #include <pthread.h>
- include/telephony/ril.h:3646  * Callee will invoke RIL_RadioStateRequest method on main thread
- liblights/lights.c:30 #include <pthread.h>
- audio/eS325VoiceProcessing.cpp:654 static pthread_mutex_t sAdncBundleLock;

https://github.com/yeung908/lvjh_ipcamera_hisi3518
- X_IPC/vadcDrv.c:4 #include <pthread.h>
- onvif_all/discoveryServer.c_ssl:1 #include <pthread.h>
- X_IPC/onvif/onvifDiscovery.c:8 #include <pthread.h>
- rtsp/liveMedia/DeviceSource.cpp:93   // Instead, our event trigger must be called (e.g., from a separate thread) when new data becomes available.
- X_IPC/mpp/sample/common/sample_comm_isp.c:25 #include <pthread.h>

https://github.com/linuxmint/cinnamon-control-center
- panels/common/cc-language-chooser.c:50         gdk_threads_enter ();
- panels/common/cc-common-language.c:311   return gdk_threads_add_idle (add_one_language, data);

https://github.com/ros-drivers/camera_umd
- uvc_camera/src/stereo.cpp:1 #include <boost/thread.hpp>
- jpeg_streamer/CMakeLists.txt:10 find_package(Boost REQUIRED COMPONENTS system thread)
- uvc_camera/include/uvc_camera/camera.h:4 #include <boost/thread.hpp>
- jpeg_streamer/src/mongoose.c:127 typedef HANDLE pthread_mutex_t;
- uvc_camera/CMakeLists.txt:10 find_package(Boost REQUIRED COMPONENTS thread system)

https://github.com/mupen64plus/mupen64plus-input-sdl
- projects/cmake/CMake/Find/FindSDL2.cmake:42 # Added a search for threads which is needed by some platforms.
- src/plugin.c:1031             emulation thread)
- projects/cmake/CMakeLists.txt:16 set(CMAKE_CXX_FLAGS "-pthread -fvisibility-inlines-hidden")

https://github.com/mohsenali/nvidia_sdk_samples
- matrixMul/common/inc/multithreading.h:16 //Simple portable thread library.
- vectorAdd/common/src/multithreading.cpp:14 #include <multithreading.h>
- matrixMul/0_Simple/matrixMul/matrixMul.cu:50     int tx = threadIdx.x;
- simplePrintf/0_Simple/simplePrintf/cuPrintf.cuh:61 //      Called to restrict output to a given thread/block. Pass
- vectorAdd/common/inc/drvapi_error_string.h:104      * current thread. This can also be returned if the context passed to an

https://github.com/illuspas/SayHi
- jni/armeabi/include/speex/speex_buffer.h:4    This is a very simple ring buffer implementation. It is not thread-safe
- jni/SayHi.c:22 #include <pthread.h>
- jni/armeabi-v7a/include/speex/speex_buffer.h:4    This is a very simple ring buffer implementation. It is not thread-safe

https://github.com/floodlight/indigo
- modules/OFStateManager/README:22 Platforms that use multiple threads to handle hardware events should ensure
- modules/OFConnectionManager2/module/src/README.tls:41     David Schwartz's old posts (especially, this thread:
- modules/indigo/module/inc/indigo/of_connection_manager.h:754  * stalling the main thread.
- README.md:145 threaded environments.
- targets/utests/Configuration/Makefile:38 GLOBAL_LINK_LIBS += -lpthread -lpcap -lm

https://github.com/zeromq/rfc
- src/spec_27.c:213 //  Main thread starts the other threads
- content/docs/rfcs/49/README.md:27 Scatter-gather pattern is member of a new family of thread-safe sockets.
- content/docs/rfcs/21/README.md:132 The project SHALL depend at least on CZMQ (libczmq), which imports ZeroMQ (libzmq), to provide portable APIs around networking, threads, file systems, and other aspects.
- content/docs/rfcs/52/README.md:27 Channel pattern is member of a new family of thread-safe sockets.
- content/docs/rfcs/5/README.md:40 ZDCF uses tree-structured semantics that can be implemented using arbitrary syntaxes such as ZPL (see "[ZFL Property Language](http://rfc.zeromq.org/spec:4)"), JSON (see "[Introducing JSON](http://json.org/)"), XML, or others. A ZDCF file contains an optional context object and zero or more device objects. Conceptually, one ZDCF file maps to one process, consisting of a single context and zero or more device threads.

https://github.com/mirage/xen
- tools/xenmon/xenbaked.h:53   uint64_t start_time;		// when the thread started running
- tools/debugger/gdbsx/README:41          o  since gdb is not kernel debugger, vcpus are emulated via threads
- tools/libxc/xc_private.c:26 #include <pthread.h>
- tools/libxl/libxl_fork.c:26  * also take and release in our pthread_atfork handlers.  So when this
- m4/pthread.m4:7     PTHREAD_CFLAGS="$ax_cv_pthread_flags"

https://github.com/omegamoon/Rockchip-GPL-Kernel
- fs/btrfs/async-thread.c:19 #include <linux/kthread.h>
- kernel/kthread.c:1 /* Kernel thread helper functions.
- net/rds/threads.c:40  * work queues that execute in a connection managing thread.
- Documentation/kref.txt:36    it can be passed to another thread of execution, you must
- fs/btrfs/Makefile:8 	   extent_io.o volumes.o async-thread.o ioctl.o locking.o orphan.o \

https://github.com/linuxmint/cinnamon-settings-daemon
- ChangeLog:650 	* cinnamon-settings-daemon/main.c: (main): initialize thread system since
- plugins/smartcard/csd-smartcard-manager.c:100         GThread      *thread;
- plugins/xsettings/csd-xsettings-manager.c:91  *     Messages sorted by: [ date ] [ thread ] [ subject ] [ author ]
- debian/changelog:686   * remove deprecated g_thread_init

https://github.com/peters/curl-for-windows
- openssl/openssl/doc/crypto/threads.pod:10 CRYPTO_destroy_dynlockid, CRYPTO_lock - OpenSSL thread support
- openssl/openssl/crypto/threads/th-lock.c:1 /* crypto/threads/th-lock.c */
- openssl/openssl/crypto/threads/netware.bat:2 rem batch file to build multi-thread test ( mttest.nlm )
- openssl/openssl/crypto/threads/mttest.c:1 /* crypto/threads/mttest.c */
- curl.gyp:55 		'curl/lib/asyn-thread.c',

https://github.com/CyanogenMod/android_device_motorola_qcom-common
- power/power.c:37 static pthread_mutex_t lock = PTHREAD_MUTEX_INITIALIZER;
- modules/aplogd/aplogd.c:93 #define DEFAULT_USR_CFG_FORMAT "threadtime"
- modules/aplogd/rambuf.c:49 #include <pthread.h>
- modules/camerawrapper/CameraWrapper.cpp:30 #include <utils/threads.h>

https://github.com/embedded2013/rtenv
- kernel.c:75 /* Stack struct of user thread, see "Exception entry and return" */

https://github.com/RashmiKumari/g_mmpbsa
- cmake/FindGROMACS.cmake:129         if (${LIB} MATCHES "thread")

https://github.com/lhc180/webrtc-based-android-aecm
- eclipse-project/jni/aecm/spl_init.c:120 #include <pthread.h>
- eclipse-project/jni/aecm/ring_buffer.h:11 // A ring buffer to hold arbitrary data. Provides no thread safety. Unless
- eclipse-project/src/com/billhoo/android/aec/demo/DemoActivity.java:29  * (billhoo): should write all the demo processes into separate thread instead
- README.md:10   2. The API is a low level one, most of them are just wrappers of native WebRTC aecm interface. We should handle so many things by ourselves, like estimate the echo tail，handle capture/render threads etc. I'm planning to provide a higher level of the API, which can handle those things for us automatically.
- eclipse-project/jni/aecm/ring_buffer.c:11 // A ring buffer to hold arbitrary data. Provides no thread safety. Unless

https://github.com/libretro/libretro-uae
- sources/src/pcem/thread.h:1 typedef void thread_t;
- sources/src/td-sdl/thread.c:4   * SDL thread support
- deps-wiiu/wiiu_pthread.h:4  * The following license statement only applies to this file (wiiu_pthread.h).
- deps-wiiu/wiiu/os/thread.h:12 typedef void (*OSThreadCleanupCallbackFn)(OSThread *thread, void *stack);
- retrodep/threaddep/thread.c:4   * Threading support, using pthreads

https://github.com/PrincetonVision/SUN3Dsfm
- lib/vlfeat/vl/generic.h:110 VL_EXPORT vl_size vl_get_max_threads (void) ;
- lib/vlfeat/Makefile.mak:101 #   /MD                : Multi-thread run-time library dynamically linked
- lib/vlfeat/vl/generic.c:79   - @ref threads
- lib/vlfeat/toolbox/misc/vl_threads.m:1 %VL_THREADS  Control VLFeat computational threads
- lib/vlfeat/vl/kdtree.c:377  ** When using a multi-threaded approach a user should at first instantiate

https://github.com/blackadder720/Pintos-Project-3
- src/threads/thread.c:1 #include "threads/thread.h"
- src/threads/thread.h:9 /* States in a thread's life cycle. */
- src/threads/switch.S:1 #include "threads/switch.h"
- src/threads/init.c:1 #include "threads/init.h"
- src/threads/synch.c:29 #include "threads/synch.h"

https://github.com/woodruffw/screenfetch-c
- Makefile:103 	rm -f threadtest

https://github.com/CyanogenMod/android_external_fuse
- lib/fuse_i.h:35 	pthread_mutex_t lock;
- lib/fuse_mt.c:16 #include <pthread.h>
- lib/fuse_versionscript:198 		fuse_start_cleanup_thread;
- example/fsel.c:22 #include <pthread.h>
- lib/fuse_loop_mt.c:23 /* Environment var controlling the thread stack size */

https://github.com/chrmhoffmann/android_device_wiko_stairway
- gsm0710muxd/src/gsm0710muxd.h:54 /* In this way, assemble_frame_thread can extract a complete MUX frame from the serial buffer then signal the thread_serial_device_read() to continue put data into serial buffer again */
- gsm0710muxd/src/gsm0710muxd_fc.c:54 #include <pthread.h>
- gsm0710muxd/src/gsm0710muxd.c:55 #include <pthread.h>
- gsm0710muxd/Makefile:27 LIBS:=-lpthread
- gsm0710muxd/Android.mk:39 LOCAL_LDLIBS := -lpthread

https://github.com/openxc/bitfield-c
- Makefile:5 LDLIBS = -lcheck -lm -lrt -lpthread -lsubunit

https://github.com/GBert/openwrt-misc
- wiringbp-pi/wiringPi/piThread.c:3  *	Provide a simplified interface to pthreads
- dtoverlay/src/utils.h:60 void free_string(const char *string); /* Not thread safe */
- wiringbp-pi/examples/wfi.c:40 //	This is interpreted internally as a pthread_mutex by wiringPi
- dtoverlay/src/utils.c:276 /* Not thread safe */
- wiringbp-pi/examples/Gertboard/7segments.c:66 //	read from by the thread that updates the display. Only the first

https://github.com/forhappy/zklua
- zklua.c:749         cdata->L = lua_newthread(L);
- Makefile:30 LDFLAGS += -lm -ldl -lpthread -L$(ZOOKEEPER_LIB_DIR) -lzookeeper_mt

https://github.com/grate-driver/linux
- net/rxrpc/io_thread.c:50 	rxrpc_wake_up_io_thread(local);
- include/linux/thread_info.h:2 /* thread_info.h: common low-level thread information accessors
- tools/perf/util/thread_map.c:18 #include "thread_map.h"
- tools/perf/util/thread_map.h:7 #include <perf/threadmap.h>
- arch/sh/include/asm/thread_info.h:27 struct thread_info {

https://github.com/meetecho/janus-gateway
- src/log.c:6  * I/O wait from threads that may be sensitive to such delays. Buffers are
- src/log.h:6  * I/O wait from threads that may be sensitive to such delays. Buffers are
- src/rtpfwd.c:27 static GThread *rtcpfwd_thread = NULL;
- src/janus-valgrind.supp:360 	g-system-thread-init
- src/events.c:43 static GThread *events_thread;

https://github.com/nodemcu/nodemcu-firmware
- app/include/mbedtls/threading.h:2  * \file threading.h
- app/mbedtls/library/threading.c:38 #include "mbedtls/threading.h"
- app/lua/lgc.h:63 ** bit 3 - for thread: Don't resize thread's stack
- app/lua/ltm.c:25   "string", "table", "function", "userdata", "thread",  // base type = 4, 5, 6, 7, 8
- app/lua/lua.h:42 /* thread status */

https://github.com/wireshark/wireshark
- epan/dissectors/packet-thread.c:1 /* packet-thread.c
- epan/except.c:48 #include <pthread.h>
- docbook/wsug_src/editcap-F.txt:18     logcat-thread - Android Logcat Thread text format
- ui/qt/interface_toolbar.h:31     QThread *reader_thread;
- epan/register.c:70     GThread *rapw_thread;

https://github.com/vk-com/kphp-kdb
- common/mysql.h:35   int thread_id;
- KPHP/kphp2cpp.cpp:41           "-j<thread_cnt>\tUse multiple threads\n"
- filesys/filesys-mount.c:49 pthread_t ff_server_thread;
- KPHP/compiler/bicycle.cpp:27 #include <pthread.h>
- filesys/filesys-mount.h:29 #include <pthread.h>

https://github.com/esnet/iperf
- config/ax_pthread.m4:2 #        https://www.gnu.org/software/autoconf-archive/ax_pthread.html
- src/iperf_error.c:50     if (pthread_mutex_lock(&(test->print_mutex)) != 0) {
- config/mkinstalldirs:72 # Solaris 8's mkdir -p isn't thread-safe.  If you mkdir -p a/b and
- src/iperf_api.h:471     IEPTHREADCREATE=150,	// Unable to create thread (check perror)
- docs/obtaining.rst:32   (`discussion thread

https://github.com/JoeDog/siege
- src/ssl.c:49 #include <pthread.h>
- configure.ac:52         AC_MSG_ERROR([pthread support requires cc_r (or other suitable compiler) on AIX])
- src/ssl.h:33 #include <pthread.h>
- utils/mkinstalldirs:69 # Solaris 8's mkdir -p isn't thread-safe.  If you mkdir -p a/b and
- src/crew.c:24 #include <pthread.h>

https://github.com/veracrypt/VeraCrypt
- src/Platform/Thread.h:20 #	include <pthread.h>
- src/Platform/Unix/Thread.cpp:13 #include <pthread.h>
- src/Common/lzma/Threads.c:1 /* Threads.c -- multithreading library
- src/Common/lzma/Threads.h:1 /* Threads.h -- multithreading library
- src/Common/EncryptionThreadPool.c:19 //Increasing the maximum number of threads 

https://github.com/Proxmark/proxmark3
- common/mbedtls/threading.h:2  * \file threading.h
- liblua/lua.h:44 /* thread status */
- client/proxgui.cpp:16 static WorkerThread *main_loop_thread = NULL;
- liblua/ltm.c:27   "string", "table", "function", udatatypename, "thread",
- client/proxguiqt.cpp:101 	// if thread finished delete self and delete application

https://github.com/yarrick/pingfs
- net.c:25 #include <pthread.h>
- chunk.c:21 #include <pthread.h>
- pingfs.c:241 	/* Run FUSE single threaded */

https://github.com/saki4510t/UVCCamera
- libuvccamera/src/main/jni/libusb/examples/dpfp_threaded.c:25 #include <pthread.h>
- libuvccamera/src/main/jni/libusb/libusb/os/threads_posix.c:36 #include "threads_posix.h"
- libuvccamera/src/main/jni/libusb/libusb/os/threads_windows.h:29 struct usbi_cond_perthread {
- libuvccamera/src/main/jni/libusb/ChangeLog:45   "interlacing" when using multiple threads.
- libuvccamera/src/main/jni/libusb/configure.ac:63 	threads="posix"

https://github.com/jhawthorn/fzy
- src/choices.c:4 #include <pthread.h>
- CHANGELOG.md:23   - Use threads to parallelize sorting
- Makefile:14 LIBS=-lpthread

https://github.com/riscv-collab/riscv-gnu-toolchain
- linux-headers/include/misc/ocxl.h:52 	__u16 thread_id; /* The thread ID required to wake this thread */
- linux-headers/include/asm/hwcap.h:15  * threading libraries must be able to examine the actual machine state in
- linux-headers/include/asm/unistd.h:32  * thread->hart mappings), so we've defined a RISC-V specific system call to
- linux-headers/include/linux/rseq.h:60  * A single struct rseq per thread is allowed.
- linux-headers/include/linux/futex.h:46  * thread exit time.

https://github.com/ireader/media-server
- libhls/demo/hls-server.cpp:13 #include "sys/thread.h"
- libhls/include/hls-fmp4.h:41 /// WARNING: hls_fmp4_input/hls_fmp4_init_segment not thread-safe
- libhls/demo/Makefile:44 LIBS = rt dl pthread aio
- libsip/test/sip-agent-test.cpp:13 #include "sys/thread.h"
- libsip/test/sip-uac-test2.cpp:6 #include "sys/thread.h"

https://github.com/weechat/weechat
- src/core/hook/wee-hook-url.h:40     pthread_t thread_id;               /* thread id                         */
- src/core/hook/wee-hook-url.c:33 #include <pthread.h>
- doc/en/weechat_faq.en.adoc:1200 [[gdb_error_threads]]
- po/weechat.pot:70 msgid "%sError running thread in hook_url: %s (URL: \"%s\")"
- doc/fr/weechat_scripting.fr.adoc:41 WeeChat tourne dans un seul thread, et ceci est valable pour les scripts

https://github.com/irssi/irssi
- src/core/net-nonblock.c:49 		g_warning("net_connect_thread(): fork() failed! "
- NEWS:3110           better than threads which aren't used anywhere anymore..
- src/otr/key.c:80  * Key generation data for the thread in charge of creating the key.
- meson.build:204     dependency('threads'),

https://github.com/symisc/unqlite
- src/jx9.h:119 #define JX9_ABORT   UNQLITE_ABORT   /* Foreign Function request operation abort/Another thread have released this instance */
- unqlite.h:117  *  safely in a multithreaded environment. The default is not. All mutexing code is omitted
- src/jx9_api.c:24 /* If another thread have released a working instance, the following macros
- src/os_unix.c:130 ** shared by multiple threads.
- src/api.c:23 /* If another thread have released a working instance, the following macros

https://github.com/xiph/opus
- include/opus.h:386   * A single codec state may only be accessed from a single thread at
- CMakeLists.txt:112 set(OPUS_NONTHREADSAFE_PSEUDOSTACK_HELP_STR "use a non threadsafe pseudostack when neither variable length arrays or alloca is supported.")
- Makefile.unix:9 # If none is defined, then the fallback is a non-threadsafe global array
- Makefile.mips:9 # If none is defined, then the fallback is a non-threadsafe global array
- tests/test_opus_api.c:1754  * handling in our codebase, and the lack of thread safety isn't an

https://github.com/MaJerle/stm32f429
- TUTORIAL-02-SCB_ICSR/User/main.c:31 		/* Normal call, no interrupt, thread mode */
- 00-STM32F429_LIBRARIES/lwip/src/api/tcpip.c:3  * Sequential API Main thread module
- 00-STM32F429_LIBRARIES/lwip/src/api/netifapi.c:42  * Call netif_add() inside the tcpip_thread context.
- 00-STM32F429_LIBRARIES/lwip/src/netif/slipif.c:41  *        1) For NO_SYS==0, an RX thread can be used which blocks on sio_read()
- 00-STM32F429_LIBRARIES/lwip/src/netif/ppp/ppp.h:183  * If PPP_INPROC_OWNTHREAD==1, a seperate input thread using the blocking

https://github.com/mtcp-stack/mtcp
- apps/apache_benchmark/srclib/apr/locks/os2/thread_cond.c:21 #include "apr_arch_thread_mutex.h"
- apps/apache_benchmark/srclib/apr/threadproc/os2/thread.c:19 #include "apr_arch_threadproc.h"
- apps/apache_benchmark/srclib/apr/locks/os2/thread_mutex.c:21 #include "apr_arch_thread_mutex.h"
- apps/apache_benchmark/srclib/apr/include/apr_thread_cond.h:21  * @file apr_thread_cond.h
- apps/apache_benchmark/srclib/apr/locks/os2/thread_rwlock.c:21 #include "apr_arch_thread_rwlock.h"

https://github.com/kaltura/nginx-vod-module
- ngx_file_reader.h:49 	ngx_thread_pool_t *thread_pool,
- ngx_http_vod_conf.h:106 	ngx_thread_pool_t *open_file_thread_pool;
- README.md:115 2. `--with-threads` (nginx 1.7.11+) - enable asynchronous file open using thread pool (also requires `vod_open_file_thread_pool` in nginx.conf), relevant only to local and mapped modes
- ngx_async_open_file_cache.h:11 #include <ngx_thread_pool.h>
- ngx_http_vod_conf.c:119 	conf->open_file_thread_pool = NGX_CONF_UNSET_PTR;

https://github.com/open-mpi/ompi
- ompi/mpi/c/init_thread.c:39 #pragma weak MPI_Init_thread = PMPI_Init_thread
- ompi/mpi/c/query_thread.c:30 #pragma weak MPI_Query_thread = PMPI_Query_thread
- docs/man-openmpi/man3/MPI_Init_thread.3.rst:1 .. _mpi_init_thread:
- opal/mca/threads/thread.h:33  * Structure for threads components.
- docs/man-openmpi/man3/MPI_T_init_thread.3.rst:1 .. _mpi_t_init_thread:

https://github.com/bitcoin-core/secp256k1
- include/secp256k1.h:41  *  A constructed context can safely be used from multiple threads

https://github.com/webmproject/libwebp
- src/utils/thread_utils.c:10 // Multi-threaded worker
- src/utils/thread_utils.h:10 // Multi-threaded worker
- m4/ax_pthread.m4:2 #        http://www.gnu.org/software/autoconf-archive/ax_pthread.html
- cmake/deps.cmake:44       set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -pthread")
- cmake/config.h.in:103 /* Undefine this to disable thread support. */

https://github.com/pure-data/pure-data
- src/notes.txt:83 open_via_path call in d_soundfile.c isn't threadsafe
- src/d_soundfile.h:95         this may be called in a background thread */
- src/z_ringbuffer.c:85   int write_idx = buffer->write_idx;  // no need for sync in writer thread
- src/z_ringbuffer.h:14 /// simple lock-free ring buffer implementation for one writer thread
- tcl/pd_i18n.tcl:38         # http://thread.gmane.org/gmane.comp.lang.tcl.mac/5215

https://github.com/eclipse/mraa
- docs/i2c.txt:2 any calls on i2c, in case another application or even thread changed the addres
- src/iio/iio.c:300     // Wait for it forever or until pthread_cancel
- src/java/mraajava.i:87             lang_func->java_attach_thread  = &mraa_java_attach_thread;
- api/mraa/firmata.h:72  * Set a callback on 'feature'. This function is not thread safe and threads
- src/java/mraajni.c:8 #include <pthread.h>

https://github.com/pmem/pmdk
- src/core/os_thread.h:36  * os_thread.h -- os thread abstraction layer
- src/core/os_thread_posix.c:5  * os_thread_posix.c -- Posix thread abstraction layer
- src/include/libpmemobj/thread.h:5  * libpmemobj/thread.h -- definitions of libpmemobj thread/locking entry points
- doc/libpmem/libpmem.7.md:89 **libpmem** relies on the library destructor being called from the main thread.
- utils/check-os.sh:10 EXCLUDE="os_posix|os_thread_posix"

https://github.com/stefansundin/altdrag
- include/update.c:172   HANDLE thread = CreateThread(NULL, 0, _CheckForUpdate, verbose, 0, NULL);
- hooks.c:2084 // CallWndProc is called in the context of the thread that calls SendMessage, not the thread that receives the message.

https://github.com/trailofbits/ctf
- intro/careers.md:127 * [Reddit](http://www.reddit.com/r/netsec/comments/cc4ye/information_security_careers_cheatsheet) and [Hacker News](https://news.ycombinator.com/item?id=1409735) threads about this post
- docs/intro/careers.html:564 <li><a href="http://www.reddit.com/r/netsec/comments/cc4ye/information_security_careers_cheatsheet" target="_blank">Reddit</a> and <a href="https://news.ycombinator.com/item?id=1409735" target="_blank">Hacker News</a> threads about this post</li>

https://github.com/c9s/Pux
- CHANGES.md:58 - fix various bugs for zts (zend thread safe mode enabled)
- ext/hash.c:88         /* insert 'newp' into the table-thread linked list */

https://github.com/GrahamDumpleton/mod_wsgi
- src/server/wsgi_thread.c:21 #include "wsgi_thread.h"
- src/server/wsgi_thread.h:30     int thread_id;
- docs/user-guides/processes-and-threading.rst:9 being handled in distinct threads executing within those processes.
- docs/release-notes/version-1.3.rst:19 hang, the Python GIL hadn't been released, and so all other threads were
- docs/release-notes/version-3.2.rst:17 2. Fix problem with use of condition variables/thread mutexes that was

https://github.com/lathiat/avahi
- avahi-common/thread-watch.c:31 #include <pthread.h>
- avahi-common/thread-watch.h:1 #ifndef foothreadedwatchhfoo
- docs/THREADS:4 AvahiClient/AvahiPoll instance may be used in a multithreaded application as
- common/acx_pthread.m4:3 dnl @summary figure out how to build C programs using POSIX threads
- avahi-sharp/Client.cs:126         private Thread thread;

https://github.com/LibVNC/libvncserver
- include/rfb/threading.h:2  *  LibVNCServer/LibVNCClient common platform threading defines and includes.
- NEWS.md:26 refined multi-threaded implementation, support for Unicode clipboard data 📋❗ and an
- cmake/Modules/FindSDL2.cmake:42 # Added a search for threads which is needed by some platforms.
- examples/server/camera.c:19  * Answer: Originally, I thought about using separate threads and using a
- CMakeLists.txt:55 option(WITH_THREADS "Search for a threading library to build with multithreading support" ON)

https://github.com/ncbi/sra-tools
- tools/loaders/sharq/spdlog/details/thread_pool.h:12 #include <thread>
- tools/loaders/sharq/spdlog/details/thread_pool-inl.h:7 #    include <spdlog/details/thread_pool.h>
- tools/loaders/bam-loader/spdlog/details/thread_pool-inl.h:7 #    include <spdlog/details/thread_pool.h>
- libs/inc/bm/bmthreadpool.h:23 #include <thread>
- CHANGES.md:209   **sratools**: disable-multithreading option removed from help text for tools that do not support it  

https://github.com/andybarry/flight
- drivers/radio_ch4/src/main.c:9 #include <pthread.h>
- sensors/stereo/pushbroom-stereo.hpp:115         // this must be static so the threading won't have to
- drivers/process_control/process-control.cpp:140 // thread that sends a status message every n seconds
- drivers/radio_ch4/src/radio_comm.c:3 #include <pthread.h>
- sensors/stereo/pushbroom-stereo.cpp:9 #include <pthread.h>

https://github.com/larmel/lacc
- test/sqlite.sh:41 		-lm -lpthread -ldl \

https://github.com/FreeApophis/TrueCrypt
- Platform/Thread.h:16 #	include <pthread.h>
- Platform/Unix/Thread.cpp:9 #include <pthread.h>
- Common/EncryptionThreadPool.c:123 static TC_THREAD_PROC EncryptionThreadProc (void *threadArg)
- Driver/Ntdriver.h:18 /* This structure is used to start new threads */
- Main/Unix/Main.cpp:64 		// Start encryption thread pool

https://github.com/bither/bither-android-lib
- libjpeg-turbo-android/libjpeg-turbo/jni/libjpeg.txt:1574 eliminate response-time problems in single-threaded applications.  If you
- libjpeg-turbo-android/libjpeg-turbo/jni/java/README:27 performance, particularly in a multi-threaded environment (Java pauses all
- libjpeg-turbo-android/libjpeg-turbo/jni/simd/jsimd_i386.c:37  * FIXME: This code is racy under a multi-threaded environment.
- libjpeg-turbo-android/libjpeg-turbo/jni/debian/patches/FixLibraryStartup.patch:271 - * FIXME: This code is racy under a multi-threaded environment.

https://github.com/kiibohd/controller
- Macro/PartialMap/macro.c:220 // Capability used to test a thread-safe result
- Macro/PartialMap/result.c:422 // Capabilities that are not called immediately (i.e. ones that are not deemed as thread safe)
- Lib/kinetis.h:4179 // https://forum.pjrc.com/threads/24633-Any-Chance-of-a-Teensy-3-1?p=78655&viewfull=1#post78655
- Scan/Devices/JoystickCJP13119D02/joystick_scan.c:306 	// Make sure to tag the entry as not done to make sure threaded processing doesn't try to queue
- Lib/CMake/host.cmake:117 	# XXX (HaaTa): asan has been useful, tsan isn't useful (no pthreads), usan hasn't shown anything

https://github.com/c9s/r3
- php/r3/hash.c:88         /* insert 'newp' into the table-thread linked list */
- src/list.c:18     pthread_mutex_init(&(l->mutex), NULL);
- include/r3_list.h:11 #include <pthread.h>
- .github/workflows/ci.yml:53         sanitizer: [thread, undefined, leak, address]

https://github.com/BotoX/ServerStatus
- server/src/main.cpp:268 		thread_sleep(1000);
- server/include/system.h:346 	Function: thread_sleep
- server/src/system.c:25 	#include <pthread.h>
- server/Makefile:13 LIBS = -pthread -lm

https://github.com/robertdavidgraham/heartleech
- heartleech.8.markdown:6 heartleech <host> [--p <port>] [--dump <filename>] [--autopwn] [--threads <n>]
- heartleech.8:10 heartleech \fIhost\fR [\-\-p \fIport\fR] [\-\-dump \fIfilename\fR] [\-\-autopwn] [\-\-threads \fIn\fR]
- heartleech.c:60 typedef CRITICAL_SECTION pthread_mutex_t;
- README.md:9     processing using many threads
- Makefile:4 	gcc -I../openssl/include -L../openssl -lcrypto -lssl -lcrypto -ldl -lpthread -o heartleech heartleech.c

https://github.com/riolet/WAFer
- src/wafer.h:30 #include <pthread.h>
- src/wafer.c:442         farmer_thread(td);
- README.md:12 1. Single-threaded (Default) or multi-threaded (make with `THREADS=n` where n>0)
- Makefile:7 	PTHREAD=-D WAFER_THREADS=$(THREADS) -pthread

https://github.com/crash-utility/crash
- crash_target.c:61   bool thread_alive (ptid_t ptid) override { return true; }
- unwind_x86_64.h:79 	#define STACK_BOTTOM(tsk)    (((tsk)->thread.rsp0 - 1) & ~(THREAD_SIZE - 1))
- mips.c:298         if (is_kernel_thread(tc->task) && IS_KVADDR(vaddr)) {
- s390.c:551 		char thread_info[8192];
- unwind.h:159  * Prepare to unwind the currently running thread.

https://github.com/NicoHood/HoodLoader2
- avr/bootloaders/lufa-LUFA-140928/LUFA/Drivers/Misc/RingBuffer.h:38  *  a multi-threaded ISR based system) however the same kind of operation (two or more insertions
- avr/bootloaders/lufa-LUFA-140928/LUFA/Common/Common.h:224 				 *  prologue and epilogue code to properly manage the interrupt routine without affecting the main thread's

https://github.com/postgrespro/jsquery
- travis/pg-travis-test.sh:177 	gdb --batch --quiet -ex "thread apply all bt full" -ex "quit" $binary $corefile

https://github.com/rmagick/rmagick
- CHANGELOG.md:29 - Improve multi-thread performance by releasing GVL (#1352)
- ext/RMagick/rmagick_gvl.h:4 #include "ruby/thread.h"
- ext/RMagick/rmutil.c:18 #include <pthread.h>

https://github.com/tempesta-tech/tempesta
- ktest/linux/threads.h:28 static size_t __thread __thr_id;
- db/t/tdb_htrie.c:26 #include <pthread.h>
- ktest/linux/slab.h:31 #include "threads.h"
- CodingStyle:579 Data structures that have visibility outside the single-threaded
- fw/cache.c:26 #include <linux/kthread.h>

https://github.com/rssnsj/openwrt-hc5x61
- config-hiwifi-hc5761:1165 CONFIG_PACKAGE_libpthread=y
- config-hiwifi-hc5861:1165 CONFIG_PACKAGE_libpthread=y

https://github.com/cosmos72/twin
- clients/threadtest.c:2  *  threadtest.c  --  test libtw thread-safety
- conf/conf.base:18 CONF_SOCKET_PTHREADS_HELP=" -> Sockets: thread-safe libs (requires libpthread)"
- include/mutex.h:18 #include <pthread.h>
- admin/tw_input_config.m4:28 dnl thread safe libtw
- scripts/obsolete/Configure.sh:42   --enable-socket-pthreads[=yes|no]      enable thread safe libtw (requires pthread)

https://github.com/selsta/hlsdl
- src/hls.c:6 #include <pthread.h>
- makefile:32 	LDFLAGS+=-lpthread $(shell pkg-config libcurl --static --libs)
- src/curl.c:7 #include <pthread.h>
- README.md:94 - Multithreading
- msvc/BUID_WINDOWS.txt:28 # Download pthreads, also put the extracted folder to your working directory

https://github.com/osmocom/rtl-sdr
- src/rtl_tcp.c:42 #include <pthread.h>
- src/rtl_adsb.c:40 #include <pthread.h>
- src/rtl_fm.c:72 #include <pthread.h>
- configure.ac:30 AC_CHECK_HEADERS(pthread.h,, [AC_MSG_ERROR([pthread.h required])])
- src/rtl_power.c:30  *	threading

https://github.com/intel/libva
- va/va_compat.h:67  * <http://groups.google.com/group/comp.std.c/browse_thread/thread/77ee8c8f92e4a3fb/346fc464319b1ee5>
- va/va.h:136  * \section threading Multithreading Guide
- va/wayland/va_wayland_drm.c:261      * thread safety issues with applications that e.g. run an event pump
- va/va_trace.c:57 #include <pthread.h>
- NEWS:129 * trace: Add missing pthread_mutex_destroy

https://github.com/jedisct1/swift-sodium
- Sodium/libsodium/crypto_sign.h:5  * THREAD SAFETY: crypto_sign_keypair() is thread-safe,
- Sodium/libsodium/crypto_box.h:5  * THREAD SAFETY: crypto_box_keypair() is thread-safe,
- Clibsodium.xcframework/tvos-arm64/Headers/sodium/crypto_sign.h:5  * THREAD SAFETY: crypto_sign_keypair() is thread-safe,
- Clibsodium.xcframework/xros-arm64/Headers/sodium/crypto_sign.h:5  * THREAD SAFETY: crypto_sign_keypair() is thread-safe,
- Clibsodium.xcframework/macos-arm64_x86_64/Headers/sodium/crypto_sign.h:5  * THREAD SAFETY: crypto_sign_keypair() is thread-safe,

https://github.com/openresty/lua-upstream-nginx-module
- src/ngx_http_lua_upstream_module.c:60     NULL,                        /* init thread */

https://github.com/tomaka/hlua
- lua52-sys/lua/src/lua.h:44 /* thread status */
- lua52-sys/lua/src/ltm.c:27   "string", "table", "function", udatatypename, "thread",
- lua52-sys/lua/src/ldo.c:104   if (L->errorJmp) {  /* thread has an error handler? */
- lua52-sys/lua/src/lstate.h:28 ** are collected together with their respective threads. Lua keeps a
- lua52-sys/lua/src/lstate.c:57 ** thread state + extra space

https://github.com/dosemu2/dosemu2
- src/include/sig.h:42 extern void add_thread_callback(void (*cb)(void *), void *arg, const char *name);
- src/doc/README/priv:62 What we have been suffering from lately is that threads were added to
- configure.ac:310 -Wnested-externs -fms-extensions -pthread \
- src/base/core/emu.c:56 #include <pthread.h>
- src/plugin/vde/vde.c:30 #include <pthread.h>

https://github.com/yandex/tomita-parser
- src/util/system/thread.h:4 /// If you need threads, use thread pool functionality in <util/thread/pool.h>
- src/util/thread/queue.h:43  * A queue processed simultaneously by several threads
- src/util/thread/pool.cpp:3 #include <util/system/thread.h>
- src/util/thread/tasks.cpp:93                 if ((/*last task - in current thread*/i == cnt - 1) || !Queue_->Add(Procs_[i].Get())) {
- src/util/thread/lfstack.h:35             // node current is in free list, we are the last thread so try to cleanup

https://github.com/OpenEtherCATsociety/SOES
- soes/esc_eoe.c:1063  * NOTE: Not thread safe, should be called from the SOES task sequential
- applications/rtl_lwip_eoe/main.c:50    /* Let lwIP TCP/IP thread initialise and add the interface. The interface

https://github.com/zaps166/NFSIISE
- src/Kernel32.h:33 	#include <SDL2/SDL_thread.h>
- src/Wrapper.c:87 		extern void *main_game_thread;
- src/Kernel32.c:51 REALIGN STDCALL void *CreateThread_wrap(void *threadAttributes, uint32_t stackSize, LPTHREAD_START_ROUTINE startAddress, void *parameter, uint32_t creationFlags, uint32_t *threadId)
- src/Android/jni/SDL/Android.mk:44 	$(wildcard $(LOCAL_PATH)/src/thread/*.c) \
- src/EAcsnd.c:33 	extern void *audio_game_thread;

https://github.com/symisc/PH7
- ph7.h:122  *   safely in a multithreaded environment. The default is not. That is,all mutexing code
- README.md:19  * Written in ANSI C, thread-safe, full-reentrant; compile and run unmodified in any platform including restricted embedded devices with a C compiler.

https://github.com/xiph/Icecast-Server
- src/curl.h:15  * Those two functions are fully thread unsafe
- configure.ac:53     [AS_HELP_STRING([--with-sanitizer=(address/memory/undefined/thread)],
- src/Makefile.am:3 SUBDIRS = common/avl common/net common/thread common/httpp common/log common/timing
- src/prng.c:31 #include "common/thread/thread.h"
- src/global.c:21 #include "common/thread/thread.h"

https://github.com/analogdevicesinc/libiio
- iiod/thread-pool.h:14 struct thread_pool;
- iiod/thread-pool.c:9 #include "thread-pool.h"
- iiod/CMakeLists.txt:18 check_symbol_exists(pthread_setname_np "pthread.h" HAS_PTHREAD_SETNAME_NP)
- iiod/ops.h:50 struct thread_pool;
- iiod/iiod.c:13 #include "thread-pool.h"

https://github.com/vmprof/vmprof-python
- README-develop.md:23 On windows we use an external thread, so it's an imperative we freeze
- src/vmprof.h:72 #include <pythread.h>
- vmprof/reader.py:275                 thread_id = 0
- src/_vmprof.c:392 insert_real_time_thread(PyObject *module, PyObject * args) {
- vmprof/__init__.py:107 def insert_real_time_thread(thread_id=0):

https://github.com/happyfish100/fastdfs-nginx-module
- src/ngx_http_fastdfs_module.c:82     NULL,                                  /* init thread */

https://github.com/ps2homebrew/wLaunchELF
- hdl_info/main.c:32     iop_thread_t param;
- ps2host/net_fsys.c:75     struct _iop_thread mythread;
- docs/changes.txt:94 -Fixed a compiler warning, do to a change with the newer ps2sdk, by changing the data type from "ee_thread_t" to "ee_thread_status_t" for the ReferThreadStatus prototype.
- oldlibs/ps2ftpd/src/main.c:82     iop_thread_t mythread;
- ps2host/ps2host.c:26 //   start threads & init rpc & filesys

https://github.com/moonlight-stream/moonlight-common-c
- src/PlatformThreads.h:28     OSThread thread;
- src/Platform.c:8 struct thread_context {
- src/Platform.h:25 #include <psp2/kernel/threadmgr.h>
- src/Connection.c:150 // separate thread. This is neccessary because other internal threads directly
- src/VideoStream.c:80 // Receive thread proc

https://github.com/pimoroni/unicorn-hat
- projects/unicornpaint/paint.py:5 import threading
- library/legacy/ws2812/ws2812-RPi_wrap.c:1025 #  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
- examples/hat/clock.py:4 import threading
- library/legacy/rpi-ws281x/rpi_ws281x_wrap.c:1024 #  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
- library/test/UnicornHat_Emulator.py:6 import threading

https://github.com/ReclaimYourPrivacy/eschalot
- README:60 'wordlist.txt', and will launch eschalot running with 4 threads to start
- CHANGELOG:56 * Allowed the number of threads to be specified during startup.
- eschalot.c:58 #include <pthread.h>
- Makefile:13 LIBS		+= -lpthread -lssl -lcrypto

https://github.com/huawenyu/Design-Patterns-in-C
- auto-gen/tools/odict.py:189     .. _proposal: http://thread.gmane.org/gmane.comp.python.devel/95316

https://github.com/memkind/memkind
- jemalloc/src/thread_event.c:4 #include "jemalloc/internal/thread_event.h"
- jemalloc/src/background_thread.c:14 bool opt_background_thread = BACKGROUND_THREAD_DEFAULT;
- jemalloc/include/jemalloc/internal/thread_event.h:6 /* "te" is short for "thread_event" */
- jemalloc/include/jemalloc/internal/tsd_malloc_thread_cleanup.h:6 #define JEMALLOC_TSD_TYPE_ATTR(type) __thread type JEMALLOC_TLS_MODEL
- jemalloc/include/jemalloc/internal/background_thread_inlines.h:5 background_thread_enabled(void) {

https://github.com/bollu/bollu.github.io
- perspective-on-tensors.md:2 I think it's very common for mathematicians to be extremely superficial about this, and you can even see some of that in (most of the responses in) this thread. For instance, insisting on a multilinear understanding, as many do, will inevitably make you consider spinors and spinor fields as overly formal and strange. Insisting on understanding them by their universal property, as some mathematicians will say is "the most truly mathematical way to understand them," is similar but slightly worse. It is similar to the common claim that linear transformations are more natural or "mathematical" than matrices, and that one should try to avoid bases if possible -- maybe we can all agree that the choice of a basis is often "unnatural", but the collection of all bases is a beautiful object ("homogeneous space") which is extremely natural. For me, this object is key to mathematically understanding tensors, as follows. The prerequisite is comfort with the notions of "vector space", "basis", and "group action"
- todo.md:370 Source https://www.physicsforums.com/threads/why-a-pde-is-an-infinite-dimensional-system.479880/
- builder/duktape/duktape.h:225 struct duk_thread_state;
- content/blog/demand-analysis-ghc-polyhedral/code/isl-0.20/README:1 isl is a thread-safe C library for manipulating sets and relations
- prism/highlight.js:2417         'noexcept static_assert thread_local restrict final override ' +

https://github.com/coreboot/seabios
- src/post.c:145     thread_setup();
- src/stacks.h:37 extern struct thread_info MainThread;
- docs/Execution_and_code_flow.md:114 system. The system works by giving each "thread" its own stack, and
- src/stacks.c:470 // Thread info - stored at bottom of each thread stack - don't change
- src/hw/virtio-mmio.c:4 #include "stacks.h" // run_thread

https://github.com/wolfSSL/wolfssh
- m4/ax_pthread.m4:2 #        https://www.gnu.org/software/autoconf-archive/ax_pthread.html
- examples/server/server.c:61 } thread_ctx_t;
- apps/wolfssh/wolfssh.c:202 typedef struct thread_args {
- examples/client/client.c:172 typedef struct thread_args {
- ide/Renesas/cs+/demo_server/wolfssh_demo.c:65 } thread_ctx_t;

https://github.com/conix-security/zer0m0n
- README.md:49 + fixed performance issues (drop => patched using multithreading in logs_dispatcher)
- src/app/misc.c:63 DWORD pid_from_thread_handle(HANDLE thread_handle)
- src/app/main.c:42 //	Description : initializes the filter communication port and creates few threads
- src/app/misc.h:154 DWORD pid_from_thread_handle(HANDLE thread_handle);
- src/app/logtbl.c:5     "__thread__",

https://github.com/gjedeer/tuntox
- BUILD.md:12 c-toxcore is the only direct dependency. c-toxcore requires libsodium and libevent_pthreads at the time of writing this, please refer to their install instructions for the current dependencies. Also pkg-config is required.
- Makefile:6 LDFLAGS=-g -pthread -lm -static
- .travis.yml:21   - sudo apt-get install check cmake cscope python3-requests python3-jinja2 cscope libevent-dev libevent-pthreads-2.1

https://github.com/w-shackleton/android-netspoof
- androidnetspoof/src/main/jni/arpspoof/hashmap.h:126  * Locks the hash map so only the current thread can access it.
- androidnetspoof/src/main/java/uk/digitalsquid/netspoofer/proxy/NSProxy.java:88             final ThreadPoolExecutor threadPool = new ThreadPoolExecutor(
- androidnetspoof/src/main/jni/libpcap/pcap.3:625 Note also that, in a multi-threaded application, if one thread is
- androidnetspoof/src/main/jni/libnet/lua/tostring.lua:128   elseif Type == "function" or Type == "userdata" or Type == "thread" then
- androidnetspoof/src/main/java/uk/digitalsquid/netspoofer/NetSpoofService.java:88      * Used to do things on the UI thread (ie toasts)

https://github.com/yusong-shen/mooc_os_lab
- labcodes/lab7/libs/unistd.h:28 #define CLONE_THREAD        0x00000200  // thread group
- labcodes/lab7/kern/process/entry.S:2 .globl kernel_thread_entry
- labcodes/lab8/kern/sync/monitor.c:25 // Unlock one of threads waiting on the condition variable. 
- labcodes/lab4/kern/process/proc.c:15 /* ------------- process/thread mechanism design&implementation -------------
- labcodes/lab7/kern/sync/monitor.h:84 // Unlock one of threads waiting on the condition variable. 

https://github.com/sergev/4.4BSD-Lite2
- usr/src/contrib/news/trn3/rthread.h:1 /* $Id: rthread.h,v 3.0 1992/12/14 00:14:15 davison Trn $
- usr/src/contrib/news/trn3/rthread.c:1 /* $Id: rthread.c,v 3.0 1992/12/14 00:14:13 davison Trn $
- usr/src/contrib/news/trn3/INSTALL:4     needs.  There's currently two supported by trn:  mthreads and
- usr/src/contrib/news/trn3/NEW:12 	currently supports news overview (.overview files), mthreads
- usr/src/sys/vm/vm_glue.c:409 swapout_threads()

https://github.com/parallella/pal
- src/base/p_malloc.c:35     case P_DEV_SMP: // heap (thread model)
- examples/image/stb_image.h:68         the allocator, you'll have to store it in a global or a thread-local
- src/wrappers/erlang/erlpiphany/examples/dotproduct/src/dotproduct.erl:21 %%% forum thread "Re: DMA crash?"
- src/wrappers/erlang/erlpiphany/examples/dotproduct/build.sh:30 ${CROSS_PREFIX}gcc src/main.c -o bin/main.elf -I ${EINCS} -L ${ELIBS} -le-hal -le-loader -lpthread
- src/base/pal_base_private.h:231 int pthread_yield(void);

https://github.com/opnsense/src
- sys/ddb/db_thread.c:44 db_print_thread(void)
- lib/librt/sigev_thread.h:36 struct sigev_thread;
- lib/librt/sigev_thread.c:42 #include <pthread.h>
- lib/libc/gen/_thread_init.c:34 void _thread_init_stub(void);
- lib/libthread_db/thread_db.h:34 #include <pthread.h>

https://github.com/groupgets/LeptonModule
- software/raspberrypi_qt/README.md:19 The program runs a thread to pull data from the Lepton and signals when a fullimage is ready; the main window updates the image and stores both the RGB and raw (16-bit thermal) image, which can be saved to disk by clicking the Snapshot button at any time.  The files created are numbered sequentially per run:
- software/ThermalView/src/winmain.c:667 			MyThreadFunction,       // thread function name
- software/raspberrypi_video/main.cpp:127 	//create a thread to gather SPI data
- software/raspberrypi_qt/mainwindow.h:19     LeptonThread *thread;
- software/raspberrypi_video/MyLabel.h:10 //this is because we can't pass a QPixmap from our thread

https://github.com/greiman/FreeRTOS-Arduino
- libraries/FreeRTOS_AVR/examples/frBlink/frBlink.ino:2  * Example to demonstrate thread definition, semaphores, and thread sleep.
- libraries/FreeRTOS_ARM/examples/frJitter/frJitter.ino:51   // create high priority thread
- libraries/FreeRTOS_ARM/examples/frBlinkPrint/frBlinkPrint.ino:1 // Simple demo of three threads
- libraries/FreeRTOS_AVR/org_files/heap_3.c:54     compatible FAT file system, and our tiny thread aware UDP/IP stack.
- libraries/FreeRTOS_ARM/org_files/list.c:54     compatible FAT file system, and our tiny thread aware UDP/IP stack.

https://github.com/CyberGrandChallenge/samples
- cqe-challenges/KPRCA_00029/src/bbs.c:32 typedef struct thread {
- cqe-challenges/KPRCA_00026/README.md:9 interface with minimal yet useful features: create, modify, view, and delete. It supports auto-correction of misspelled words, where the user can specify custom corrections. In order to make the program more efficient, the latest version of the software uses threads!
- cqe-challenges/NRFIN_00006/cb_6/lib/libc.c:226 // Send a packet to a chosen thread ID.
- cqe-challenges/NRFIN_00006/poller/for-release/machine.py:91         # 2) PROC_THREAD_STATE: the kernel's record of thread state
- examples/NRFIN_00056/support/verbs.txt:4926 misthread

https://github.com/ZoloZiak/WinNT4
- private/ntos/dd/ntft/thread.c:7     thread.c
- private/ntos/ke/ppc/threadbg.s:8 //    threadbg.s
- private/ntos/afd/registry.txt:54 the priority boost AFD gives to a thread when it completes I/O for
- private/ntos/lpc/ulpc.h:323     fprintf( stderr, "Entering %s thread, Context = 0x%lx\n",
- private/ntos/dd/ntft/sources:41         thread.c  \

https://github.com/radiomanV/TL866
- wine/setupapi.c:14 #include <pthread.h>
- TL866_Updater/QT/mainwindow.cpp:467 //Reflash function. This routine is executed in a separate thread.
- InfoIcDump/TL866/Properties/Resources.Designer.cs:50         ///   Overrides the current thread's CurrentUICulture property for all
- InfoIcDump/TL866II/Properties/Resources.Designer.cs:50         ///   Overrides the current thread's CurrentUICulture property for all
- TL866_Updater/C#/Properties/Resources.Designer.cs:50         ///   Overrides the current thread's CurrentUICulture property for all

https://github.com/rpodgorny/unionfs-fuse
- NEWS:90 - Fix a critical bug introduced in 0.19 when we disabled threadding.
- src/usyslog.c:12  *   So this file introduces a syslog thread and a syslog buffer. usyslog()
- src/unionfs.c:47 	// Initing syslog here is a problem because the log thread ends up exiting in non foreground mode (see https://github.com/rpodgorny/unionfs-fuse/issues/122)
- src/general.c:24 #include <pthread.h>
- src/string.c:136  * dirname() in libc might not be thread-save, at least the man page states

https://github.com/dlfcn-win32/dlfcn-win32
- src/dlfcn.c:100  * MSDN says these functions are not thread-safe. We make no efforts to have
- src/dlfcn.h:69    const char *dli_fname;  /* Filename of defining object (thread unsafe and reused on every call to dladdr) */

https://github.com/lwfinger/rtl8723bu
- hal/hal_intf.c:410 /*	Start specifical interface thread		*/
- include/hal_intf.h:265 	void	(*run_thread)(_adapter *padapter);
- include/drv_types.h:690 	_thread_hdl_ lbkthread;
- include/osdep_service_linux.h:56 	#include <linux/kthread.h>
- include/rtw_cmd.h:58 		_sema	terminate_cmdthread_sema;

https://github.com/immobiliare/sfs
- fuse/batch.c:58 		pthread_mutex_lock (&(state->batch_mutex));
- fuse/set.cpp:24 #include <pthread.h>
- fuse/Makefile:2 LDFLAGS=-pthread
- fuse/util.c:106 	pthread_mutex_lock (&(state->access_mutex));
- fuse/sfs.h:29 #include <pthread.h>

https://github.com/evil-mad/EggBot
- other/python-eagle/EggbotPlotEAGLE.py:5 import thread
- EBB_firmware/Microchip/USB/CDC Device Driver/usb_function_cdc.c:98          multithreaded usage scenarios.

https://github.com/KitSprout/SmartIMU
- firmware/NRF_Peripheral_RNG/Libraries/documentation/release_notes.txt:297  - Descriptors are now generated on the fly using simple stackless thread code.
- firmware/NRF_Peripheral_RTC/Libraries/documentation/release_notes.txt:297  - Descriptors are now generated on the fly using simple stackless thread code.
- firmware/NRF_Peripheral_PPI/Libraries/documentation/release_notes.txt:297  - Descriptors are now generated on the fly using simple stackless thread code.
- firmware/NRF_Peripheral_GPIO/Libraries/documentation/release_notes.txt:297  - Descriptors are now generated on the fly using simple stackless thread code.
- firmware/NRF_Peripheral_TEMP/Libraries/documentation/release_notes.txt:297  - Descriptors are now generated on the fly using simple stackless thread code.

https://github.com/emptymonkey/mimic
- README.md:37 set_target_pid is a small helper program in the mimic suite that will exhaust pids until the one you want comes back around. This allows you to choose where in the process listing you want your process to sit. Note that the kernel reserves the first 300 pids for kernel threads. If you try to go below that, you'll probably end up running with pid 301.
- set_target_pid.c:16  *		The linux kernel reserves the first three-hundered pids for kernel threads. If you target below that, 

https://github.com/postgrespro/imgsmlr
- travis/pg-travis-test.sh:151 	gdb --batch --quiet -ex "thread apply all bt full" -ex "quit" $binary $corefile

https://github.com/Cloudef/orbment
- plugins/core-screenshot/core-screenshot.c:10 #include <chck/thread/queue/queue.h>

https://github.com/GeertJohan/openwrt-go
- package/network/utils/iperf/patches/001-set-report-next-time-in-single-thread-mode.patch:3 @@ -308,6 +308,11 @@ ReportHeader* InitReport( thread_Setting
- package/libs/toolchain/Makefile:172 define Package/libpthread
- target/linux/generic/files/crypto/ocf/random.c:52 #include <linux/kthread.h>
- package/kernel/lantiq/ltq-deu/src/ifxmips_deu.h:161     wait_queue_head_t  deu_thread_wait;
- docs/wireless.tex:396 Since we currently only support thread different wireless drivers : Broadcom, Atheros and mac80211,

https://github.com/greggagne/OSC9e
- ch11/README:7 Also, the thread produces an output message before trying to acquire 
- ch6/posix-rt.c:2  * A simple pthread program illustrating RT pthread scheduling.
- ch4/Driver.java:2  * This program creates a separate thread by implementing the Runnable interface.
- ch7/deadlock.c:2  * A pthread program illustrating deadlock.
- ch4/thrd-posix.c:2  * A pthread program illustrating how to

https://github.com/Learn-Algorithm/Learn-Algorithm
- 1-树/3-字典树Trie/Siduzy/words.txt:11184 thread

https://github.com/everdox/HIDInput
- README.md:4 HIDInput was developed with the idea of synthesizing mouse and keyboard input from a system thread, as well as supplementing the task in the system thread with easy-to-use functions that made it feel like the end-coder was working in user-mode. Some examples are: ReadMemory(), SynthesizeMouse(), SynthesizeKeyboard(), AttachToProcess(), GetModuleBase(), and get key/mouse state functions in an asynchronous manner.
- main.c:26 Sleep(int milliseconds) - Just like usermode, takes this thread off the processor for the specified duration.
- input.h:633 	CLIENT_ID nthread;
- csgo.c:26 Sleep(int milliseconds) - Just like usermode, takes this thread off the processor for the specified duration.

https://github.com/xsacha/Sachesi
- Android/include/openssl/crypto.h:276 /* Adds thread number to the memory checking information */
- src/splitter.h:237         // This is blocking, but we are in a thread
- ext/zlib-win/crc32.c:19   one thread to use crc32().
- ext/zlib-win/infback.c:79    used for threaded applications, since the rewriting of the tables and virgin
- Android/include/openssl/err.h:355 void ERR_remove_thread_state(const CRYPTO_THREADID *tid);

https://github.com/vgvassilev/clad
- cmake/modules/AddCladBenchmark.cmake:46   target_link_libraries(${benchmark} PUBLIC stdc++ pthread m)
- test/CUDA/ForwardMode.cu:3 // RUN: -ldl -lrt -pthread -lm -lstdc++ -oForwardMode.out 2>&1 | FileCheck %s
- test/CUDA/GradientCuda.cu:9 // RUN: -ldl -lrt -pthread -lm -lstdc++

https://github.com/ToadKing/wii-u-gc-adapter
- wii-u-gc-adapter.c:23 #include <pthread.h>
- Makefile:2 LDFLAGS += -lpthread -ludev $(shell pkg-config --libs libusb-1.0) $(shell pkg-config --libs udev)

https://github.com/sifteo/thundercracker
- emulator/src/glfw/lib/thread.c:40 // Find pointer to thread with a matching ID
- emulator/src/glfw/lib/cocoa/cocoa_thread.c:42 // thread function.
- emulator/src/glfw/lib/win32/win32_thread.c:63 // This is simply a "wrapper" for calling the user thread function.
- emulator/src/tinythread.cpp:25 #include "tinythread.h"
- firmware/master/stm32/newlib/libc/include/pthread.h:1 /*  pthread.h

https://github.com/paulross/PythonExtensionPatterns
- doc/sphinx/source/thread_safety.rst:11 If your Extension is likely to be exposed to a multi-threaded environment then you need to think about thread safety. I had this problem in a separate project which was a C++ `SkipList <https://github.com/paulross/skiplist/>`_ which could contain an ordered list of arbitrary Python objects. The problem in a multi-threaded environment was that the following sequence of events could happen:
- doc/sphinx/source/index.rst:25     thread_safety
- doc/sphinx/source/code_layout.rst:54 The reason is that ``PyErr_Format`` calls ``PyThreadState *thread_state = PyThreadState_Get();`` theen ``thread_state`` will be NULL unless the Python interpreter is initialised.
- doc/sphinx/source/refcount.rst:314 	Current thread 0x00007fff73c88310:

https://github.com/kiyo-masui/bitshuffle
- src/iochain.h:2  * IOchain - Distribute a chain of dependent IO events among threads.
- src/iochain.c:2  * IOchain - Distribute a chain of dependent IO events among threads.
- setup.cfg.example:7 # Whether to compile with OpenMP multi-threading. Default is system dependent:
- README.rst:127 multi-threading and the target microarchitecture copy the ``setup.cfg.example`` to
- setup.py:327             "Whether to compile with OpenMP threading. Default"

https://github.com/stephenrkell/liballocs
- src/dummy_thread_locals.c:5 __thread void *__current_allocsite;
- src/cache.c:6 // FIXME: this should be thread-local but my gdb can't grok that
- examples/emit-asm.h:12 	// need to thread through a summary of incoming references,
- src/liballocs_private.h:116  * to keep track of whether it's active on the current thread. */
- Documentation/malloc-overview.txt:45 thread-local variable), albeit on the *callee* side.

https://github.com/martymac/fpart
- TODO:32   (see: https://sourceforge.net/p/fpart/discussion/general/thread/5d001d74b6/)
- docs/www.fpart.org/docs/changelog.md:25       (see: https://sourceforge.net/p/fpart/discussion/general/thread/5d001d74b6/)

https://github.com/neurodroid/cryptonite
- encfs-svn/m4/ax_pthread.m4:2 #        http://www.gnu.org/software/autoconf-archive/ax_pthread.html
- fuse29/README:5 The main problem of building and running libfuse on Android is that the bionic c library lacks support for pthread_cancel(), which is necessary for libfuse multi-thread code. This stackoverflow entry[2] has suggested a solution, which uses SIGUSR1 as an alternative. It seems to work.
- boost/build.sh:29  --without-thread \
- fuse29/jni/fuse_i.h:12 #include <pthread.h>
- fuse29/jni/fuse_mt.c:16 #include <pthread.h>

https://github.com/efficient/mica
- build/gen_confs.py:7         self.threads = []
- src/netbench_config.h:36 struct mehcached_server_thread_conf
- src/netbench_config.c:83 				ret = sscanf(buf, "server_thread,%[^,\n]\n", port_ids);
- src/netbench_analysis.c:18 #include <pthread.h>
- src/microbench.c:18 #include <pthread.h>

https://github.com/BarkyTheDog/catclock
- xclock.c:76 #include <pthread.h>
- Makefile:18 	LIBS += -lpulse -lpulse-simple -lpthread -laubio

https://github.com/ximion/appstream
- src/as-profile.c:32 	GThread *unthreaded;
- compose/asc-compose.h:50  * @ASC_COMPOSE_FLAG_USE_THREADS:		Use threads when possible.
- src/as-xml.c:36 #error "libxml2 needs to be compiled with thread support!"
- src/as-pool.c:36  * This class is threadsafe.
- compose/asc-compose.c:635  * The callback function may be called from any thread, so it needs to ensure thread safety on its own.

https://github.com/MrChromebox/coreboot
- src/include/thread.h:9 struct thread_mutex {
- src/lib/thread.c:7 #include <thread.h>
- src/arch/x86/thread_switch.S:36 .globl switch_to_thread
- src/vendorcode/cavium/include/bdk/libbdk-os/bdk-thread.h:45  * Functions for controlling threads.
- src/arch/x86/thread.c:3 #include <thread.h>

https://github.com/xjdrew/levent
- deps/libev/mkinstalldirs:72 # Solaris 8's mkdir -p isn't thread-safe.  If you mkdir -p a/b and
- deps/libev/ltmain.sh:5160     thread_safe=no
- cext/luacrypto/lcrypto.c:1958  * OpenSSL_add_all_* is not thread safe, so init Openssl when dlopen
- deps/libev/README:25    - fast intra-thread communication between multiple
- deps/lua/win/include/lua.h:44 /* thread status */

https://github.com/MirBSD/mksh
- rlimits.opt:83 FN("cachedthreads", RLIMIT_TCACHE, 1
- mksh.faq:33  href="https://forum.xda-developers.com/showthread.php?t=1963976">be
- mksh.1:5514 Set the number of cached threads to

https://github.com/Cairo-Dock/cairo-dock-core
- src/gldit/cairo-dock-task.h:30  * - the asynchronous phase will be executed in another thread, while the dock continues to run on its own thread, in parallel. During this phase you will do all the heavy job (like downloading a file or computing something) but you can't interact on the dock.
- src/gldit/cairo-dock-task.c:37 #define G_THREAD_UNREF(t) if (t) g_thread_unref (t)
- src/gldit/cairo-dock-utils.c:286 static gpointer _cairo_dock_launch_threaded (gchar *cCommand)
- src/gldit/cairo-dock-file-manager.c:116 static gpointer _cairo_dock_fm_launch_uri_threaded (gchar *cURI)
- src/cairo-dock.c:56 #include <dbus/dbus-glib.h>  // dbus_g_thread_init

https://github.com/dxgldotorg/dxgl
- minhook/README.md:30   * Fixed a possible thread deadlock in x64 mode. (Thanks to Aleh Kazakevich)
- ddraw/trace.h:32 #define TRACE_SYSINFO() if(dxglcfg.DebugTraceLevel) trace_sysinfo() // Must be in thread used by OpenGL.
- minhook/src/hook.c:47 // Initial capacity of the thread IDs buffer.
- ddraw/ddraw.cpp:61 	// FIXME:  Add thread lock
- ddraw/DXGLRendererGL.c:63 	// Start the render thread

https://github.com/xonotic/darkplaces
- thread.h:6 // enable Sys_Printf calls on nearly every threading call
- thread_sdl.c:2 #include <SDL_thread.h>
- thread_win.c:2 #include "thread.h"
- thread_null.c:2 #include "thread.h"
- svbsp.h:34 	// note: do not use multithreading when gathering statistics!

https://github.com/ramakarl/fluids3
- fluids/prefix_sum.cu:30 // Work-efficient compute implementation of scan, one thread per 2 elements
- fluids/fluid_system_kern.cu:54 	uint i = __mul24(blockIdx.x, blockDim.x) + threadIdx.x;	// particle index				
- cutil.h:82     //! @param tidx  thread id in x dimension of block
- fluids/radixsort_kernel.cu:42 #define SYNCIT __syncthreads()
- fluids/fluid_system_host.cu:215 	// Compute number of blocks and threads

https://github.com/nlhans/ets2-sdk-plugin
- scs_sdk_1_4/readme.txt:25 ========== Calling conventions and threading ==========
- scs_sdk_1_2/readme.txt:25 ========== Calling conventions and threading ==========
- ets2-client/C#/Ets2SdkClient.Demo/Properties/Resources.Designer.cs:55         ///   Overrides the current thread's CurrentUICulture property for all
- scs_sdk_1_5/readme.txt:25 ========== Calling conventions and threading ==========
- scs_sdk_1_1/readme.txt:25 ========== Calling conventions and threading ==========

https://github.com/deplinenoise/ig-debugheap
- README.md:17 - Unsynchronized multi-threaded access is detected.
- DebugHeap.h:48 // - Unsynchronized multi-threaded access is detected.

https://github.com/fdb/frequensea
- c/piqvis.c:4 #include <pthread.h>
- src/nosc.c:185     pthread_mutex_lock(&server->message_mutex);
- src/nosc.h:7 #include <pthread.h>
- src/main.cpp:985     pthread_t thread;
- src/nrf.c:9 #include <pthread.h>

https://github.com/lv2/lv2
- NEWS:115   * eg-sampler: Support thread-safe state restoration
- include/lv2/worker/worker.h:73      make any assumptions about which thread calls this method, except that
- plugins/eg-sampler.lv2/sampler.c:54   LV2_Atom_Forge       forge;        ///< Forge for writing atoms in run thread
- include/lv2/uri-map/uri-map.h:17    values for use in the audio thread without doing any string comparison.
- lv2/state.lv2/state.ttl:46 state:threadSafeRestore

https://github.com/greensea/mptunnel
- mptunnel.pot:21 msgid "Starting libev thread\n"
- client.h:6 void* client_thread(void* ptr);
- server.c:9 #include <pthread.h>
- client.c:8 #include <pthread.h>
- Makefile:3 LDFLAGS = -g  -lev -pthread -O2

https://github.com/dmage/co2mon
- co2mond/src/main.c:24 #include <pthread.h>
- co2mond/CMakeLists.txt:17     pthread

https://github.com/chyyuu/ucorebook_code
- code/user/libs/thread.c:3 #include <thread.h>
- code/user/libs/thread.h:7 } thread_t;
- code/user/threadfork.c:3 #include <thread.h>
- code/user/threadwork.c:3 #include <thread.h>
- code/user/libs/clone.S:40     movl $SYS_exit_thread, %eax # load SYS_exit_thread

https://github.com/libyal/libfsntfs
- m4/pthread.m4:1 dnl Functions for pthread
- m4/libcthreads.m4:1 dnl Checks for libcthreads required headers and functions
- libfsntfs/libfsntfs_libcthreads.h:2  * The libcthreads header wrapper
- common/config_winapi.h:86 /* If not controlled by config.h enable multi-thread support
- libfsntfs/libfsntfs_libbfio.h:52 #error Multi-threading support requires libbfio with multi-threading support

https://github.com/ValveSoftware/steamos_mesa
- src/mapi/u_thread.h:37  * If this file is accidentally included by a non-threaded build,
- src/gallium/auxiliary/os/os_thread.h:32  * thread-specific data functions.
- m4/ax_pthread.m4:2 #        http://www.gnu.org/software/autoconf-archive/ax_pthread.html
- src/glsl/threadpool.c:27 #include "c11/threads.h"
- src/mapi/glapi/glthread.h:4 #include "u_thread.h"

https://github.com/openbsm/openbsm
- bin/auditdistd/receiver.c:56 #include <pthread.h>
- NEWS:18   system calls including those for asynchronous I/O, thread management, SCTP,
- bin/auditdistd/sender.c:83 static pthread_rwlock_t adist_remote_lock;
- libbsm/au_event.3:168 These routines are thread-safe, but not re-entrant, so simultaneous or
- libbsm/bsm_flags.c:111  * XXXRW: This is not thread-safe as it relies on atomicity between

https://github.com/samdmarshall/OSXPrivateSDK
- PrivateSDK10.9.sparse.sdk/usr/include/kern/thread.h:59  *	File:	thread.h
- PrivateSDK10.9.sparse.sdk/usr/local/include/securityd_client/ssclient.h:442 		ThreadNexus<Thread> thread;
- PrivateSDK10.9.sparse.sdk/usr/include/mach/thread_info.h:59  *	File:	mach/thread_info
- PrivateSDK10.9.sparse.sdk/usr/include/kern/thread_call.h:30  @header thread_call.h
- PrivateSDK10.9.sparse.sdk/usr/include/i386/thread_state.h:35 /* Size of maximum exported thread state in words */

https://github.com/NanoComp/mpb
- m4/ax_blas.m4:148 			[ax_blas_ok=yes;BLAS_LIBS="-lmkl_gf_lp64 -lmkl_sequential -lmkl_core -lpthread"],,
- mpb/mpb.c:103 	  char *senthread = getenv("OMP_NUM_THREADS");
- m4/ax_openmp.m4:107   omp_set_num_threads(2);
- configure.ac:172    AC_DEFINE([USE_OPENMP], [1], [Define to use OpenMP threading.])

https://github.com/westerndigitalcorporation/libzbc
- tools/gui/gzbc.h:15 #include <pthread.h>
- tools/gui/gzbc.c:18 #include <pthread.h>
- README.md:290 *libzbc* does not implement any synchronization mechanism for multiple threads
- lib/zbc.h:153  * Per-thread local zbc_errno handling.
- tools/gui/Makefile.am:15 gzbc_LDADD = $(libzbc_ldadd) $(GTK_LIBS) -lpthread

https://github.com/libyal/libvmdk
- m4/pthread.m4:1 dnl Functions for pthread
- m4/libcthreads.m4:1 dnl Checks for libcthreads required headers and functions
- libvmdk/libvmdk_libcthreads.h:2  * The libcthreads header wrapper
- common/config_winapi.h:86 /* If not controlled by config.h enable multi-thread support
- libvmdk/libvmdk_libbfio.h:52 #error Multi-threading support requires libbfio with multi-threading support

https://github.com/flux-framework/flux-core
- t/kvs/commit.c:18 #include <pthread.h>
- t/issues/t3470-multithread-reactor-run.py:3 #  Simple test for issue #3470: multiple threads calling reactor_run
- src/common/libflux/connector_interthread.c:11 /* connector_interthread.c - bidirectional, inter-thread message channel */
- doc/python/basics.rst:37 .. note:: Flux handles are not thread-safe and should
- config/x_ac_check_pthreads.m4:2 ## $Id: x_ac_check_pthreads.m4 391 2005-02-10 02:31:11Z dun $

https://github.com/blitz-research/blitzmax
- mod/brl.mod/blitz.mod/blitz_thread.h:32 #include <pthread.h>
- mod/brl.mod/blitz.mod/blitz_thread.c:11 static int threadDataId;
- samples/threads/threads.bmx:14 ' Simple thread demo...
- mod/brl.mod/threads.mod/threads.c:5 BBThread *threads_CreateThread( BBThreadProc entry,BBObject *data ){
- mod/brl.mod/threads.mod/doc/createthread.bmx:6 'Custom print that shows which thread is doing the printing

https://github.com/rockdaboot/libpsl
- README.md:37 - is thread-safe

https://github.com/avielw/kplugs
- server/server.c:6 #include <pthread.h>
- server/Makefile:3 LIBS = -lpthread

https://github.com/RockLi/guava
- README.md:60 This runs a benchmark for 30 seconds, using 12 threads, and keeping 400 HTTP connections open.

https://github.com/vinoski/bitwise
- README.md:5 scheduler threads. The module supplies several variants of a function
- src/bitwise.erl:5 %% scheduler thread was yielded (if known) or the number of chunks of the
- c_src/bitwise_nif.c:11  * Erlang scheduler thread is yielded during processing of the binary.

https://github.com/xiph/opusfile
- mingw/README.md:52     /usr/i686-w64-mingw32/sys-root/mingw/bin/libwinpthread-1.dll
- mingw/Makefile:109 	cp /usr/i686-w64-mingw32/sys-root/mingw/bin/libwinpthread-1.dll $@
- src/http.c:2360         We don't want to add our own depenencies on a threading library, and it
- m4/attributes.m4:109      dnl FreeBSD (et al.) does not complete linking for shared objects when pthreads

https://github.com/MalwareTech/TinyXPB
- TinyXPB/Tools/NTDDK/inc/crt/locale.h:131 _CRTIMP int __cdecl _configthreadlocale(int i);
- TinyXPB/Tools/NTDDK/inc/crt/ios.h:77     void * OwningThread;        // from the thread's ClientId->UniqueThread
- TinyXPB/Tools/NTDDK/inc/wxp/winable.h:31 // This gets GUI information out of context.  If you pass in a NULL thread ID,
- TinyXPB/Tools/NTDDK/inc/ddk/wxp/upssvc.h:162 *   must be performed on a another thread.
- TinyXPB/Tools/NTDDK/inc/ddk/wxp/wiautil.h:779 const DWORD WIAUDBG_PRINT_INFO            = 0x10000000;  // Turns on thread, file, line info

https://github.com/terence-deng/mt7601u
- src/common/rtmp_timer.c:256 	 * after the down() -- that's necessary for the thread-shutdown
- doc/History.txt:58 	4.	Fix issue: PCI command thread initialization in pci_main_dev.c
- src/include/os/rt_linux_cmm.h:110 	if ((__pTask)->kthread_task != NULL)
- src/common/rtmp_init_inf.c:1109 	/* Close kernel threads*/
- src/ap/ap_qload.c:552 	If you call the function in kernel thread, the time period sometimes

https://github.com/dashdot/python-x11_hash
- sha3/sph_types.h:160  * <code>sphlib</code> is thread-safe and reentrant: several hash

https://github.com/alfmel/mt7601
- src/common/rtmp_timer.c:184 	 * after the down() -- that's necessary for the thread-shutdown
- src/include/os/rt_linux_cmm.h:113 	if ((__pTask)->kthread_task != NULL)
- src/common/rtmp_init_inf.c.bak:840 	/* Close kernel threads*/
- src/common/rtmp_init_inf.c:841 	/* Close kernel threads*/
- src/sta/auth.c:85         function to be executed at timer thread when auth timer expires

https://github.com/ig0tik3d/darkcoin-cpuminer-1.2c
- NEWS:35 - Set the priority of miner threads to idle on Windows
- README:27 	If using MinGW-w64, install pthreads-w64
- miner.h:9 #include <pthread.h>
- util.c:60 struct thread_q {
- cpu-miner.c:140 static int opt_n_threads;

https://github.com/HuiLi/Sqlite3.07.14
- ext/async/README.txt:7 using a separate thread running in the background. Although this does not
- src/btmutex.c:205 ** to avoid the possibility of deadlock when two threads with
- src/mutex_w32.c:17 ** The code in this file is only used if we are compiling multithreaded
- src/mutex_noop.c:16 ** that use SQLite in a single thread.  The routines defined
- src/mutex.c:135 ** Obtain the mutex p. If some other thread already has the mutex, block

https://github.com/mentatpsi/Microchip
- Microchip/Include/struct_queue.h:131  *      is used to synchronize data between a main thread of execution and
- USB/Device - LibUSB - Generic Driver Demo/Linux Application/Qt3/Makefile:22 LIBS     = $(SUBLIBS) -L/usr/share/qt3/lib -L/usr/X11R6/lib -lusb -lqt-mt -lXext -lX11 -lm -lpthread
- USB/Device - Bootloaders/HID/software_cross_platform/HIDAPI/Makefile.Debug:14 CXXFLAGS      = -g -frtti -fexceptions -mthreads -Wall $(DEFINES)
- USB/Device - Bootloaders/HID/software_cross_platform/HIDAPI/mac/hid.c:30 #include <pthread.h>
- USB/PC - Driver Management Tool/Microsoft Visual CSharp 2008 Express/MainForm64Bit.cs:157                     OutputStatus_lstbx.Items.Add("Error: thread was busy.");

https://github.com/matrixworld/OpenGLSamples
- samples/es2-aurora/TextureArrayTerrain/TerrainSimThread.h:42 #include "R3/thread.h"
- samples/es2-aurora/TextureArrayTerrain/TerrainSimThread.cpp:40 int32_t TerrainSimThread::g_threadsCounter = 0;
- samples/es3aep-kepler/ComputeWaterSimulation/WaveSimThread.cpp:43 int WaveSimThread::g_threadsCounter = 0;
- samples/es3-kepler/HDR/FileLoader.h:44   JNI-connected thread.
- extensions/src/NvAppBase/NvAndroidNativeAppGlue.h:38 #include <pthread.h>

https://github.com/Alexpux/mingw-w64
- mingw-w64-libraries/winpthreads/src/thread.h:34 typedef struct _pthread_v _pthread_v;
- mingw-w64-libraries/winpthreads/src/thread.c:29 #include "pthread.h"
- mingw-w64-libraries/winpthreads/include/pthread_time.h:43 /* Clock support in threads are available.  */
- mingw-w64-libraries/winpthreads/include/pthread_unistd.h:28   Basic support for POSIX threads is available. The functions
- mingw-w64-libraries/winpthreads/include/pthread.h:72 #include "pthread_compat.h"

https://github.com/scorelab/OpenDF
- sleuthkit/m4/ax_pthread.m4:2 #        http://www.gnu.org/software/autoconf-archive/ax_pthread.html
- sleuthkit/tsk/img/ewf.h:49         tsk_lock_t read_lock;   ///< Lock for reads since libewf is not thread safe -- only works if you have a single instance of EWF_INFO for all threads.
- sleuthkit/tsk/docs/cpp.dox:6 ensure that the proper locks and thread-safe mechanisms are used
- sleuthkit/tsk/base/tsk_base.h:72     /* The core function here is to retrieve the per-thread error structure. Other functions to follow
- sleuthkit/tsk/base/tsk_lock.c:47     pthread_mutexattr_t attr;

https://github.com/CyanogenMod/android_device_samsung_klte-common
- fingerprint/fingerprint.c:52     pthread_mutex_t lock;
- fingerprint/fingerprint_common.h:44     pthread_cond_t cond;
- fingerprint/fingerprint_tz.c:49     pthread_mutex_lock(&tz.lock);
- include/hardware/gps.h:23 #include <pthread.h>
- camera/CameraWrapper.cpp:31 #include <utils/threads.h>

https://github.com/sialan-labs/sigram
- Sigram/telegram/telegram.cpp:20 #include "telegramthread.h"
- Sigram/telegram/telegramthread.cpp:22 #include "telegramthread.h"
- Sigram/telegram/telegram.pri:24     telegram/telegramthread.cpp \
- Sigram/telegram/telegramcore.cpp:20 #include "telegramthread.h"
- Sigram/telegram/telegram_cli/tmain.c:194     qthreadExitRequest (1);

https://github.com/cisco/libest
- example/server/README:14 	     OpenSSL CA implementation is not thread safe.
- src/est/est_server_http.h:116 typedef HANDLE pthread_mutex_t;
- intro.txt:333 the OpenSSL CA used by the example EST server is not thread safe and
- example/util/simple_server.c:2  * simple_server.c - This is a very simple multi-threaded TCP
- example/util/simple_server_windows.c:4  *                   multi-threaded  TCP server used by the 

https://github.com/Broadcom-Switch/of-dpa
- src/ofagent/indigo/modules/OFStateManager/README:22 Platforms that use multiple threads to handle hardware events should ensure
- src/ofagent/indigo/submodules/bigcode/modules/OS/utest/main.c:40     printf("os_time_thread=%"PRIu64"\n", os_time_thread());
- src/ofagent/indigo/submodules/bigcode/modules/VPI/utest/vpi_blocking.c:21 #include <pthread.h>
- src/ofagent/indigo/submodules/bigcode/modules/OS/module/inc/OS/os_time.h:49 uint64_t os_time_thread(void);
- src/ofagent/indigo/submodules/bigcode/modules/OS/module/src/os_time_osx.c:45 os_time_thread(void)

https://github.com/mirror4/netbox
- BoxLib/BThread.cpp:4 static __declspec(thread) CBThread* th_pThread;
- BoxLib/BTypeInfo.cpp:15 __declspec(thread) EXCEPINFO* th_pExcepInfo = NULL;
- BoxLib/BCodePage.cpp:4 static __declspec(thread) UINT th_nCodePage;
- NetBox2/BoxScriptObject.cpp:459 				pExcepInfo->bstrDescription = SysAllocString(L"Cannot use an instance of a script object across the different thread.");
- BoxLib/zlib/zlib.h:120    If zlib is used in a multi-threaded application, zalloc and zfree must be

https://github.com/CyanogenMod/android_device_moto_shamu
- camera/QCamera/stack/mm-camera-interface/src/mm_camera_thread.c:30 #include <pthread.h>
- camera/QCamera2/util/QCameraCmdThread.h:33 #include <pthread.h>
- camera/QCamera2/util/QCameraCmdThread.cpp:78  *   @start_routine : thread routine function ptr
- camera/QCamera2/stack/mm-camera-interface/src/mm_camera_thread.c:30 #include <pthread.h>
- camera/QCamera2/HAL/QCameraStream.h:127     QCameraCmdThread mProcTh; // thread for dataCB

https://github.com/ARMmbed/uvisor
- core/system/src/thread.c:35 /* By default a maximum of 16 threads are allowed. This can only be overridden
- core/system/inc/thread.h:20 void * thread_create(int id, void * c);
- docs/lib/INTRO.md:33 This is a simple example to show how to write a uVisor-secured threaded application with IRQ support. One LED blinks periodically from the public box main thread. A secure box exclusively owns the second LED, which toggles you press the user button.
- README.md:18 - The [uVisor threaded example](https://github.com/ARMmbed/mbed-os-example-uvisor-thread) demonstrates the configuration of multiple boxes containing secure threads.
- docs/lib/QUICKSTART.md:57 This application blinks an LED from the main thread, which the OS creates by default.

https://github.com/embedded2014/rtenv
- kernel.c:143 /* Stack struct of user thread, see "Exception entry and return" */

https://github.com/ni/linux
- arch/um/include/asm/thread_info.h:19 struct thread_info {
- include/linux/sched/thread_info_api.h:1 #include <linux/thread_info.h>
- fs/ecryptfs/kthread.c:9 #include <linux/kthread.h>
- tools/lib/perf/threadmap.c:2 #include <perf/threadmap.h>
- fs/ocfs2/dlm/dlmthread.c:3  * dlmthread.c

https://github.com/bisdn/xdpd
- src/xdpd/management/system_manager.h:171 	* Main ciosrv thread pthread state
- src/xdpd/drivers/gnu_linux/src/config.h:14 * system which has 4 hw cores (hw threads). Please adjust it to your needs (specially THREAD numbers).
- src/xdpd/management/plugins/rest/rest.h:5 #include <boost/thread.hpp>
- config/boost.m4:292 # Look for the Boost library COMPONENT-NAME (e.g., `thread', for
- src/xdpd/management/system_manager.cc:40 pthread_t system_manager::ciosrv_thread = 0;

https://github.com/CyanogenMod/android_device_motorola_victara
- gps/libloc_api_50001/loc_eng_dmn_conn_thread_helper.c:33 #include "loc_eng_dmn_conn_thread_helper.h"
- gps/libloc_api_50001/loc_eng_dmn_conn_thread_helper.h:36 #include <pthread.h>
- gps/core/MsgTask.cpp:48 MsgTask::MsgTask(tCreate tCreator, const char* threadName) :
- gps/libloc_api_50001/Android.mk:33     loc_eng_dmn_conn_thread_helper.c \
- gps/utils/loc_timer.c:48     pthread_cond_t timer_cond;

https://github.com/kashifmin/MT6582-KK-KERNEL
- kernel/fs/btrfs/async-thread.h:22 struct btrfs_worker_thread;
- kernel/tools/perf/util/thread_map.h:7 struct thread_map {
- kernel/arch/frv/include/asm/thread_info.h:1 /* thread_info.h: description
- kernel/fs/ecryptfs/kthread.c:23 #include <linux/kthread.h>
- kernel/include/linux/kthread.h:3 /* Simple interface for creating and stopping kernel threads without mess. */

https://github.com/bkifft/Project_CTR
- ctrtool/exheader.c:596 	fprintf(stdout, "Main thread priority:   %d %s\n", ctx->header.arm11systemlocalcaps.priority, exheader_getvalidstring(ctx->validpriority));
- ctrtool/tinyxml/tinyxml.h:219 		value is not thread safe.

https://github.com/hhvm/hhvm-third-party
- pcre/m4/ax_pthread.m4:2 #        http://www.gnu.org/software/autoconf-archive/ax_pthread.html
- pcre/pcre_globals.c:42 PCRE is thread-clean and doesn't use any global variables in the normal sense.
- pcre/sljit/sljitUtils.c:111 #include <pthread.h>
- pcre/doc/pcrejit.3:256 sequentially in the same thread. In a multithread application, if you do not
- pcre/sljit/sljitConfig.h:62 /* Useful for thread-safe compiling of global functions. */

https://github.com/NetEase/libpomelo2
- deps/uv/src/win/thread.c:111 /* Verify that uv_thread_t can be stored in a TLS slot. */
- cs/contrib/unity/Assets/UnityThreading/Thread.cs:25         protected Thread thread;
- deps/uv/docs/src/threadpool.rst:2 .. _threadpool:
- deps/uv/src/unix/thread.c:25 #include <pthread.h>
- Makefile.linux:13 UV_OBJECT = inet.o threadpool.o uv-common.o version.o async.o core.o linux-core.o linux-inotify.o linux-syscalls.o loop-watcher.o loop.o signal.o stream.o tcp.o thread.o timer.o udp.o pipe.o fs-poll.o process.o  fs.o poll.o

https://github.com/ev3dev/lego-linux-drivers
- linux/rproc/ti_pru_rproc.c:118 static irqreturn_t ti_pru_vq_irq_thread(int irq, void *p)

https://github.com/lttng/lttng-modules
- src/lttng-context-vppid.c:40 	 * the current thread nsproxy to perform the lookup.
- src/lttng-statedump-impl.c:12  *	2006, 2007 Mathieu Desnoyers	Fix kernel threads
- doc/lttng-modules-design.txt:107   thread ID, process name, performance counters, and more.
- include/ringbuffer/vatomic.h:19  * local_t is used for per-cpu and per-thread buffers.
- include/instrumentation/events/sched.h:154  * Tracepoint for calling kthread_stop, performed to end a kthread:

https://github.com/regehr/itc-benchmarks
- 01.w_Defects/st_cross_thread_access.c:3 * File Name: st_cross_thread_access.c
- 01.w_Defects/Makefile.am:2 AM_CFLAGS = -pthread
- include/HeaderFile.h:13 #include <pthread.h>
- 01.w_Defects/stubs.c:9 #include <pthread.h>
- 01.w_Defects/livelock.c:13  * Complexity: Thread 1 and thread 2 try to give up the 

https://github.com/ceph/gf-complete
- manual/gf-complete.html:2793 Once you initialize a <b>gf_t,</b> you may use it wontonly in multiple threads for all operations except for the ones below.

https://github.com/session-replay-tools/intercept
- configure:97         CORE_LIBS="$CORE_LIBS -lrt -lpthread -lnuma"

https://github.com/kozyraki/phoenix
- phoenix++-1.0/src/thread_pool.cpp:28 #include <pthread.h>
- phoenix++-1.0/include/thread_pool.h:33 typedef void (*thread_func)(void *, thread_loc const& loc);
- sample_apps/pca/pca-pthread.c:36 #include <pthread.h>
- sample_apps/kmeans/kmeans-pthread.c:36 #include <pthread.h>
- sample_apps/histogram/hist-pthread.c:38 #include <pthread.h>

https://github.com/mirror/xmlrpc-c
- trunk/lib/abyss/src/thread.h:10 typedef struct abyss_thread TThread;
- trunk/lib/abyss/src/thread_fork.c:14 #include "thread.h"
- trunk/lib/abyss/src/thread_pthread.c:5 #include <pthread.h>
- trunk/lib/abyss/src/thread_windows.c:5    Bryan Henderson redesigned the threading structure for Abyss in
- trunk/include/xmlrpc-c/openssl_thread.h:5 xmlrpc_openssl_thread_setup(const char ** const errorP);

https://github.com/FredyH/MySQLOO
- src/mysql/Database.h:7 #include <thread>
- src/mysql/Database.cpp:26     if (this->m_thread.joinable()) {
- src/mysql/ResultData.cpp:17 //another thread (which is not safe)
- README.md:136 -- Please note that this does block the main server thread if there is a query currently being ran
- GmodLUA/GarrysMod/Lua/Types.h:81                 "thread",

https://github.com/pok-kernel/pok
- kernel/core/thread.c:16  * \file    core/thread.c
- examples/network/threads.aadl:14 package threads
- libpok/core/threadid.c:19 #include <core/thread.h>
- libpok/core/threadsleep.c:18 pok_ret_t pok_thread_sleep(const pok_time_t us) {
- examples/case-study-fcc/pilot_threads.aadl:14 package pilot_threads

https://github.com/yqh/ECE254
- lab2/starter/RTX_CM3/INC/RTX_lib.c:370  *      Standard Library multithreading interface

https://github.com/FredericJacobs/25519
- Sources/ed25519/sha512/sph_types.h:160  * <code>sphlib</code> is thread-safe and reentrant: several hash

https://github.com/bitcraze/crazyflie2-stm-bootloader
- scripts/linker/STM32F303xC.ld:113         __main_thread_stack_base__ = .;

https://github.com/naver/arcus-memcached
- thread.h:27  * Stats stored per-thread.
- thread.c:32 #include <pthread.h>
- doc/threads.txt:1 Multithreading support in memcached
- t/00-startup.t:85 ok($@, "Died with illegal 0 thread count");
- isasl.c:9 #include <pthread.h>

https://github.com/cherishsir/ubuntu230os
- day13/os/kernel/ucgui/GUI/JPEG/Doc/libjpeg.txt:1556 eliminate response-time problems in single-threaded applications.  If you
- 6day/readme.txt:62    make 之后报这样的错，网上找不到答案，可能是太简单的原因，尝试在Makefile中加了一行LIBS= -lpthread　就搞定了
- 12dayucgui/os/kernel/ucgui/GUI/JPEG/Doc/libjpeg.txt:1556 eliminate response-time problems in single-threaded applications.  If you
- 14dayucgui/os/kernel/ucgui/GUI/JPEG/Doc/libjpeg.txt:1556 eliminate response-time problems in single-threaded applications.  If you

https://github.com/mikereidis/spirit2_free
- jni/bts/bt-ven.c:24 #include <pthread.h>
- jni/jut/jut.c:21 static void *offload_thread_loop(void *context)
- src/fm/a2d/sf/gui_act.java:47     //strict_mode_set (true);                                           // Disabled due to remaining main thread issues
- src/fm/a2d/sf/svc_aud.java:54   private boolean       thread_pcm_write_active = false;
- src/fm/a2d/sf/com_uti.java:194   public static boolean main_thread_get (String source) {

https://github.com/NamelessRom/android_kernel_samsung_smdk4412
- fs/btrfs/async-thread.c:19 #include <linux/kthread.h>
- net/rds/threads.c:40  * work queues that execute in a connection managing thread.
- fs/ecryptfs/kthread.c:23 #include <linux/kthread.h>
- Documentation/kref.txt:36    it can be passed to another thread of execution, you must
- arch/arm/vfp/entry.S:15  *  r10 = thread_info structure

https://github.com/adafruit/Adafruit_BLESniffer_Python
- SnifferAPI/Logger.py:7 import threading
- documentation.html:119   <td>Starts the Sniffer thread. This call must be made (once and only once) before using the sniffer object.</td>
- SnifferAPI/Sniffer.py:4 import threading
- SnifferAPI/Notifications.py:2 import threading
- SnifferAPI/SnifferCollector.py:3 import threading

https://github.com/coturn/coturn
- docs/netarch.md:45 If the relay server that will be handling that session is located in a different thread,
- src/apps/relay/CMakeLists.txt:5 check_function_exists("pthread_barrier_init" HAVE_THREAD_BARRIERS)
- src/apps/relay/turn_admin_server.h:37 #include <pthread.h>
- ChangeLog:30 - Log threadId to logs to aid in multi-threaded debugging. (#1030) (Scott Godin <sgodin@sipspectrum.com>)
- examples/etc/turnserver.conf:136 # Number of the relay threads to handle the established connections

https://github.com/krallin/tini
- test/run_outer_tests.py:7 import threading

https://github.com/i3/i3
- testcases/t/547-nested-variables.t:35 # ==2108678==ERROR: AddressSanitizer: requested allocation size 0xffffffffffffffe1 (0x7e8 after adjustments for alignment, red zones etc.) exceeds maximum supported size of 0x10000000000 (thread T0)
- meson.build:459 # src/log.c uses threading primitives for synchronization
- i3-dump-log/main.c:183     /* NB: While we must never write, we need O_RDWR for the pthread condvar. */
- include/sd-daemon.h:108   problematic in threaded environments). If r is the return value of

https://github.com/microsoft/react-native-code-push
- docs/api-js.md:500 The `sync` method can be called anywhere you'd like to check for an update. That could be in the `componentWillMount` lifecycle event of your root component, the onPress handler of a `<TouchableHighlight>` component, in the callback of a periodic timer, or whatever else makes sense for your needs. Just like the `checkForUpdate` method, it will perform the network request to check for an update in the background, so it won't impact your UI thread and/or JavaScript thread's responsiveness.
- docs/setup-ios.md:96        'RCTAnimation', # Needed for FlatList and animations running on native UI thread
- windows-legacy/CodePush.Shared/CodePushNativeModule.cs:325             // #3) Get the context creation method and fire it on the UI thread (which RN enforces)
- windows/CodePush/miniz/miniz.h:1143 /* Note that the m_last_error functionality is not thread safe. */
- windows/CodePush/miniz/miniz.c:664 /* Purposely making these tables static for faster init and thread safety. */

https://github.com/antirez/disque
- src/bio.c:17  * and a different thread and job queue for every job type.
- src/zmalloc.c:43 #include <pthread.h>
- src/zmalloc.h:74 void zmalloc_enable_thread_safeness(void);
- disque.conf:337 # stage of command execution where the thread is blocked and can not serve
- src/aof.c:237  * file descriptor (the one of the AOF file) in another thread. */

https://github.com/Wind4/vlmcsd
- src/types.h:36 #include <pthread.h>
- src/wintap.c:295 	logger("Warning: VPN thread for device \"%s\" exiting: %s\n", ActiveTapName, win_strerror(error));
- src/crypto_windows.c:98 #	ifndef USE_THREADS // In fork() mode thread-safety is not required
- src/network.c:862 #else // Posix threads
- src/helpers.c:295 // Returns a static message buffer containing text for a given Win32 error. Not thread safe (same as strerror)

https://github.com/wazuh/wazuh
- src/shared_modules/utils/threadDispatcher.h:15 #include <thread>
- src/shared/pthreads_op.c:13 #include <pthread.h>
- src/headers/pthreads_op.h:15 #define w_create_thread(x, y) if (!CreateThread((void * (*) (void *))x, y)) merror_exit(THREAD_ERROR);
- framework/Makefile:12 THREAD_FLAGS = -pthread
- architecture/wm_sca/Readme.md:15 This module is composed of a main thread, from which two other secondary threads diverge. These threads are:

https://github.com/betaflight/betaflight
- lib/main/CMSIS/Core/Include/tz_context.h:60 /// Load secure context (called on RTOS thread context switch)
- src/main/io/gps.h:284     uint8_t state;                  // GPS thread state. Used for detecting cable disconnects and configuring attached devices
- src/main/io/gps.c:456     // signal GPS "thread" to initialize when it gets to it
- src/main/drivers/bus_spi.c:673             /* Note that this driver may be called both from the normal thread of execution, or from USB interrupt
- src/main/drivers/serial_tcp.c:91     if (pthread_mutex_init(&s->txLock, NULL) != 0) {

https://github.com/mit-pdos/xv6-public
- proc.c:361 // kernel thread, not this CPU. It should

https://github.com/vozlt/nginx-module-vts
- src/ngx_http_vhost_traffic_status_module.c:240     NULL,                                        /* init thread */

https://github.com/schwabe/ics-openvpn
- main/src/main/cpp/ovpnutil/sslspeed.c:202     __android_log_write(ANDROID_LOG_DEBUG,"openvpn", "stop run thread started");
- main/src/main/cpp/lzo/autoconf/mkinstalldirs:72 # Solaris 8's mkdir -p isn't thread-safe.  If you mkdir -p a/b and
- main/src/ui/java/de/blinkt/openvpn/core/OpenVPNThreadv3.java:43      * to avoid ANR on the service main thread */
- main/src/main/cpp/lzo/doc/LZO.TXT:49  - Algorithm is thread safe.
- main/src/main/cpp/lzo/src/lzo1c_cc.c:104 // note: this is not thread safe, but as it is used for finetuning only

https://github.com/DhavalKapil/icmptunnel
- tunnel.c:21 #include <pthread.h>

https://github.com/neomutt/neomutt
- mutt_thread.h:3  * Create/manipulate threading in emails
- email/thread.h:3  * Create/manipulate threading in emails
- email/thread.c:3  * Create/manipulate threading in emails
- mutt_thread.c:3  * Create/manipulate threading in emails
- README.md:59 | Use Threads              | Improve the experience with viewing threads in the index

https://github.com/premake/premake-core
- contrib/curl/lib/asyn-thread.c:41 #    include <pthread.h>
- contrib/mbedtls/configs/config-thread.h:2  * \file config-thread.h
- contrib/curl/lib/curl_threads.c:29 #    include <pthread.h>
- contrib/curl/lib/curl_threads.h:28 #  define curl_mutex_t           pthread_mutex_t
- contrib/mbedtls/library/threading.c:32 #include "mbedtls/threading.h"

https://github.com/google/honggfuzz
- subproc.h:27 #include <pthread.h>
- subproc.c:51     static __thread char str[256];
- CHANGELOG:17         - support for thread CPU pinning
- fuzz.c:31 #include <pthread.h>
- honggfuzz.c:85     /* It's handled in the signal thread */

https://github.com/mofarrell/p2pvc
- src/p2pvc.c:22 void *spawn_audio_thread(void *args) {
- src/pa_unix_util.c:44 #include <pthread.h>
- src/inc/pa_unix_util.h:49 #include <pthread.h>
- src/inc/pa_ringbuffer.h:13  * Note that this is safe only for a single-thread reader
- Makefile:18 LDFLAGS+=-lpthread -lncurses -lportaudio -lm

https://github.com/distcc/distcc
- m4/ax_pthread.m4:2 #        https://www.gnu.org/software/autoconf-archive/ax_pthread.html
- src/zeroconf-reg.c:37 #include <avahi-common/thread-watch.h>
- src/srvnet.c:105     /* This should be at least 2X the number of threads, and AMD EPYX sells 64-thread CPUs (2019) */
- TODO:557     as is supposed to be the case for PPC AIX.  See thread by Stuart D
- doc/web/faq.html:501    example, <a href="http://groups.google.com/groups?hl=en&amp;lr=&amp;ie=UTF-8&amp;oe=UTF-8&amp;threadm=opro4i72qrekdofe%40news.lysator.liu.se&amp;rnum=3&amp;prev=/groups%3Fq%3Ddistcc%2Bopenbsd%26ie%3DUTF-8%26oe%3DUTF-8%26hl%3Den%26btnG%3DGoogle%2BSearch">OpenBSD i386 and NetBSD i386</a>. 

https://github.com/datatheorem/TrustKit
- TrustKit/Dependencies/RSSwizzle/RSSwizzle.m:211     // To keep things thread-safe, we fill in the originalIMP later,
- TrustKit/Dependencies/RSSwizzle/RSSwizzle.h:56  Swizzling is fully thread-safe.
- TrustKit/Reporting/TSKPinFailureReport.m:60     // change, and is listed as explicitely thread safe, so lets reuse the instance.
- TrustKit/Dependencies/domain_registry/private/trie_search.c:47    * TODO(bmcquade): could use thread-local storage of sufficient size

https://github.com/strace/strace
- src/ldt.c:77 		 * It should be the same in case of get_thread_area, but we can
- src/sigevent.h:23 		} sigev_thread;
- src/syscall_dummy.h:29 #  define sys_set_thread_area	printargs
- NEWS:872   * Enhanced decoding of get_thread_area, memfd_create, modify_ldt,
- maint/gen/README.md:25  * `tid`: A thread id

https://github.com/leixiaohua1020/simplest_ffmpeg_mobile
- simplest_sdl_android_helloworld/jni/include/SDL_thread.h:22 #ifndef _SDL_thread_h
- simplest_sdl_android_helloworld/jni/src/thread/SDL_thread.c:23 /* System independent thread management routines for SDL */
- simplest_sdl_android_helloworld/jni/src/thread/SDL_thread_c.h:23 #ifndef _SDL_thread_c_h
- simplest_sdl_android_helloworld/jni/src/thread/stdcpp/SDL_syscond.cpp:24 #include "SDL_thread.h"
- simplest_sdl_android_helloworld/jni/src/thread/stdcpp/SDL_sysmutex.cpp:24 #include "SDL_thread.h"

https://github.com/twitter/pelikan
- legacy/deps/ccommon/notes/thread_safe.txt:1 Tracking whether a module is thread-safe or not, and what makes it unsafe. In some cases, it may make sense to have both implementations exist at the same time.
- src/net/src/tcp.rs:277         std::thread::sleep(std::time::Duration::from_millis(100));
- legacy/src/core/core.c:8 #include <pthread.h>
- src/queues/src/lib.rs:73 /// another type. This allows for bi-directional communication between threads
- legacy/deps/ccommon/notes/modules.txt:1 current cc_debug.[ch] is not thread-safe, and is blocking on the file I/O.

https://github.com/taviso/ctypes.sh
- test/gtk.sh:56 # Prevent threading issues.

https://github.com/GStreamer/gstreamer
- subprojects/gstreamer/libs/gst/helpers/ptp/thread.rs:39         // SAFETY: Getting a handle to the current thread is safe at any time
- subprojects/gst-rtsp-server/gst/rtsp-server/rtsp-thread-pool.c:20  * SECTION:rtsp-thread-pool
- subprojects/gst-plugins-bad/ext/sctp/usrsctp/usrsctplib/user_recv_thread.h:31 void recv_thread_init(void);
- subprojects/gstreamer/docs/random/wtay/threads_hilevel:4 - the managing container (top half). This is the main thread that
- subprojects/gst-docs/markdown/application-development/advanced/threads.md:7 GStreamer is inherently multi-threaded, and is fully thread-safe. Most

https://github.com/SuperHouse/esp-open-rtos
- libc/xtensa-lx106-elf/include/threads.h:30 #include <machine/_threads.h>
- libc/xtensa-lx106-elf/include/pthread.h:34 struct _pthread_cleanup_context {
- lwip/sys_arch.c:122  *      Blocks the thread while waiting for the semaphore to be signaled. If the
- extras/stdin_uart_interrupt/README.txt:1 This module adds interrupt driven receive on UART 0. Using semaphores, a thread
- extras/cpp_support/include/task.hpp:36 namespace thread {

https://github.com/zardus/preeny
- src/desock.c:6 #include <pthread.h>
- src/ensock.c:6 #include <pthread.h>
- src/desock_dup.c:6 #include <pthread.h>
- src/Makefile:59 desock.so: CFLAGS+=-lpthread
- src/writeout.c:6 #include <pthread.h>

https://github.com/bluekitchen/btstack
- port/stm32-wb55xx-nucleo-freertos/Middlewares/STM32_WPAN/interface/patterns/ble_thread/tl/tl_mbox.c:82   TL_RefTable.p_thread_table = &TL_ThreadTable;
- port/stm32-wb55xx-nucleo-freertos/Middlewares/STM32_WPAN/interface/patterns/ble_thread/tl/mbox_def.h:147     MB_ThreadTable_t        *p_thread_table;
- port/esp32/README.md:3 Status: Basic port incl. all examples. BTstack runs on dedicated FreeRTOS thread. Multi threading (calling BTstack functions from a different thread) is not supported.
- doc/manual/docs-template/integration.md:7 multi-threaded environments.
- port/libusb/CMakeLists.txt:32 # pthread

https://github.com/tmikolov/word2vec
- word2vec.c:19 #include <pthread.h>
- README.txt:12  - number of threads to use
- makefile:3 CFLAGS = -lm -pthread -O3 -march=native -Wall -funroll-loops -Wno-unused-result
- demo-word.sh:6 time ./word2vec -train text8 -output vectors.bin -cbow 1 -size 200 -window 8 -negative 25 -hs 0 -sample 1e-4 -threads 20 -binary 1 -iter 15
- demo-phrases.sh:10 time ./word2vec -train news.2012.en.shuffled-norm1-phrase1 -output vectors-phrase.bin -cbow 1 -size 200 -window 10 -negative 25 -hs 0 -sample 1e-5 -threads 20 -binary 1 -iter 15

https://github.com/luohaha/Chinese-uvbook
- code/thread-create/main.c:28     uv_thread_t hare_id;
- source/processes.md:162 void thread1_worker(void *userp)
- source/utilities.md:125 ## Passing data to worker thread
- code/locks/main.c:44     uv_thread_t threads[3];
- README.md:13 5. [线程](./source/threads.md)

https://github.com/glmcdona/Process-Dump
- README.md:10 * Multi-threaded, so when you are dumping all running processes it will go pretty quickly.
- pd/close_watcher.h:3 #include <thread>
- pd/close_watcher.cpp:9 	_monitoring_thread = NULL;
- pd/terminate_monitor_hook.h:16 	unsigned __int64 _address_thread_id;
- pd/terminate_monitor_hook.cpp:66 		// Handle any stuck threads that are waiting to terminate

https://github.com/RRZE-HPC/likwid
- bench/src/threads.c:4  *      Filename:  threads.c
- bench/includes/threads.h:4  *      Filename:  threads.h
- src/pthread-overload/pthread-overload.c:4  *      Filename:  pthread-overload.c
- README.md:17 - likwid-topology: print thread, cache and NUMA topology
- CHANGELOG:34 - Fix for systems with CPU sockets without hwthreads (A64FX FX1000)

https://github.com/wiire-a/pixiewps
- src/crypto/tc/tomcrypt_custom.h:553 #include <pthread.h>
- src/pixiewps.c:27 #include <pthread.h>
- README.md:14 - [https://forums.kali.org/showthread.php?25018-Pixiewps-wps-pixie-dust-attack-tool](https://forums.kali.org/showthread.php?25018-Pixiewps-wps-pixie-dust-attack-tool)
- Makefile:13 LIBS = -lpthread
- CHANGELOG.md:30 - Multi-threading support @rofl0r.

https://github.com/hfiref0x/WinObjEx64
- README.md:95 	- Show thread list for selected process
- Compiled/WHATSNEW_173.md:8 List of selected process threads. To view much of information administrative privilege and elevation required. Shows driver file for system threads.
- Source/WinObjEx64/global.h:39 #pragma warning(disable: 6258) // Using TerminateThread does not allow proper thread clean up.
- Source/CHANGELOG.txt:139 threads list in processes dialog
- Source/WinObjEx64/findDlg.c:691 * Find Dialog thread.

https://github.com/x64dbg/GleeBug
- GleeBug/Debugger.Thread.h:28         \param dwThreadId Identifier for the thread.
- GleeBug/Debugger.Loop.Thread.cpp:7         //thread housekeeping
- GleeBug/Debugger.Process.cpp:12         thread(nullptr),
- GleeBug/Debugger.Loop.Exception.cpp:127         //delete the hardware breakpoint from the thread (not the breakpoint buffer) and do an internal step (TODO: maybe delete from all threads?)
- GleeBug/GleeBug.vcxproj:94       <AdditionalOptions>/Zc:threadSafeInit- %(AdditionalOptions)</AdditionalOptions>

https://github.com/vurtun/lib
- sched.h:13     - Fast, then scalable: Designed for consumer devices first, so performance on a low number of threads is important, followed by scalability.
- web.h:14     - No threading, all I/O and serving happens on the calling thread
- Readme.md:8 |**sched.h** | 1.00 | multithreading | 699 | zlib | multithreaded task scheduler
- tests/sched_test.c:52     pst->cnt = sched->threads_num;

https://github.com/Fazecast/jSerialComm
- src/main/java/com/fazecast/jSerialComm/SerialPortThreadFactory.java:31  * This class is used to create internal jSerialComm threads.
- src/main/c/Posix/SerialPort_Posix.c:86 pthread_mutex_t criticalSection;
- src/main/java/com/fazecast/jSerialComm/SerialPort.java:1816 			// Reset event listening parameters and start a new listening thread
- src/main/java/com/fazecast/jSerialComm/SerialPortDataListener.java:86 	 * Note that your implementation of this function should always perform as little data processing as possible, as the speed at which this callback will fire is at the mercy of the underlying operating system. If you need to collect a large amount of data, application-level buffering should be implemented and data processing should occur on a separate thread.
- src/main/java/com/fazecast/jSerialComm/android/AndroidPort.java:99 				// TODO: Alert event waiting thread, close port, set to null

https://github.com/gdabah/distorm
- src/instructions.c:411 					 * And since the DB can't be patched dynamically, because the DB has to be multi-threaded compliant,

https://github.com/cisco-system-traffic-generator/trex-core
- src/dpdk/lib/pipeline/rte_swx_pipeline_internal.h:1030 struct thread {
- src/dpdk/lib/eal/unix/rte_thread.c:7 #include <pthread.h>
- src/dpdk/lib/eal/linux/eal_thread.c:8 #include <pthread.h>
- src/dpdk/lib/eal/common/eal_thread.h:12  * Basic loop of EAL thread, called for each worker thread by rte_eal_init().
- src/dpdk/lib/eal/include/rte_thread.h:19  * Simple threads functionality supplied by EAL.

https://github.com/grimfang4/sdl-gpu
- src/externals/stb_image/stb_image.h:876 // this is not threadsafe

https://github.com/kdlucas/byte-unixbench
- UnixBench/src/ubgears.c:556    Bool           use_threadsafe_api = False;
- UnixBench/USAGE:293 lot of CPU time in single-threaded kernel code.  The shell scripts test with

https://github.com/y123456yz/Reading-and-comprehense-linux-Kernel-network-protocol-stack
- linux-net-kernel/net/rds/threads.c:40  * work queues that execute in a connection managing thread.
- linux-net-kernel/net/rds/af_rds.c:204 	/* racing with another thread binding seems ok here */
- linux-net-kernel/net/rds/ib_stats.c:56 	"ib_rx_refill_from_thread",
- linux-net-kernel/net/rds/iw_stats.c:56 	"iw_rx_refill_from_thread",
- linux-net-kernel/net/core/.sock.o.d:60  include/asm-generic/percpu.h include/linux/threads.h \

https://github.com/dequis/purple-facebook
- ChangeLog:72   - Display the thread URL for videos
- patches/08-revert-marshaller.patch:214  	 * FbApi::thread:

https://github.com/vanhauser-thc/thc-ipv6
- sendpeesmp6.c:17   #include <pthread.h>
- dnsdict6.c:3  *   - threaded (way faster)
- CHANGES:547     - made library thread safe, for this to work I:
- alive6.c:54 static char   _fingerprint[4096];  // not thread safe!
- Makefile:28 	$(CC) $(CFLAGS) $(CPPFLAGS) $(STATIC) -o $@ $^ $(LDFLAGS) -lpthread -lresolv

https://github.com/vengi-voxel/vengi
- src/modules/core/concurrent/Thread.h:21 	mutable SDL_Thread *_thread;
- src/modules/core/concurrent/Thread.cpp:6 #include <SDL_thread.h>
- src/modules/image/AVIRecorder.h:23 	core::Thread *_thread = nullptr;
- contrib/libs/sdl2/include/SDL_thread.h:22 #ifndef SDL_thread_h_
- contrib/libs/sdl2/src/thread/SDL_thread.c:23 /* System independent thread management routines for SDL */

https://github.com/devsisters/goquic
- boringssl/openssl/thread.h:76  * enough to contain a Windows CRITICAL_SECTION by thread_win.c. */
- init.go:12 extern void goquic_thread_locking_callback(int, int, const char*, int);
- init_posix.go:10 #include <pthread.h>
- task_runner.go:14 	// This duration should be managed explicitly by heap, and should not be shared with GoQuicAlarm to be thread-safe.
- src/proof_source_goquic.h:14 // This should be thread-safe, because multiple dispatcher may concurrently call

https://github.com/wmcbrine/PDCurses
- docs/HISTORY.md:10 - Single-process, single-thread version of the X11 port. Much, much

https://github.com/aws/aws-iot-device-sdk-embedded-C
- CMakeLists.txt:113 # Find thread library.
- CHANGELOG.md:29 - [#1599](https://github.com/aws/aws-iot-device-sdk-embedded-C/pull/1599) Checking execution status of demo loop before calling pthread_join in OTA demos
- docs/doxygen/migration/mqtt.dox:5 The MQTT library has been refactored in 202009.00 and subsequent releases, to use only a single thread, and therefore no longer has any thread synchronization dependencies. New features such as persistent session support and QoS 2 publish delivery have also been added.
- docs/doxygen/demos/http_demo.dox:136  * @section http_demo_s3_download_multithreaded HTTP Multithreaded S3 Download Demo
- docs/doxygen/images/http_demo_s3_download_multithreaded.pu:9     participant "HTTP Thread" as httpthread

https://github.com/mattconte/tlsf
- README.md:18   * Not designed to be thread safe; the user must provide this

https://github.com/travisgoodspeed/md380tools
- applet/src/usb.c:414   //This will be turned off by another thread,
- applet/merge_d02.032.py:261         # Main AMBE2+ thread.
- applet/src/netmon.c:142     int progress2 = progress ; // sample (thread safe)
- applet/src/app_menu.h:113            // may be set in any thread, polled and reset (to -1) in Menu_DrawIfVisible() when done.
- applet/src/irq_handlers.c:1235      // Consumed in another task or thread, see app_menu.c 

https://github.com/charliegerard/Epoc.js
- lib/includes/Iedk.h:9  * None of these API functions are thread-safe.
- build/index.target.mk:39 	-fno-threadsafe-statics \
- build/Release/.deps/Release/obj.target/index/epoc.o.d:1 cmd_Release/obj.target/index/epoc.o := c++ '-DNODE_GYP_MODULE_NAME=index' '-DUSING_UV_SHARED=1' '-DUSING_V8_SHARED=1' '-DV8_DEPRECATION_WARNINGS=1' '-D_DARWIN_USE_64_BIT_INODE=1' '-D_LARGEFILE_SOURCE' '-D_FILE_OFFSET_BITS=64' '-DBUILDING_NODE_EXTENSION' -I/Users/charlieg/.node-gyp/7.10.1/include/node -I/Users/charlieg/.node-gyp/7.10.1/src -I/Users/charlieg/.node-gyp/7.10.1/deps/uv/include -I/Users/charlieg/.node-gyp/7.10.1/deps/v8/include -I../node_modules/nan -I../lib/includes -I../lib  -Os -gdwarf-2 -mmacosx-version-min=10.7 -arch x86_64 -Wall -Wendif-labels -W -Wno-unused-parameter -std=gnu++0x -stdlib=libc++ -fno-rtti -fno-exceptions -fno-threadsafe-statics -fno-strict-aliasing -ObjC++ -MMD -MF ./Release/.deps/Release/obj.target/index/epoc.o.d.raw   -c -o Release/obj.target/index/epoc.o ../epoc.cc
- lib/includes/IEmoStateDLL.h:14  * None of the EmoState interface functions are thread-safe.

https://github.com/zogvm/zogvm
- source_code/zogvm1/sqlite3.h:179 ** ^The sqlite3_threadsafe() function returns zero if and only if

https://github.com/thomasfinch/GammaThingy
- IOKit Headers/OSKext.h:52  * <b>NOTICE:</b> This library is neither thread-safe nor garbage-collection
- IOKit Headers/hid/IOHIDSession.h:59 		pthread_mutex_t lock;	// 24
- IOKit Headers/hid/IOHIDEventSystem.h:61 		pthread_mutex_t mutex;	// 2c

https://github.com/rockowitz/ddcutil
- src/base/per_thread_data.h:1 /** \file per_thread_data.h
- src/base/core_per_thread_settings.h:1 /** \f core_per_thread_settings.h
- src/base/core_per_thread_settings.c:1 /** \f core_per_thread_settings.c */
- src/base/per_thread_data.c:1 /** @file per_thread_data.c
- CHANGELOG.md:17   their pre 2.0 semantics changing the multiplier on the current thread.

https://github.com/apache/mynewt-core
- net/ip/lwip_base/src/apps/snmp/snmp_threadsync.c:3  * SNMP thread synchronization implementation.
- net/ip/lwip_base/include/lwip/apps/snmp_threadsync.h:3  * SNMP server MIB API to implement thread synchronization
- net/ip/lwip_base/doc/ppp.txt:52 for NO_SYS=1 systems or called inside lwIP core thread for NO_SYS=0 systems.
- net/ip/lwip_base/UPGRADING:40   * Added debug helper asserts to ensure threading/locking requirements are met (define
- docs/os/modules/fs/fs.rst:126 All ``fs/fs`` functions are thread safe.

https://github.com/feilipu/Arduino_FreeRTOS_Library
- src/History.txt:394 	  functionality in a more user friendly way - previously the generic thread
- src/tasks.c:374  * For tracking the state of remote threads, OpenOCD uses uxTopUsedPriority

https://github.com/HaxeFoundation/hashlink
- include/libuv/src/win/thread.c:91 /* Verify that uv_thread_t can be stored in a TLS slot. */
- include/libuv/src/threadpool.c:47 static unsigned int idle_threads;
- src/std/thread.c:75 #	include <pthread.h>
- include/mbedtls/include/mbedtls/threading.h:2  * \file threading.h
- CMakeLists.txt:109     src/std/thread.c

https://github.com/tpm2-software/tpm2-tss
- README.md:159 drd      - Performs thread related checks.
- src/tss2-rc/tss2_rc.c:614     static __thread char buf[TSS2_ERR_LAYER_ERROR_STR_MAX + 1];
- src/tss2-tcti/tcti-libtpms.c:29  * for this thread. This is needed because libtpms may call callbacks and these
- src/tss2-tcti/tcti-swtpm.c:312  *  > execute in another thread that polls on a cancel
- git.mk:159 			threadlib.m4			\

https://github.com/qhull/qhull
- src/libqhullcpp/RoadError.cpp:149 //!\todo Redesign with a thread-local stream or a reentrant ostringstream
- html/qh-code.htm:116 <p><b>Note:</b> Reentrant Qhull is <i>not</i> thread safe.   Do not invoke Qhull routines with the same qhT* pointer from multiple threads.
- src/libqhull/libqhull.h:463    Qhull is not multi-threaded.  Global state could be stored in thread-local storage.
- src/libqhull_r/libqhull_r.h:449    This version of Qhull is reentrant, but it is not thread-safe.
- src/Changes.txt:1256    Simplified multithreading and C++ user interface

https://github.com/lyusupov/SoftRF
- software/firmware/source/libraries/nmealib/src/local.h:49 /* locks for multi-threading */
- software/firmware/source/libraries/libmodes/src/mode-s.h:141   pthread_t       reader_thread;
- software/firmware/source/libraries/libmodes/src/sdr/sdr.h:44 // Call periodically from the SDR read thread to update reader thread CPU stats:
- software/firmware/source/SoftRF/src/platform/RPi.cpp:395 pthread_t RPi_EPD_update_thread;
- software/firmware/source/README.md:117 checking for a thread-safe mkdir -p... /bin/mkdir -p

https://github.com/cnlohr/colorchord
- embeddedlinux/dummy_leds.c:11 #include <pthread.h>
- colorchord2/DisplayFileWrite.c:33 	int file_thread_usleep;
- embeddedstm32f407/main.c:20 //Circular buffer for incoming data so we don't spend much time servicing the interrupt and we can handle colorchord in the main thread.
- colorchord2/parameters.c:18 //XXX TODO: Make this thread safe.
- colorchord2/hidapi.c:1074 #include <pthread.h>

https://github.com/Falldog/pyconcrete
- src/pyconcrete_ext/openaes/src/oaes.c:48 typedef OAES_RET (*oaes_thread_func_t)(void *);
- src/pyconcrete_ext/openaes/CHANGELOG:24 * implement multi-threading to improve performance
- src/pyconcrete_exe/pyconcrete_exe.c:67     if (!PyImport_AddModule("dummy_threading")) {
- src/pyconcrete_ext/openaes/CMakeLists.txt:90 	target_link_libraries( oaes oaes_lib pthread )
- test/exe_testcases/test_threading/src/main.py:1 from threading import Thread

https://github.com/DisplayLink/evdi
- module/evdi_painter.c:10 #include "linux/thread_info.h"
- .github/ISSUE_TEMPLATE.md:22 as they will make it hard to read the thread, instead you can use other services

https://github.com/tpm2-software/tpm2-tools
- lib/log.c:9  * Note that the logging library is not thread safe, thus calls on separate
- lib/tpm2_cc_util.c:172      * reentrant and thread safe even though the tools never need thread
- man/tpm2_policynvwritten.1.md:60  tpm2_nvdefine -s 1 -a "authread|policywrite" -p nvrdpass -L nvwrite.policy
- man/tpm2_nvincrement.1.md:80 tpm2_nvdefine -C o -s 8 -a "ownerread|authread|authwrite|nt=1" 0x1500016 -p index
- man/tpm2_changeauth.1.md:122 tpm2_nvdefine   $NVIndex -C o -s 32 -a "authread|authwrite" -L policy.nvchange

https://github.com/emgram769/lighthouse
- src/child.c:4  *  @brief This file contains the logic that is run in a separate thread
- src/inc/child.h:8  *        as a spawned thread.
- src/inc/results.h:51 /* @brief This struct is exclusively used to spawn a thread. */
- src/lighthouse.c:240   pthread_mutex_lock(&global.result_mutex);
- Makefile:19 LDFLAGS+=-lxcb -lxcb-xkb -lxcb-xinerama -lxcb-randr -lcairo -lpthread

https://github.com/smasherprog/screen_capture_lite
- Example_OpenGL/glfw/src/posix_thread.h:28 #include <pthread.h>
- src_cpp/ThreadManager.cpp:29         m_ThreadHandles.resize(monitors.size() + (data->ScreenCaptureData.OnMouseChanged ? 1 : 0)); // add another thread for mouse capturing if needed
- include/internal/ThreadManager.h:8 #include <thread>
- Example_OpenGL/glfw/deps/tinycthread.c:30 #include "tinycthread.h"
- Example_OpenGL/glfw/deps/tinycthread.h:32 * TinyCThread is a minimal, portable implementation of basic threading

https://github.com/drh/cii
- src/thread.c:9 #include "thread.h"
- src/thread-nt.c:9 #include "thread.h"
- makefile:19 THREADS=$(BUILDDIR)thread$O $(BUILDDIR)swtch$O $(BUILDDIR)chan$O
- makefile.nt:12 THREADS=$Bthread-nt$O $Bchan$O
- examples/sort.c:7 #include "thread.h"

https://github.com/pganalyze/pg_query_go
- parser/pg_query.c:8 #include <pthread.h>
- parser/include/parser/parser.h:56 extern PGDLLIMPORT __thread  int backslash_quote;
- parser/include/tcop/tcopprot.h:28 extern PGDLLIMPORT __thread  CommandDest whereToSendOutput;
- parser/include/common/pg_prng.h:29 extern PGDLLIMPORT __thread  pg_prng_state pg_global_prng_state;
- parser/src_pl_plpgsql_src_pl_scanner.c:60 __thread IdentifierLookup plpgsql_IdentifierLookup = IDENTIFIER_LOOKUP_NORMAL;

https://github.com/rose-compiler/rose
- config/ax_boost_thread.m4:1 ##### http://autoconf-archive.cryp.to/ax_boost_thread.html
- src/util/Sawyer/ThreadWorkers.h:15 #include <boost/thread/condition_variable.hpp>
- src/Rose/BinaryAnalysis/Debugger/ThreadId.h:12  *  Identifies a particular thread to be debugged. A thread ID is needed when querying or modifying information that's specific
- tools/CodeThorn/src/woodpecker-src/Threadification.C:70   string newVarRefExp=varRefExp->unparseToString()+"[thread_id]";
- tools/CodeThorn/src/woodpecker-src/Threadification.h:13    that they can be used in threads in parallel. The thread-ids are

https://github.com/triaquae/CrazyEye
- bernard/plugin_apis.py:15     import threading
- backend/interactive.py:102     import threading
- src/openssh-7.3p1/auth-pam.h:45 void sshpam_thread_cleanup(void);
- src/openssh-7.3p1/auth-pam.c:118 #include <pthread.h>
- src/openssh-7.3p1/openbsd-compat/getrrsetbyname.c:64 /* We don't need multithread support here */

https://github.com/npat-efault/picocom
- bsd_notes.txt:37 https://sourceforge.net/p/ser2net/patches/_discuss/thread/8b87fdad/ed37/attachment/ser2net-2.2-cygwin.patch

https://github.com/maxdev1/ghost
- libapi/src/g_exit_thread.cpp:27 void g_exit_thread() {
- documentation/libapi/g_create_thread.adoc:2 [[g_create_thread]]
- libapi/src/g_create_thread.cpp:25  * Thread setup routine, used by the thread creation call. Assumes that the created thread
- applications/windowserver/src/interface/registration_thread.cpp:26 #include "registration_thread.hpp"
- libc/src/errno/errno.c:23 // thread-local instance of the <errno> error variable, initial value 0 (N1548-7.5-3)

https://github.com/eclipse-embed-cdt/eclipse-plugins
- plugins/org.eclipse.embedcdt.templates.core/templates/common/system/include/cmsis/tz_context.h:60 /// Load secure context (called on RTOS thread context switch)
- plugins/org.eclipse.embedcdt.core/src/org/eclipse/embedcdt/core/AltWindowsRegistryStreamReader.java:27  * A thread collecting lines containing a key from a reader into a string.
- plugins/org.eclipse.embedcdt.debug.gdbjtag.core/src/org/eclipse/embedcdt/debug/gdbjtag/core/dsf/GnuMcuProcesses_7_2_1.java:143 	public void terminate(IThreadDMContext thread, final RequestMonitor rm) {
- plugins/org.eclipse.embedcdt.managedbuild.cross.core/plugin.properties:133 option.cpp.compiler.nothreadsafestatics=Do not use thread-safe statics (-fno-threadsafe-statics)
- plugins/org.eclipse.embedcdt.debug.gdbjtag.core/src/org/eclipse/embedcdt/debug/gdbjtag/core/dsf/GnuMcuGdbBackend.java:655 						// Need to do this on the executor for thread-safety

https://github.com/iortcw/iortcw
- SP/code/SDL2/include/SDL_thread.h:22 #ifndef SDL_thread_h_
- SP/code/SDL2/include-2.0.1/SDL_thread.h:22 #ifndef _SDL_thread_h
- SP/code/SDL2/include/SDL_config.h.in:346 /* Enable various threading systems */
- SP/code/SDL2/include/SDL_mutex.h:28  *  Functions to provide thread synchronization primitives.
- SP/code/SDL2/include/SDL_config.h.cmake:362 /* Enable various threading systems */

https://github.com/trailofbits/cb-multios
- challenges/FSK_BBS/src/bbs.c:32 typedef struct thread {
- tools/common.py:3 import thread
- challenges/REDPILL/README.md:23 The vulnerability (CVE-2014-3153) lies in the Linux futex ("Fast Userspace Mutex") syscall interface.  Futexes are used by glibc (and others) to implement locking primitives across threads and processes.  The vulnerability was considered particularly severe due to its accessibility within sandboxed environments.  The interface cannot be easily restricted via e.g. seccomp_bpf() because its availability is expected and relied upon in widespread code.
- include/libpov/pcre_globals.c:42 PCRE is thread-clean and doesn't use any global variables in the normal sense.
- tools/cb-replay-pov.py:39 import threading

https://github.com/ervanalb/lens
- README.md:36 *lens* is single-threaded and uses asynchronous I/O through *tornado*. Many operations are implemented as tornado coroutines.

https://github.com/sensepost/hostapd-mana
- crackapd/crackapd.py:22 #	Thread for threading
- crackapd/crackapd.conf:24 # Thread Count - this will control how many threads are spawned.
- src/l2_packet/l2_packet_ndis.c:13  * WinXP version of the code uses overlapped I/O and a single threaded design
- src/l2_packet/l2_packet_winpcap.c:2  * WPA Supplicant - Layer2 packet handling with WinPcap RX thread
- src/eap_server/tncs.c:20 /* TODO: TNCS must be thread-safe; review the code and add locking etc. if

https://github.com/dosgo/ngrok-c
- include/openssl/crypto.h:276 /* Adds thread number to the memory checking information */
- include/openssl/err.h:356 void ERR_remove_thread_state(const CRYPTO_THREADID *tid);
- include/openssl/bio.h:710 /* We might want a thread-safe interface too:
- build.bat:21 rem %CC%  %OPATH%\main.o %OPATH%\sendmsg.o %OPATH%\cJSON.o %OPATH%/opensslbio.o  %OPATH%\base64.o %OPATH%\udp.o %OPATH%\nonblocking.o  -o  %OPATH%\ngrokc.exe -L"lib"  "libpolarssl-win32.a"  -lws2_32  -lpthread
- Makefile.mbedtls:8 	$(CXX) -s $(LIBS) -o ngrokc -lpthread -lmbedtls -lmbedx509 -lmbedcrypto -ldl -lz

https://github.com/tishion/mmLoader
- src/mmLoader/mmLoader.c:912   // here we need to process the TLS data for all running threads, this is very heavy and danger operation

https://github.com/vectorgraphics/asymptote
- ax_pthread.m4:2 #        http://www.gnu.org/software/autoconf-archive/ax_pthread.html
- main.cc:88   if(gl::glthread)
- Makefile.in:26 # We have to remove OpenGL, threading, GC, etc from this.
- configure.ac:9 m4_include([ax_pthread.m4])
- cudareflect/tinyexr/README.md:65   - [x] C++11 thread loading

https://github.com/a1ext/labeless
- deploy/labeless/backend/ollydbg20/threads.py:5 #    threads.py - High level API to play with threads related stuff.
- labeless_x64dbg/pluginsdk/yara/yara/threading.h:45 #include <pthread.h>
- labeless_ida/rpcthreadworker.cpp:9 #include "rpcthreadworker.h"
- labeless_olly/labeless.h:15 #include <thread>
- deploy/labeless/backend/ollydbg20/utils.py:23 import threads

https://github.com/punesemu/puNES
- src/core/thread_def.h:24 #include <pthread.h>
- src/core/emu_thread.h:30 EXTERNC BYTE emu_thread_init(void);
- src/core/emu_thread.c:20 #include "thread_def.h"
- src/extra/7z1900/CPP/Windows/Thread.h:14   ::CThread thread;
- src/video/gfx_thread.c:20 #include "thread_def.h"

https://github.com/arduino/ArduinoCore-samd
- cores/arduino/hooks.c:23  * libraries or sketches that supports cooperative threads.
- platform.txt:48 compiler.cpp.flags=-mcpu={build.mcu} -mthumb -c -g {compiler.optimization_flags} {compiler.warning_flags} -std=gnu++11 -ffunction-sections -fdata-sections -fno-threadsafe-statics -nostdlib --param max-inline-insns-single=500 -fno-rtti -fno-exceptions -MMD
- cores/arduino/pulse_asm.S:116 @ -fsync-libcalls -fthread-jumps -ftoplevel-reorder -ftrapping-math
- cores/arduino/USB/USBCore.cpp:657 		/* memcopy could be safer in multi threaded environment */

https://github.com/hyrathb/mentohust
- CocoaMento-Src/mentothread.cpp:1 #include "mentothread.h"
- CocoaMento-Src/CocoaMento.pro:9 CONFIG += qthread
- CocoaMento-Src/mento.h:19 #include "mentothread.h"
- CocoaMento-Src/mento.cpp:64     mainthread=new MentoThread(cv->Config());

https://github.com/rpm-software-management/rpm
- rpmio/rpmlog.c:8 #include <pthread.h>
- docs/manual/buildprocess.md:41 number of processes/threads to use based on detected resources and
- docs/librpm/Doxyheader.h:13     thread. Some central resources have rudimentary protection to support
- macros.in:372 #		"w7T16.xzdio"	xz level 7 using 16 threads
- rpmio/rpmio.c:526 /* Parse thread enablement string. T or T0 means autodetection */

https://github.com/martincohen/Punity
- lib/stb_image.h:71         the allocator, you'll have to store it in a global or a thread-local
- lib/stb_vorbis.c:79 // Individual stb_vorbis* handles are not thread-safe; you cannot decode from
- lib/mingw/d3d10.h:135 #ifndef __ID3D10Multithread_FWD_DEFINED__

https://github.com/Tarsnap/scrypt
- libcperciva/util/warnp.c:68 		/* Stop other threads writing to stderr. */

https://github.com/jcloudpub/speedy
- chunkserver/spy_work.c:21 	size_t nr_threads       = spy_atomic_read(&wq->nr_threads);
- chunkserver/spy_agent.h:22 void spy_start_agent_thread();
- chunkserver/spy_server.c:1006 static void spy_wq_thread_done(aeEventLoop *el, int fd, void *priv, int mask)
- docker_registry_speedy_driver/config_sample.yml:182     elliptics_io_thread_num: _env:ELLIPTICS_IO_THREAD_NUM:2
- chunkserver/Makefile:8 	$(CC) -g -O0 -pthread -o $@ $^

https://github.com/mist64/hvdos
- hvdos.c:108 	/* create a vCPU instance for this thread */

https://github.com/vinszent/gnome-twitch
- src/gt-resource-downloader.c:196         g_thread_pool_push(dl_pool, data, NULL);
- src/gt-irc.c:78     GThread* worker_thread_recv;
- src/gt-twitch.c:685     g_task_run_in_thread(task, all_streams_cb);
- src/gt-channel.c:129      * thread but just as a safety pre-caution */
- player-backends/player-backend-mpv-opengl/gt-player-backend-mpv-opengl.c:127 /* NOTE: This is so that we notify properies on the GLib main thread,

https://github.com/leonindy/camel
- Dengine/tengine/src/os/unix/ngx_thread.h:20 #include <ngx_freebsd_rfork_thread.h>
- Dengine/tengine/src/os/unix/rfork_thread.S:12  * rfork_thread(3) - rfork_thread(flags, stack, func, arg);
- Dengine/tengine/src/os/unix/ngx_pthread_thread.c:12 static ngx_uint_t   nthreads;
- Dengine/tengine/src/os/unix/ngx_freebsd_rfork_thread.c:12  * The threads implementation uses the rfork(RFPROC|RFTHREAD|RFMEM) syscall
- Dengine/tengine/src/os/unix/ngx_freebsd_rfork_thread.h:18 #define ngx_log_pid    ngx_thread_self()

https://github.com/ali1234/raspi-teletext
- render.c:2 #include <pthread.h>
- Makefile:3 LDFLAGS+=-L$(SDKSTAGE)/opt/vc/lib/ -lbcm_host -pthread

https://github.com/jvburnes/node9
- libuv-1.6.1/src/win/thread.c:111 /* Verify that uv_thread_t can be stored in a TLS slot. */
- libuv-1.6.1/src/unix/.deps/libuv_la-thread.Plo:1 src/unix/libuv_la-thread.lo: src/unix/thread.c include/uv.h \
- libuv-1.6.1/docs/src/threading.rst:2 .. _threading:
- libuv-1.6.1/docs/src/threadpool.rst:2 .. _threadpool:
- libuv-1.6.1/src/threadpool.c:47 static unsigned int nthreads;

https://github.com/rapid7/mettle
- mettle/src/log.h:54 #define log_init_flush_thread
- mettle/configure.ac:57 		AC_SUBST([PLATFORM_LDADD], ['-lws2_32 -lwinpthread -static --static'])
- mettle/src/log.c:17 #include <pthread.h>
- mettle/src/console.c:4 #include <pthread.h>
- mettle/extensions/sniffer/sniffer.c:116 	struct captured_packets *current; // Current packets captured by the sniffing thread.

https://github.com/mysql/mysql-proxy
- src/chassis-event-thread.c:47 #include "chassis-event-thread.h"
- src/chassis-event-thread.h:57  * a event-thread
- doc/chassis.txt:29 @li @subpage section-threaded-io 
- CMakeLists.txt:63 		# now set gmodule and gthread to whatever glib is, those libraries come as a bundle anyway
- src/Makefile.am:88 	chassis-event-thread.c \

https://github.com/Mieze/IntelMausiEthernet
- README.md:5 Please refer to the driver's thread on insanelymac.com
- IntelMausiEthernet/IOEthernetInterface.h:90     thread_call_t    _inputEventThreadCall; // inputEvent() thread call
- IntelMausiEthernet/netdev.c:4824  * e1000e_update_phy_task - work thread to update phy
- IntelMausiEthernet/IONetworkInterface.h:337     enqueue the packet before returning. The handler executes on the thread
- IntelMausiEthernet/IONetworkController.h:301     Drivers must implement an output function that is thread safe, or use

https://github.com/lexxmark/winflexbison
- common/misc/glthread/threadlib.c:1 /* Multithreading primitives.
- common/misc/glthread/tls.c:1 /* Thread-local storage in multithreaded situations.
- common/misc/glthread/lock.c:1 /* Locking in multithreaded situations.
- common/misc/glthread/lock.h:1 /* Locking in multithreaded situations.
- common/misc/error.c:303   /* We do not want this call to be cut short by a thread

https://github.com/james34602/JamesDSPManager
- Main/DSPManager/jni/main/cpthread.c:1 #include "cpthread.h"
- Main/DSPManager/jni/main/cpthread.h:6 typedef void pthread_attr_t;
- Main/CLI/main.c:77 } threadTest;
- Main/libjamesdsp/jni/jamesdsp/jdsp/Effects/eel2/ns-eel.h:62 // host should implement these (can be empty stub functions if no VM will execute code in multiple threads at once)
- Main/libjamesdsp/jni/jamesdsp/jdsp/Effects/eel2/ns-eel-int.h:124 #include "cpthread.h"

https://github.com/freedict/fd-dictionaries
- freedict-editor/src/main.c:21   // g_thread_supported() should be renamed to g_thread_initialized()
- kur-eng/kur-eng.txt:3266 nex	thread
- eng-rom/eng-rom.text:1735 :thread:
- freedict-editor/src/xml.c:173  * context is saved in pctxt, so that it can be accessed from another thread.
- freedict-editor/src/callbacks.c:15 #pragma error "libxml2 needs to have threads enabled!"

https://github.com/intel/QAT_Engine
- qat_hw_multi_thread_inf.c:40  * @file multi_thread_qaememutils.c
- qat_prov.txt:193 QAT_R_POLLING_THREAD_CREATE_FAILURE:283:polling thread create failure
- docs/limitations.md:46 * There is a limitation with thread specific USDM: *memory allocated in one thread
- qat_fork.h:58  *   This function is registered, by the call to pthread_atfork(), as
- README.md:83 * Support for thread specific memory to avoid locks (QAT_HW Version 1.7 & 1.8 only)

https://github.com/lekkas/c-algorithms
- test/Makefile:19 GT_CXXFLAGS += -w -pthread

https://github.com/XboxDev/nxdk
- lib/winapi/thread.c:8 #include <processthreadsapi.h>
- lib/xboxrt/vcruntime/threadsafe_statics.c:6 // Derived from ReactOS CRT code to provide thread safe statics initialization
- lib/winapi/Makefile:19 	$(NXDK_DIR)/lib/winapi/thread.c \
- tools/cxbe/Xbe.h:75         uint32 dwTLSAddr;                  // 0x012C - thread local storage directory address
- lib/winapi/fiber.c:8 #include <threads.h>

https://github.com/df8oe/UHSDR
- mchf-eclipse/basesw/ovi40-h7/Drivers/CMSIS/Include/tz_context.h:59 /// Load secure context (called on RTOS thread context switch)
- mchf-eclipse/drivers/ui/ui_driver.h:264 #define	THREAD_TIMING_DELAY					1				// Delay, in 100ths of a second, between thread tasks
- mchf-eclipse/basesw/ovi40-h7/Drivers/CMSIS/RTOS2/Template/cmsis_os1.c:34 osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument) {
- mchf-eclipse/basesw/mcHF/Inc/ffconf.h:159 /   1: Enable LFN with static working buffer on the BSS. Always NOT thread-safe.
- mchf-eclipse/drivers/freedv/ofdm.c:1525   Ensure this is called in the same thread as ofdm_sync_state_machine().

https://github.com/hpc/ior
- src/utilities-gpu.cu:18   size_t pos = blockIdx.x * blockDim.x + threadIdx.x;
- src/aiori-S3-4c.c:256   /* This is supposed to be done before *any* threads are created.
- src/utilities.c:365         static char   threadSafeBuff[32]; /* "must be at least 26 characters long" */

https://github.com/metal-crow/Dark-Souls-PvP-AI
- Dark Souls AI C/TestSpace.c:61     HANDLE thread = CreateThread(NULL, 0, ListentoContinue1, NULL, 0, NULL);
- Dark Souls AI C/MindRoutines.c:174     HANDLE* defense_mind_thread = CreateThread(NULL, 0, DefenseMindProcess, NULL, 0, NULL);
- Dark Souls AI C/Source.c:52     //load neural network and threads
- Dark Souls AI C/MindRoutines.h:1 //Since the neural networks are threaded, they cannot interface with the primary logic directly.

https://github.com/arduino/ArduinoCore-arc32
- system/libarc32_arduino101/framework/src/infra/port.c:282                  * due to lack of background thread on this implementation
- cores/arduino/hooks.c:23  * libraries or sketches that supports cooperative threads.

https://github.com/Wargus/wargus
- StormLib/src/lzma/C/Threads.h:1 /* Threads.h -- multithreading library
- StormLib/src/lzma/C/Threads.c:1 /* Threads.c -- multithreading library
- StormLib/src/lzma/C/LzmaEnc.h:47   SZ_ERROR_THREAD - errors in multithreading functions (only for Mt version)
- StormLib/src/lzma/C/LzFindMt.h:1 /* LzFindMt.h -- multithreaded Match finder for LZ algorithms
- wartool.cpp:2668 static HANDLE threadStdout;

https://github.com/andikleen/simple-pt
- simple-pt.c:450 		// mm can be NULL in some rare cases (e.g. kthreads)

https://github.com/robertdavidgraham/pemcrack
- test.dict:1714 thread

https://github.com/AndyGrant/Ethereal
- src/thread.h:79     int index, nthreads;
- src/thread.c:25 #include "thread.h"
- README.md:30 The size of the hash table in megabytes. For analysis the more hash given the better. For testing against other engines, just be sure to give each engine the same amount of Hash. 64MB/thread/minute is generally a good value. For testing against non-classical engines, reach out to me and I will make a recommendation.
- src/uci.h:21 #include <pthread.h>
- src/uci.c:20 #include <pthread.h>

https://github.com/ossc-db/pg_rman
- pgut/pgut.c:1928  * execute on a *different thread* than the main one, so we need to do

https://github.com/clpsz/linux-ipcs
- POSIX_sem/thread_sem.c:2 #include <pthread.h>
- POSIX_sem/Makefile:2 LDFLAGS = -lpthread
- POSIX_sem/README.md:5 ./multi_threads_sem
- IPC_mutex/main_good.c:7 #include <pthread.h>
- fifo/Makefile:2 LDFLAGS = -lpthread

https://github.com/mudongliang/LinuxFlaw
- CVE-2017-9194/README.md:20 READ of size 1 at 0x7f6e03dfea81 thread T0
- CVE-2017-7533/poc.c:6  * $ gcc -o exploit exploit.c -lpthread
- CVE-2015-7547/CVE-2015-7547/CVE-2015-7547-poc.py:25 import threading
- CVE-2016-10093/README.md:19 ==20438==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x7fef2adde803 at pc 0x00000051befa bp 0x7ffd3ee26b50 sp 0x7ffd3ee26b48WRITE of size 16 at 0x7fef2adde803 thread T0#0 0x51bef9 in cpStripToTile /tmp/portage/media-libs/tiff-4.0.7/work/tiff-4.0.7/tools/tiffcp.c:1171:11
- CVE-2008-2950/poc.py:122 monothreaded) is an easier target.

https://github.com/SimFlowCFD/RapidCFD-dev
- wmake/rules/General/mplibSYSTEMOPENMPI:4 PINC       = $(shell mpicc --showme:compile | sed 's/-pthread/-Xcompiler -pthread/g')

https://github.com/pengutronix/genimage
- m4/attributes.m4:109      dnl FreeBSD (et al.) does not complete linking for shared objects when pthreads

https://github.com/buzz-lang/Buzz
- src/buzz/argos/buzz_controller.h:239    static pthread_mutex_t TRAJECTORY_MUTEX;
- src/buzz/argos/buzz_controller.cpp:12 pthread_mutex_t CBuzzController::TRAJECTORY_MUTEX;
- src/testing/testexperiment.argos:8     <system threads="0" />
- src/testing/test_takeoff_divide_flock.argos:8     <system threads="0" />

https://github.com/tizian/Cendric2
- ext/lua/src/lua.h:46 /* thread status */
- ext/lua/src/lfunc.c:75 	if (!isintwups(L)) {  /* thread not in list of threads with upvalues? */
- src/Screens/LoadingScreen.cpp:15 	m_blackRect.setFillColor(g_resourceManager->getConfiguration().isMultithreading ?
- ext/lua/src/lfunc.h:21 /* test whether thread is in 'twups' list */
- ext/lua/src/ldo.c:111 	if (L->errorJmp) {  /* thread has an error handler? */

https://github.com/yoyofx/NetCore_YOYOFx
- XUnitTestProject1/bin/Debug/netcoreapp2.0/XUnitTestProject1.deps.json:1484       "path": "system.threading/4.3.0",
- XUnitTestProject1/obj/project.assets.json:5089       "path": "system.threading/4.3.0",
- AspNetCore/YOYOFx.Extensions.DependencyInjection/obj/project.assets.json:2767       "path": "system.threading/4.0.11",

https://github.com/powturbo/Turbo-Run-Length-Encoding
- README.md:23 - Single thread with [TurboBench](https://github.com/powturbo/TurboBench)
- include_/conf.h:106 #define THREADLOCAL     __declspec(thread)

https://github.com/tenvick/hugula
- Client/build/lua-5.3.3/src/lua.h:46 /* thread status */
- Client/build/lua-5.1.5/src/lgc.c:131   GCObject **p = &g->mainthread->next;
- Client/Assets/XLua/Src/LuaTable.cs:275         [Obsolete("not thread safe!", true)]
- Client/build/lua-5.3.5/src/lfunc.c:75   if (!isintwups(L)) {  /* thread not in list of threads with upvalues? */
- Client/build/lua-5.3.3/src/lfunc.h:21 /* test whether thread is in 'twups' list */

https://github.com/NordicSemiconductor/pc-ble-driver
- include/common/internal/log.h:51 // to a separate thread.
- src/common/transport/uart_transport.cpp:43 #include <thread>
- src/common/transport/serialization_transport.cpp:107         // To prevent this, lock eventMutex in this thread, let eventThread
- include/sd_api_v5/ble.h:440  * The application is free to choose whether to call this function from thread mode (main context) or directly from the
- src/common/transport/h5_transport.cpp:70 #include <thread>

https://github.com/mingw-w64/mingw-w64
- mingw-w64-crt/crt/cxa_thread_atexit.c:8 int __cxa_thread_atexit(dtor_fn dtor, void *obj, void *dso);
- mingw-w64-libraries/winpthreads/src/thread.h:34 typedef struct _pthread_v _pthread_v;
- mingw-w64-libraries/winpthreads/src/thread.c:29 #include "pthread.h"
- mingw-w64-libraries/winpthreads/include/pthread_time.h:43 /* Clock support in threads are available.  */
- mingw-w64-libraries/winpthreads/include/pthread_unistd.h:28   Basic support for POSIX threads is available. The functions

https://github.com/quantum/esos
- Makefile.in:943 	--disable-threads --disable-libatomic --disable-libgomp \
- ChangeLog:2130 	an issue with stunnel was discovered where it continually consumes memory until the daemon exits -- issue is related to the resource cleanup with pthreads; we will work around this bug by using fork as the threading model in stunnel (instead of the default pthreads)
- etc/lvm/lvm.conf:642 	# per logical thread. Note that there is a memory overhead of 15%.
- etc/lessfs.cfg:28 # When BACKGROUND_DELETE=on lessfs will spawn a thread to delete
- misc/linux-5.4.229.patch:452 Subject: md: unlock mddev before reap sync_thread in action_store

https://github.com/jeffhammond/STREAM
- stream.f:113 !$    INTEGER omp_get_num_threads
- stream.c:141  *         number of threads/cores used when the resulting "stream_omp" program

https://github.com/Galleondragon/qb64
- internal/c/mingw32/lib/gcc/i686-w64-mingw32/8.1.0/include/c++/thread:1 // <thread> -*- C++ -*-
- internal/c/mingw32/opt/lib/python2.7/imaplib.py:745     def thread(self, threading_algorithm, charset, *search_criteria):
- internal/c/mingw64/opt/lib/python2.7/dummy_thread.py:1 """Drop-in replacement for the thread module.
- internal/c/mingw64/opt/include/tclThread.h:3  * tclthread.h --
- internal/c/parts/audio/out/src/alcThread.c:34     HANDLE thread;

https://github.com/esp8266/Basic
- libraries/Expression_Parser/README.md:25 The library is also thread safe, allowing multiple parsers to be operated (on  different inputs) simultaneously.
- libraries/Expression_Parser/expression_parser_string.h:28  The library is also thread safe, allowing multiple parsers to be operated (on  different inputs) simultaneously.
- libraries/expression_parser_string/expression_parser_string.h:28  The library is also thread safe, allowing multiple parsers to be operated (on  different inputs) simultaneously.

https://github.com/jduck/asus-cmd
- README.md:132 Eric Sauvageau (@RMerl) recommends firewalling port 9999 off. For more information see [his post](http://forums.smallnetbuilder.com/showthread.php?t=21774) on the Small Net Builder forum.

https://github.com/EddyRivasLab/hmmer
- release-notes/RELEASE-3.4.md:15 and nhmmscan no longer use multithreading by default, and instead use
- src/p7_config.h.in:28  *             MB/thread.
- src/hmmpgmd_shard.h:18   uint32_t	  my_shard;				/* which shard is this thread responsible for? */
- configure.ac:72 m4_include([easel/m4/ax_pthread.m4])
- src/hmmdwrkr.c:13 #include <pthread.h>

https://github.com/guaxiao/renderer.gua
- SDL-1.2.15/include/SDL/SDL_thread.h:23 #ifndef _SDL_thread_h
- SDL-1.2.15/WhatsNew:107 	Added a function to return the thread ID of a specific thread:
- SDL-1.2.15/include/SDL/SDL.h:41 #include "SDL_thread.h"
- SDL-1.2.15/include/SDL/SDL_timer.h:67  * The timer callback function may run in a different thread than your
- SDL-1.2.15/include/SDL/SDL_mutex.h:27  *  Functions to provide thread synchronization primitives

https://github.com/jintiao/some-mmorpg
- server/config:4 thread = 8
- 3rd/lua-cjson/manual.txt:162   multi-threaded application. Requires the _pthreads_ library.
- 3rd/lua-cjson/fpconv.c:38 /* Lua CJSON assumes the locale is the same for all threads within a
- 3rd/lua-cjson/CMakeLists.txt:10 option(MULTIPLE_THREADS "Support multi-threaded apps with internal fpconv - recommended" ON)
- 3rd/lua-cjson/manual.html:702   multi-threaded application. Requires the <em>pthreads</em> library.

https://github.com/licstar/compare
- embedding/glove.c:29 #include <pthread.h>
- embedding/order.c:19 #include <pthread.h>
- embedding/lbl.c:19 #include <pthread.h>
- embedding/nnlm.c:19 #include <pthread.h>
- embedding/word2vec.c:19 #include <pthread.h>

https://github.com/TritonDataCenter/mdb_v8
- README.md:75   add-ons, and cases where the threads that could provide that support are
- docs/usage.md:171     threading model: native threads
- test/standalone/gcore_self.js:113 			 * know for sure that this thread will not be running

https://github.com/Nukem9/SwissArmyKnife
- src/findcrypt/findcrypt.cpp:14 #include <thread>
- src/pluginsdk/bridgelist.h:18 \brief A list object. This object is NOT thread safe.
- src/zlib/crc32.c:19   one thread to use crc32().
- src/zlib/infback.c:79    used for threaded applications, since the rewriting of the tables and virgin
- src/pluginsdk/bridgemain.h:845     char threadName[MAX_THREAD_NAME_SIZE];

https://github.com/suloku/gcmm
- source/aram/sidestep.c:16 #include <ogc/lwp_threads.h>

https://github.com/Netflix/dial-reference
- client/DialDiscovery.h:31 #include <pthread.h>
- server/mongoose.c:57 #include <pthread.h>
- server/url_lib.h:107  * thread-safe.
- server/quick_ssdp.c:278         printf("Unable to start SSDP master listening thread.");
- server/makefile:24 	$(CC) -Wall -Werror -Wl,-rpath,. -g $(OBJS) -ldl -lpthread -lrt -L. -lnfCallbacks -o dialserver

https://github.com/alibaba/erlang_multi_pollset
- README.md:16 os thread handling events in the same time.
- c__src/ev.c:384 /* on linux, we can use a (slow) syscall to avoid a dependency on pthread, */
- c__src/raw_socket.cpp:203     ErlNifTid aux_thread;
- c__src/ev.h:664 /* advanced stuff for threading etc. support, see docs */
- COPYING:14 os thread handling events in the same time.

https://github.com/mtrojnar/stunnel
- src/sthreads.c:47 NOEXPORT void thread_id_init(void);
- src/vc.mak:7 #   http://social.msdn.microsoft.com/forums/en-US/Vsexpressvc/thread/c5c3afad-f4c6-4d27-b471-0291e099a742/
- configure.ac:50 AC_MSG_NOTICE([**************************************** thread model])
- src/log.c:384         tid=stunnel_thread_id();
- src/tls.c:47 /**************************************** thread local storage */

https://github.com/tendra/tendra
- lexi/src/out/dot.c:30  * This is not thread-safe.
- tdfc2/src/cpp/stdlib/exception.cc:20  * will need to be modified for a multi-threaded environment.
- trans/src/mips/dump_distr.c:182      dumped ; thread different dumps to same rsc via pt; delivers bool to
- doc/doc/reports/java-feasibility1/java-and.htm:254 <li>A Java runtime in ANDF. The current runtime is more mutable than portable. But with new standards such as COSE (and latter on Posix Pthreads), it might be possible to have a generic runtime that could be distributed in ANDF.
- sid/doc/userguide/c-infofile.xml:404 			the generated parser thread-safe, since each variable may be passed

https://github.com/VrayoSystems/vtrunkd
- configure.in:130 dnl Check for pthread
- packages/openwrt/Makefile:25   DEPENDS:=+kmod-tun +libpthread +flex +bison +librt
- configure:4723 { $as_echo "$as_me:${as_lineno-$LINENO}: checking for library containing pthread_create" >&5

https://github.com/CANopenNode/CANopenSocket
- examples/basicDevice/Makefile:56 LDFLAGS += -pthread
- docs/group__CO__socketCAN.html:119 <p>CANopenNode runs as a set of non-blocking functions. It can run in single or multiple threads. Best approach for RT IO device can be with two threads:</p><ul>
- examples/basicDevice/CO_application.h:76  * Function is called cyclically from realtime thread at constant intervals.
- examples/basicDevice/README.md:36 1. Whole program runs in single thread. This is default for `canopend`. This uses less system resources.
- docs/index.html:122 <li><a href="#flowchart-of-a-typical-canopennode-implementation">Multithreaded, real-time</a></li>

https://github.com/golanlevin/ExperimentalCapture
- docs/multispectral.md:363 As X-rays can reveal the interior structure of objects and people, we expect to see artists exploring this form of 'revelation'. For example, here is a Rose by Bryan Whitney, from this [*Survey of X-Ray Photographic Art*](http://www.theapricity.com/forum/showthread.php?147702-X-Ray-Photographic-Art-Seeing-Humans-Nature-Objects-Beneath-The-Surface):

https://github.com/libhugetlbfs/libhugetlbfs
- NEWS:41 * Disable malloc per-thread cache for heap shrinking tests
- HOWTO:317 applications which carefully place their threads on particular nodes
- tests/mmap-cow.c:41 	"* of threads map the same file with the MAP_PRIVATE flag.  The    *\n"\
- tests/shm-fork.c:33 	"* Test shared memory behavior when multiple threads are attached  *\n"\
- tests/slbpacaflush.c:23  * masks in the thread_struct, copy to the PACA, then do slbies on

https://github.com/ucscGenomeBrowser/kent
- src/htslib/cram/thread_pool.h:32  * This file implements a thread pool for multi-threading applications.
- src/htslib/cram/thread_pool.c:42 #include "cram/thread_pool.h"
- src/oneShot/threadExp/cacheQueue.h:2  * ParaFlow uses these to implement the thread synchronization
- src/oneShot/threadExp/threadExp.c:1 /* threadExp - Some pthread experiments. */
- src/oneShot/threadTime/threadTime.c:1 /* threadTime - Measure some thread timing.. */

https://github.com/khovratovich/Argon2
- v.1.1/Argon2i/ref/genkat.cpp:73 void Benchmark()  //Benchmarks Argon with salt length 16, password length 128, tcost 3, and different threads and mcost
- Source/C99/Argon2/argon2-core.c:28 #include "pthread.h"
- Source/C99/Argon2/argon2-core.h:73  * Used to evaluate the number and location of blocks to construct in each thread
- v.1.1/Argon2i/opt-sse/argon2i-opt-sse.cpp:18 #include <thread>
- v.1.2/v.1.2/Argon2d/opt-sse/argon2d-opt-sse.cpp:18 #include <thread>

https://github.com/jpcy/ioq3-renderer-bgfx
- code/bx/include/bx/thread.h:34 		/// Create and initialize thread.
- code/bx/src/thread.cpp:8 #include <bx/thread.h>
- code/bx/include/bx/macros.h:80 #	if BX_CLANG_HAS_FEATURE(cxx_thread_local) \
- code/bx/src/os.cpp:37 #		include <pthread.h> // mach_port_t
- code/bgfx/src/shader_dxbc.h:579 		bool threadsInGroup;

https://github.com/devkitPro/wut
- include/coreinit/thread.h:7 #include "threadqueue.h"
- libraries/wutstdc++/wut_gthread_thread.cpp:1 #include "wut_gthread.h"
- libraries/wutnewlib/wut_thread_specific.h:3 typedef enum __wut_thread_specific_id {
- libraries/wutnewlib/wut_thread_specific.c:1 #include "wut_thread_specific.h"
- libraries/wutstdc++/wut_gthread.cpp:1 #include "wut_gthread.h"

https://github.com/EasyIOS/EasyIOS-Swift
- Pod/Classes/Extend/EUI/Defines.h:97 // prefix header.  Remember, any implementation you provide *must* be thread
- Pod/Classes/Private/Gumbo/parser.h:18 // threaded through basically every internal function in the library.

https://github.com/goldknife6/fuckOS
- user/primespipe.c:3 // See http://swtch.com/~rsc/thread/.

https://github.com/rickyrockrat/parcellite
- po/ro.po:249 #~ msgid "Could not create thread for executed action\n"
- po/pl.po:28 msgid "Could not create thread for executed action\n"
- po/sv.po:28 msgid "Could not create thread for executed action\n"
- configure.ac:89 # AC_CHECK_LIB(pthread, pthread_create)
- src/main.c:68 #include <pthread.h>

https://github.com/mist-devel/mist-binaries
- cores/fpgagen/README.md:48 https://forum.digitpress.com/forum/showthread.php?134961-NES-SNES-Genny-Games-with-Battery-Back-up-Save-feature&p=1614576&viewfull=1#post1614576
- cores/fpgagen/README_original.txt:126   This forum's threads contain very valuable information on Genesis emulation.

https://github.com/open-power/petitboot
- m4/gpgme.m4:161   AC_MSG_CHECKING(for GPGME pthread - version >= $min_gpgme_version)

https://github.com/rssnsj/openwrt-xiaomi-mini
- ImageBuilder/Makefile:19 	libpthread librt libubus-lua libuci-lua lua luci luci-app-firewall luci-app-qos \
- config-xiaomi-mini:1162 CONFIG_PACKAGE_libpthread=y

https://github.com/yaoguais/phpng-xhprof
- phpng_xhprof.c:55 #    include <mach/thread_policy.h>

https://github.com/CESNET/libnetconf2
- README.md:173 This value limits the maximum number of threads that can concurrently access
- src/log.c:16 #define _GNU_SOURCE /* pthread_rwlock_t */
- CMakeLists.txt:98 set(MAX_PSPOLL_THREAD_COUNT 6 CACHE STRING "Maximum number of threads that could simultaneously access a ps_poll structure")
- src/log.h:59  * Also, you need to set this for every thread unlike libnetconf verbosity.
- src/session.h:239  * @brief Free all the dynamically allocated thread-specific libssl/libcrypto

https://github.com/silver13/h8mini-acro
- README.md:23 Firmware thread featuring flashing info: [rcgroups.com](http://www.rcgroups.com/forums/showthread.php?t=2512604)

https://github.com/ethereum/ethash
- src/python/core.c:174     // TODO: Multi threading?
- test/c/CMakeLists.txt:9     # use multithreaded boost libraries, with -mt suffix

https://github.com/Seeed-Studio/Wio_Link
- handlers.py:35 import threading
- node_main/polarssl/check_config.h:446 #error "POLARSSL_THREADING_C defined, single threading implementation required"
- node_main/polarssl/config.h:1093  * Provide your own alternate threading implementation.

https://github.com/amphp/ext-uv
- TODO.md:17 we don't support thread. so this function does not need.
- php_uv.h:149 	void ***thread_ctx;
- README.md:2135 execute callbacks in another thread (requires Thread Safe enabled PHP)
- php_uv.c:1504 	TSRMLS_FETCH_FROM_CTX(uv->thread_ctx);

https://github.com/stweil/OSXvnc
- OSXvnc-server/mousecursor.c:18 #include "pthread.h"
- Bundles/Jaguar/JaguarExtensions.m:23 #include <pthread.h>
- Bundles/Echoware/DataChannels.h:12 #include "pthread.h"
- Bundles/Echoware/APISocket/APISocket.h:177 	//routine thread handle
- Bundles/Echoware/DataChannels.cpp:5 #include "pthread.h"

https://github.com/grahamedgecombe/nginx-ct
- ngx_mail_ssl_ct_module.c:61     NULL,                        /* init thread */
- ngx_stream_ssl_ct_module.c:64     NULL,                          /* init thread */
- ngx_ssl_ct_module.c:41     NULL,                   /* init thread */
- ngx_http_ssl_ct_module.c:65     NULL,                        /* init thread */

https://github.com/briankendall/forceFullDesktopBar
- forceFullDesktopBar.xcodeproj/project.pbxproj:100 		77D6732327270D300057E3FD /* libpthread.tbd */ = {isa = PBXFileReference; lastKnownFileType = "sourcecode.text-based-dylib-definition"; name = libpthread.tbd; path = usr/lib/libpthread.tbd; sourceTree = SDKROOT; };

https://github.com/ndt-project/ndt
- tfw/server.py:4 import threading
- src/testoptions.c:11 #include <pthread.h>
- tfw/client.py:4 import threading
- config/mkinstalldirs:69 # Solaris 8's mkdir -p isn't thread-safe.  If you mkdir -p a/b and
- ndt-flashpolicyd:16 import thread

https://github.com/ThirteenAG/III.VC.SA.IV.Project2DFX
- includes/rwsdk/rpdbgerr.h:135    This functionality is disabled by default because it is not thread-safe
- includes/rwsdk/rwcore.h:3339 /* Create the Direct3D device as multithread safe */

https://github.com/globalzon/yaamp
- stratum/db.cpp:306 			pthread_t thread;
- stratum/coind.h:22 //	pthread_t thread;
- stratum/job.cpp:204 pthread_mutex_t g_job_mutex;
- stratum/remote.h:33 	pthread_t thread;
- stratum/coind.cpp:144 //	pthread_cond_signal(&coind->cond);

https://github.com/numato/samplecode
- RelayAndGPIOModules/USBRelayAndGPIOModules/android/usb/USBGenie/Readme.md:38 * Move all IO calls to separate thread
- FPGA/ExpansionModules/100MEthernetModule/sdk/SaturnV3Ethernet_bsp/microblaze_0/include/lwip/sys.h:70 #define sys_thread_new(n,t,a,s,p)
- FPGA/ExpansionModules/100MEthernetModule/sdk/SaturnV3Ethernet_bsp/microblaze_0/include/lwip/tcpip.h:52  * tcpip_thread after processing a message. */
- FPGA/ExpansionModules/100MEthernetModule/sdk/SaturnV3Ethernet_bsp/microblaze_0/include/lwip/api_msg.h:60     for a netconn in another thread context (mainly used to process netconns
- FPGA/ExpansionModules/100MEthernetModule/sdk/SaturnV3Ethernet_bsp/microblaze_0/include/arch/sys_arch.h:95 struct sys_thread;

https://github.com/mpaperno/aq_flight_control
- src/targets/thumb_crt0.s:21  *   If defined, thread mode will be configured to use the process stack if
- README.md:103 2. Use `-jX` for faster (parallel) compilation, where "X" equals the number of CPUs/cores/threads on your computer.  If you have `make` version 4+, also add the `-O` option for better progress output during compilation. Eg. `make -j8 -O` for a quad-core CPU.

https://github.com/hackedteam/driver-win32
- CORE_Driver/deepfreeze.c:32 // Suspend current thread for a number of milliseconds

https://github.com/hackedteam/vector-silent
- vector-default/DropperHeader.h:66 	// used to pass full qualified path to core thread

https://github.com/altera-opensource/u-boot-socfpga
- tools/buildman/builderthread.py:10 import threading
- doc/README.sched:4   'sched.c' provides an very simplistic multi-threading scheduler.
- lib/smbios-parser.c:194 	{offsetof(struct smbios_type4, thread_count),
- board/intel/Kconfig:24 	  a 64-bit quad-core, single-thread, Intel Atom processor, along with
- tools/binman/state.py:12 import threading

https://github.com/hackedteam/vector-ipa
- src/threads.c:2     MODULE -- thread handling
- include/threads.h:2 /* $Id: threads.h 790 2009-08-03 14:34:04Z alor $ */
- src/main.c:14 #include <threads.h>
- src/proxy.c:11 #include <threads.h>
- src/debug.c:10 #include <threads.h>

https://github.com/allwinner-zh/media-codec
- sunxi-cedarx/SOURCE/omxil/omx_vdec.h:36 #include <pthread.h>
- sunxi-cedarx/SOURCE/omxil/omx_vdec.cpp:36 #include <pthread.h>
- sunxi-cedarx/SOURCE/omxil/include/OMX_Core.h:541         call, but should queue them and refill them in another thread.  There
- sunxi-cedarx/SOURCE/base/Makefile.am:13 LOCAL_LIB = -lpthread
- sunxi-cedarx/SOURCE/common/ve.c:29 #include <pthread.h>

https://github.com/friendlyarm/linux-3.4.y
- fs/btrfs/async-thread.h:22 struct btrfs_worker_thread;
- arch/arm/include/asm/thread_info.h:2  *  arch/arm/include/asm/thread_info.h
- kernel/kthread.c:1 /* Kernel thread helper functions.
- include/linux/kthread.h:3 /* Simple interface for creating and stopping kernel threads without mess. */
- arch/mips/include/asm/thread_info.h:1 /* thread_info.h: MIPS low-level thread information

https://github.com/BelledonneCommunications/mediastreamer2
- README.md:113 `MS_AUDIO_PRIO`, `MS_VIDEO_PRIO` : define the scheduling policy of the audio and video threads (MSTicker objects). Possible values are 'NORMAL', 'HIGH', 'REALTIME'.
- src/base/msasync.c:77 static bool_t ms_worker_thread_run_task(MSWorkerThread *obj, MSTask *task, int do_it) {
- src/voip/turn_tcp.h:30 #include <thread>
- src/utils/msjava.c:29 #include <pthread.h>
- src/voip/turn_tcp.cpp:483 		// the waiting thread only to block again

https://github.com/frischzenger/yolo-windows
- src/coco.c:89     pthread_t load_thread = load_data_in_thread(args);
- src/data.h:3 #include <pthread.h>
- src/data.c:543 void *load_thread(void *ptr)
- src/stb_image.h:68         the allocator, you'll have to store it in a global or a thread-local
- README.md:11 and compile the codes with X64 Release mode. You may need pthread-windows while compiling and linking

https://github.com/iOpen/stm32
- src/os/main/Queue.h:39 		else // If queue is full, dequeue one item and then enqueue. TODO: Is this a thread-safe operation? Is mutex required?
- src/transport/lwip/doc/rawapi.txt:16 contexts (threads).
- src/transport/lwip/doc/sys_arch.txt:13 lwIP functionality, multiple threads support can be implemented in the
- src/transport/lwip/src/api/tcpip.c:3  * Sequential API Main thread module
- src/transport/lwip/src/netif/slipif.c:258  * The SLIP input thread.

https://github.com/rehsack/rtl8189ES_linux
- include/rtl8821a_xmit.h:152 thread_return XmitThread8821AS(thread_context context);
- include/osdep_service_xp.h:60 	typedef PKTHREAD _thread_hdl_;
- include/osdep_service_ce.h:60 typedef HANDLE 	_thread_hdl_;
- include/drv_types_sdio.h:59 	_thread_hdl_ sys_sdio_irq_thd;
- hal/hal_intf.c:427 /*	Start specifical interface thread		*/

https://github.com/xhjcehust/LFTPool
- tpool.c:20 #include <pthread.h>
- tpool.h:9 void *tpool_init(int num_worker_threads);
- Makefile:2 	gcc -o testtpool -g test.c tpool.c -lpthread
- test.c:65 static enum test_return test_one_thread(void)

https://github.com/qieangel2013/zqf
- zqf.c:50 /* True global resources - no need for thread safety here */

https://github.com/K0-0K/book
- tools_chain/Ubuntu11.10中搭建交叉编译环境（arm-linux-gcc-4.6.1版本）:37 glibc-linuxthreads-2.5.tar.bz2 
- JAVA/使用 NetBeans IDE开发 JFC_Swing应用程序/netbeansswing/files/ImagesTableModel.java:138         // leave multithreading for later
- JAVA/使用 NetBeans IDE开发 JFC_Swing应用程序/netbeansswing/index.html:234 	<LI><P STYLE="margin-bottom: 0in"><A HREF="http://java.sun.com/jdc/technicalArticles/Threads/swing/">Multithreading
- uCos-II/VC6.0 + MSAM.611下uCOS-II扩展源代码/m-ix86pm/MyTask/Release/MyTask.map:245  0002:00000394       ??_C@_0CN@FPEG@R6017?$AN?6?9?5unexpected?5multithread?5@ 00008394     LIBC:crt0msg.obj
- JAVA/使用 NetBeans IDE开发 JFC_Swing应用程序/netbeansswing/solution/exercise_7/src/j1viewer/ImagesTableModel.java:144         // leave multithreading for later

https://github.com/loboris/OrangePI-Kernel
- linux-3.4/tools/perf/util/thread.h:8 struct thread {
- linux-3.4/fs/btrfs/async-thread.h:22 struct btrfs_worker_thread;
- linux-3.4/tools/perf/util/thread.c:6 #include "thread.h"
- linux-3.4/tools/perf/util/thread_map.c:11 #include "thread_map.h"
- linux-3.4/tools/perf/util/thread_map.h:7 struct thread_map {

https://github.com/seL4/seL4_tools
- cmake-tool/helpers/cmakerepl:17     # Calculate a thread id to allow running multiple instances
- elfloader-tool/src/arch-arm/smp_boot.c:124     /* main CPU has thread id == 0 */

https://github.com/vbooter/DDoS-Scripts
- UDP.c:5 #include <pthread.h>
- 50x.c:2 #include <pthread.h>
- SUDP.c:7 		gcc udp.c -pthread
- ARME.c:1 #include <pthread.h>
- RUDY.c:1 #include <pthread.h>

https://github.com/JoeMerten/Stm32-Tools-Evaluation
- STM32Cube_FW_F4_V1.9.0/Drivers/CMSIS/Documentation/RTOS/html/structos_thread_def__t.html:75 $(document).ready(function(){initNavTree('structos_thread_def__t.html','');});
- STM32Cube_FW_F4_V1.9.0/Drivers/CMSIS/Documentation/RTOS/html/group___c_m_s_i_s___r_t_o_s___thread_mgmt.html:68 $(document).ready(function(){initNavTree('group___c_m_s_i_s___r_t_o_s___thread_mgmt.html','');});
- Conclusion-02/src/Main.cxx:49     virtual void threadFunction() override {
- STM32Cube_FW_F4_V1.9.0/Projects/STM324xG_EVAL/Applications/FreeRTOS/FreeRTOS_ThreadCreation/readme.txt:30 This directory contains a set of source files that implement a thread creation
- Readme.md:173     - http://www.openstm32.org/tiki-view_forum_thread.php?comments_parentId=1438

https://github.com/ssavvides/tpch-spark
- dbgen/HISTORY:416            (Note: updates are still single-threaded; -C is cleared 

https://github.com/leixiaohua1020/simplest_libvlc_example
- libvlc_include/vlc/plugins/vlc_threads.h:2  * vlc_threads.h : threads implementation for the VideoLAN client
- libvlc_include/vlc/libvlc.h:86  * thread. The resulting string is valid until another error occurs (at least
- libvlc_include/vlc/plugins/vlc_vout.h:44  * This module describes the programming interface for video output threads.
- libvlc_include/vlc/plugins/vlc_input.h:215 typedef struct input_thread_private_t input_thread_private_t;
- libvlc_include/vlc/plugins/vlc_config.h:56  * Input thread configuration

https://github.com/mengning/menu
- Makefile:5 CC_PTHREAD_FLAGS			 = -lpthread
- linktable.c:25 #include <pthread.h>
- linktable.h:25 #include <pthread.h>

https://github.com/leixiaohua1020/simplest_ffmpeg_audio_player
- simplest_audio_play_sdl2/include/sdl/SDL_thread.h:22 #ifndef _SDL_thread_h
- simplest_audio_play_sdl2/include/sdl/SDL_mutex.h:28  *  Functions to provide thread synchronization primitives.
- simplest_audio_play_sdl2/include/sdl/SDL_messagebox.h:114  *  \note This function should be called on the thread that created the parent
- simplest_ffmpeg_audio_player/include/libavutil/buffer.h:61  * @note Referencing and unreferencing the buffers is thread-safe and thus
- simplest_audio_play_sdl2/include/sdl/SDL_config.h:161 /* Enable various threading systems */

https://github.com/baoshi/ESP-RTOS-Paho
- paho/MQTTClient.c:323 // only used in single-threaded mode where one command at a time is in process

https://github.com/informationextraction/fuzzer-android
- trinity-android/jni/libxml/include/libxml/threads.h:2  * Summary: interfaces for thread handling
- dbi/instruments/playback_thread_pause_plt/hijack_func/hooker_thumb.c~:71   log("\t\t\t------ record thread --------------\n");
- dbi/instruments/functions_coverage_array/hijack_func/tmp/libcfu-0.03/src/cfuthread_queue.c:8 #include "cfuthread_queue.h"
- dbi/instruments/functions_coverage_array/hijack_func/tmp/libcfu-0.03/include/cfuthread_queue.h:51 	/* cfuthread_queue provides a way to serialize requests for a
- trinity-android/jni/Documentation/Known-bugs.txt:19 - occasionally a thread exits after 0 syscalls. Find out why.

https://github.com/wkennington/linux-firmware
- carl9170fw/tools/carlu/src/usb.c:76 static int carlusb_event_thread(void *_ar)
- carl9170fw/tools/carlu/src/usb.h:27 #include "SDL_thread.h"
- carl9170fw/tools/carlu/src/carlu.h:27 #include "SDL_thread.h"

https://github.com/ghostlander/nsgminer
- compat.h:32 #include <pthread.h>
- SCRYPT-README:91 only guaranteed up to the power of 2 that most closely matches the thread
- driver-ztex.c:60 	ztex->threads = 1;
- driver-x6500.c:29 extern pthread_mutex_t stats_lock;
- driver-opencl.h:25 extern char *set_thread_concurrency(char *arg);

https://github.com/phatware/WritePadSDK
- iOS/Shared/WritePanel/WritePadInputPanel.m:512 // this function is called from secondary thread
- Android/sample_astudio/app/src/main/jni/interface.c:1181 		// __android_log_print(ANDROID_LOG_INFO, "callback_handler: failed to get JNI environment, assuming native thread");
- iOS/Shared/WriteAnywhere/InkCollectorView.m:277 		// terminate ink thread
- Android/sample_astudio/app/src/main/java/com/phatware/android/recotest/RecognizerService.java:65         // Start up the thread running the service.  Note that we create a
- WindowsSDK/WinRT_CPPLayer/WinRT_CPPLayer/CPPLayer.cpp:517 	// It is recommended to call HWR_RecognizeInkData from a background thread.

https://github.com/google/multichase
- README:22      thread:
- pingpong.c:17 #include <pthread.h>
- fairness.c:18 #include <pthread.h>
- permutation.h:31 // similarly when we perform a parallel chase with multiple threads we don't
- run_multiload.sh:43 THREAD_AFFINITY_ENABLED=1  # enables use of tasket/numactl for thread control

https://github.com/CyanogenMod/android_kernel_yu_msm8916
- fs/btrfs/async-thread.c:19 #include <linux/kthread.h>
- fs/btrfs/async-thread.h:22 struct btrfs_worker_thread;
- tools/perf/util/thread_map.c:11 #include "thread_map.h"
- drivers/staging/speakup/thread.c:1 #include <linux/kthread.h>
- arch/arm/include/asm/thread_info.h:2  *  arch/arm/include/asm/thread_info.h

https://github.com/BelledonneCommunications/ortp
- configure.ac:151 		PTHREAD_LDFLAGS="-pthread"
- src/netsim.c:53 void ortp_network_simulator_stop_thread(OrtpNetworkSimulatorCtx *sim) {
- CMakeLists.txt:44 set(WITH_THREAD_STACK_SIZE "0" CACHE STRING "Set thread stack size (0 is the OS default).")
- src/scheduler.c:59 	if (sched->thread_running) {
- src/scheduler.h:43 	ortp_thread_t thread;

https://github.com/libvirt/libvirt-python
- examples/guest-vcpus/guest-vcpu-daemon.py:9 import threading
- libvirt-override.py:25         # virGetLastError() is now thread local
- libvirt-override.c:1581     int niothreads, cpunum;
- libvirt-override-api.xml:306       <return type='char *' info="list of IOThreads information including the iothread_id, the cpumap, and the cpumap length for each iothread_id."/>
- tests/test_aio.py:81         # thread.

https://github.com/gemc/source
- futureDevelopments:78 - is atof thread safe?
- utilities/string_utilities.h:99 // atof may also not be thread safe
- changeLog:2132    memory leak in G4PrimaryParticle destructor, see "Particle" forum thread 405.

https://github.com/Shellntel/backdoors
- dragon.c:91    // Start the control dispatcher thread for our service

https://github.com/mercury-hpc/mercury
- src/util/mercury_thread.c:8 #include "mercury_thread.h"
- src/util/mercury_thread.h:19 typedef HANDLE hg_thread_t;
- src/util/mercury_thread_spin.c:8 #include "mercury_thread_spin.h"
- src/util/mercury_thread_pool.h:12 #include "mercury_thread.h"
- src/util/mercury_thread_pool.c:8 #include "mercury_thread_pool.h"

https://github.com/Borf/browedit
- browedit/Menu_Actions.cpp:13 #include <thread>
- browedit/browedit.pro:7 CONFIG += threads
- brolib/Makefile:2 LIBS = -lpthread -lGL -lGLEW
- browedit/BrowEdit.h:220 	void loadMap(std::string fileName, bool threaded = true);
- assets/configs/config.borf.json:12   "threadedrendering": true,

https://github.com/groupgets/purethermal1-firmware
- Inc/pt.h:43  * Protothreads implementation.
- Inc/pt-sem.h:29  * This file is part of the protothreads library.
- Inc/lc.h:29  * This file is part of the protothreads library.

https://github.com/priyankvex/Easy-Ocr-Scanner-Android
- easy_ocr_library/libs/tess-two/jni/libpng/contrib/visupng/cexcept.h:58     context for each thread that uses exceptions.  It would certainly
- easy_ocr_library/libs/tess-two/jni/com_googlecode_tesseract_android/src/ChangeLog:53   * Thread-safety! Moved all critical globals and statics to members of the appropriate class. Tesseract is now thread-safe (multiple instances can be used in parallel in multiple threads.) with the minor exception that some control parameters are still global and affect all threads.
- easy_ocr_library/libs/tess-two/jni/com_googlecode_tesseract_android/src/viewer/svutil.h:21 // classes, which are used for thread/process creation & synchronization
- easy_ocr_library/src/main/java/com/wordpress/priyankvex/easyocrscannerdemo/EasyOcrScanner.java:42         ImageProcessingThread thread = new ImageProcessingThread(this.mOcrScannerListener,
- easy_ocr_library/libs/tess-two/jni/com_googlecode_tesseract_android/src/viewer/svutil.cpp:21 // thread/process creation & synchronization and network connection.

https://github.com/xiph/theora
- examples/splayer.c:85 /* These are declared volatile because they are written by a different thread than the reader. */
- examples/player_example.c:305 /* clean quit on Ctrl-C for SDL and thread shutdown as per SDL example

https://github.com/google-deepmind/lab
- q3map2/common/threads.c:26 // pthreads extensions like pthread_mutexattr_settype
- engine/code/bspc/l_threads.c:24 #include "l_threads.h"
- docs/users/issues.md:21 * OSMesa must be compiled without thread-local storage (TLS) if the environment
- q3map2/common/mutex.c:24 #include "qthreads.h"
- public/file_reader_types.h:40 // Implementations of these functions must provide the following thread-safety

https://github.com/antirez/kilo
- kilo.c:178 	"static_cast","template","this","thread_local","throw","true","try",

https://github.com/tsl0922/ttyd
- src/pty.h:39   uv_thread_t tid;
- src/pty.c:111   uv_thread_join(&process->tid);
- snap/snapcraft.yaml:31       - LDFLAGS: "-pthread"

https://github.com/shellphish/how2heap
- glibc_ChangeLog.md:10 - tcache (per-thread cache) is introduced (enabled in ubuntu-build since 2.27)
- glibc_2.23/house_of_gods.c:13  * the attacker with an arbitrary write against the thread_arena symbol of
- README.md:37 | [house_of_gods.c](glibc_2.24/house_of_gods.c) | <a href="https://wargames.ret2.systems/level/how2heap_house_of_gods_2.24" title="Debug Technique In Browser">:arrow_forward:</a> | A technique to hijack a thread's arena within 8 allocations | < 2.27 | | |
- glibc_2.24/house_of_gods.c:13  * the attacker with an arbitrary write against the thread_arena symbol of

https://github.com/googlecreativelab/anypixel
- firmware/display/src/fifo.c:22 // These are only threadsafe with a single reader thread and single writer thread
- firmware/controller/src/uart.c:186         // make sure writes to frame_available counter are thread safe
- firmware/controller/src/fifo.c:22 // These are only threadsafe with a single reader thread and single writer thread

https://github.com/Ralim/IronOS
- source/Core/Threads/POWThread.cpp:20 // Small worker thread to handle power (PD + QC) related steps
- source/Core/Threads/PIDThread.cpp:59     // This is a call to block this thread until the ADC does its samples
- source/Core/BSP/BSP_Power.h:15 // Called periodically in the movement handling thread
- Documentation/DebugMenu.md:117 This indicates the high water mark for the stack for the GUI thread. The smaller this number is, the less headroom we have in the stack.
- source/Core/Src/main.cpp:4  * Main.cpp bootstraps the device and then hands over to FreeRTOS and the threads

https://github.com/winfsp/winfsp
- doc/Queued-Events.asciidoc:11 After a day or two of doing this and being stumped I finally had a lightbulb moment: what if the issue is not with my code, but with how the OS schedules threads? Sure enough I had xperf trace context switches and found that on good runs the OS would context switch my file system threads relatively rarely; on bad runs the OS would context switch my threads excessively.
- tst/ntptfs/lfs.c:26     static __declspec(thread) HANDLE Event;
- src/dll/library.c:56         fsp_fuse_finalize_thread();
- inc/fuse/winfsp_fuse.h:230 #include <pthread.h>
- doc/WinFsp-as-an-IPC-Mechanism.asciidoc:173 WinFsp owes its excellent performance primarily to the design of the I/O Queues. I/O Queues borrow heavily from the design of I/O completion ports and schedule threads in a similar manner:

https://github.com/saminiir/level-ip
- Makefile:1 CPPFLAGS = -I include -Wall -Werror -pthread
- src/ipc.c:9 static pthread_mutex_t lock = PTHREAD_MUTEX_INITIALIZER;
- src/main.c:23 static pthread_t threads[4];
- Documentation/development.md:35 Refer to https://sourceware.org/gdb/current/onlinedocs/gdb/Threads.html for debugging with threads.
- include/ipc.h:30 struct ipc_thread {

https://github.com/kn007/silk-v3-decoder
- silk/Makefile:50 CFLAGS	+= -Wall -enable-threads -O3

https://github.com/bol-van/zapret
- mdig/mdig.c:1 // multi thread dns resolver
- nfq/crypto/aes.c:30  *  and once built are read-only and thread safe. The "gcm_initialize" function
- nfq/crypto/gcm.c:107   *  MUST be called during system initialization before a multi-threading
- config:29 # number of parallel threads for domain list resolves
- ipset/def.sh:142   "$MDIG" --family=$1 --threads=$MDIG_THREADS $cmd

https://github.com/shadowsocks/simple-obfs
- m4/ax_tls.m4:11 #   Provides a test for the compiler support of thread local storage (TLS)
- src/utils.c:130              * cannot be considered thread safe. */

https://github.com/networkprotocol/yojimbo
- windows/mbedtls/threading.h:2  * \file threading.h
- windows/mbedtls/entropy.h:41 #include "mbedtls/threading.h"
- windows/mbedtls/ssl_cache.h:31 #include "mbedtls/threading.h"
- windows/sodium/crypto_box.h:5  * THREAD SAFETY: crypto_box_keypair() is thread-safe,
- windows/mbedtls/hmac_drbg.h:35 #include "mbedtls/threading.h"

https://github.com/networkprotocol/netcode
- windows/sodium/crypto_box.h:5  * THREAD SAFETY: crypto_box_keypair() is thread-safe,
- windows/sodium/crypto_sign.h:5  * THREAD SAFETY: crypto_sign_keypair() is thread-safe,

https://github.com/p-gen/smenu
- config.h.in:169 /* Enable POSIX-compatible threading on Solaris.  */

https://github.com/chobits/ngx_http_proxy_connect_module
- ngx_http_proxy_connect_module.c:250     NULL,                                   /* init thread */

https://github.com/ionescu007/SimpleVisor
- nt/shvos.c:142     // If the DPC happened to have interrupted either the idle thread or system
- shvvmxhv.c:291         // and therefore not a thread running with a systemwide page directory.

https://github.com/bjornbytes/lovr
- src/modules/thread/thread.h:5 // cleaned up when the thread module is destroyed.
- src/modules/thread/thread.c:1 #include "thread/thread.h"
- src/api/l_thread.c:4 #include "thread/thread.h"
- src/api/l_thread_thread.c:3 #include "thread/thread.h"
- src/api/l_thread_channel.c:2 #include "thread/thread.h"

https://github.com/google/boringssl
- crypto/thread.c:57 #include <openssl/thread.h>
- crypto/thread_win.c:66 static thread_local_destructor_t g_destructors[NUM_OPENSSL_THREAD_LOCALS];
- crypto/thread_none.c:39 static void *g_thread_locals[NUM_OPENSSL_THREAD_LOCALS];
- crypto/thread_pthread.c:22 #include <pthread.h>
- include/openssl/thread.h:82 // BoringSSL is thread-safe by default, but some old code calls these functions

https://github.com/elfmz/far2l
- WinPort/src/sudo/sudo_askpass_ipc.h:34 	pthread_t _trd;
- WinPort/src/sudo/sudo_askpass_ipc.cpp:55 		if (pthread_create(&_trd, NULL, sThread, this) != 0) {
- utils/src/Threaded.cpp:9 // OSX has no pthread_timedjoin_np, so here goes bicycle for timed thread waiting
- multiarc/src/formats/7z/C/Threads.h:1 /* Threads.h -- multithreading library
- multiarc/src/formats/7z/C/Threads.c:1 /* Threads.c -- multithreading library

https://github.com/DanBloomberg/leptonica
- src/pixalloc.c:167  *          is not thread-safe.  When used, there must be only one thread
- src/jpegio.c:83  *    To avoid race conditions and make these functions thread-safe in
- src/utils2.c:616  *      (1) This is a thread-safe implementation of strtok.
- version-notes.html:1296        Use of strtok_r() for thread safety.
- src/pix.h:473  *                (b) The application is multi-threaded.  Because the clone

https://github.com/quiet/quiet
- src/ring_atomic.c:10     pthread_mutex_init(&r->reader_mutex, NULL);
- src/portaudio_decoder.c:20     pthread_mutex_destroy(&dec->reflock);
- include/quiet/portaudio_decoder.h:12     pthread_t consume_thread;
- include/quiet.h:36  * libquiet was compiled with pthread, then this error will be specific
- src/error.c:4 static pthread_once_t quiet_last_error_once = PTHREAD_ONCE_INIT;

https://github.com/avem-labs/Avem
- libs/STM32_USB-FS-Device_Lib_V4.0.0/Libraries/CMSIS/Documentation/RTOS/html/structos_thread_def__t.html:99   initNavTree('structos_thread_def__t.html','');
- libs/STM32_USB-FS-Device_Lib_V4.0.0/Libraries/CMSIS/Documentation/RTOS/html/group___c_m_s_i_s___r_t_o_s___thread_mgmt.html:92   initNavTree('group___c_m_s_i_s___r_t_o_s___thread_mgmt.html','');
- libs/STM32_USB-FS-Device_Lib_V4.0.0/Libraries/CMSIS/Documentation/RTOS/html/navtree.js:13         [ "Thread Management", "group___c_m_s_i_s___r_t_o_s___thread_mgmt.html", null ],
- libs/STM32_USB-FS-Device_Lib_V4.0.0/Libraries/CMSIS/RTOS/cmsis_os.h:13  *    osKernelStart added, optional feature: main started as thread
- README.md:8 [Details & Videos](http://bbs.5imx.com/forum.php?mod=viewthread&tid=1227960&extra=page%3D1)

https://github.com/mcu-tools/mcuboot
- ext/mbedtls-asn1/include/mbedtls/threading.h:2  * \file threading.h
- ci/sim_run.sh:47   # psa crypto tests require single thread mode
- ptest/src/main.rs:3 //! mcuboot simulator is strictly single threaded, as there is a lock around running the C startup
- boot/zephyr/main.c:110 #warning "The log internal thread for log processing can't transfer the log"\
- docs/release-notes.d/zephyr-usb.md:2 - Zephyr: Add USB CDC serial recovery check that now causes a build failure if the main thread priority is below 0 (cooperative thread), this would prevent USB CDC from working as the driver would not have been able to fire callbacks.

https://github.com/ARM-software/CMSIS_5
- CMSIS/RTOS/Template/CPP/Thread.h:12 /*! The Thread class allow defining, creating, and controlling thread functions in the system. */
- CMSIS/RTOS2/RTX/Template/Thread.c:4  *      Thread 1 'Thread_Name': Sample thread
- CMSIS/RTOS/Template/CPP/Thread.cpp:9     // The actual fields of os_thread_def are implementation specific in every CMSIS-RTOS
- CMSIS/RTOS/RTX/UserCodeTemplates/Thread.c:5  *      Thread 1 'Thread_Name': Sample thread
- CMSIS/DoxyGen/RTOS2/src/cmsis_os2_Thread.txt:6 \brief Define, create, and control thread functions.

https://github.com/christinaa/rpi-open-firmware
- arm_chainloader/lib_armv6/arm_bzero.s:77 	/* we need some registers, avoid r7 (frame pointer) and r9 (thread register) */
- arm_chainloader/drivers/fatfs/00history.txt:239   Fixed wrong media change can lead a deadlock at thread-safe configuration.
- broadcom/hardware_vc4.h:1442    /* Registers for the threading unit */
- arm_chainloader/drivers/fatfs/ffconf.h:107 /   1: Enable LFN with static working buffer on the BSS. Always NOT thread-safe.
- arm_chainloader/drivers/fatfs/ff.c:37 #error Static LFN work area cannot be used at thread-safe configuration

https://github.com/aldostools/webMAN-MOD
- _Projects_/VshFpsCounter/src/Utils/Std.hpp:5 #include <sys/ppu_thread.h>
- include/init/thread.h:2 #define SYS_PPU_THREAD_NONE        (sys_ppu_thread_t)NONE
- _Projects_/libs/libunrar-ps3-master/source/threadpool.cpp:4 #include "threadmisc.cpp"
- _Projects_/libs/libunrar-ps3-master/source/threadmisc.cpp:7   return pthread_mutex_init(CritSection,NULL)==0;
- _Projects_/libs/libunrar-ps3-master/include/threadpool.hpp:5 const uint MaxPoolThreads=1; // For single threaded version.

https://github.com/wilix-team/iohook
- libuiohook/m4/ax_pthread.m4:2 #        http://www.gnu.org/software/autoconf-archive/ax_pthread.html
- src/iohook.cc:11 #include <pthread.h>
- libuiohook/configure.ac:249 		# We only need pthreads if we are using the Demo.
- libuiohook/src/demo_hook_async.c:38 #include <pthread.h>
- libuiohook/src/x11/system_properties.c:38 #include <pthread.h>

https://github.com/armink/SFUD
- demo/stm32f2xx_rtt/RT-Thread-2.1.0/src/thread.c:2  * File      : thread.c
- demo/stm32f2xx_rtt/RT-Thread-2.1.0/src/irq.c:27 #include <rtthread.h>
- demo/stm32f2xx_rtt/RT-Thread-2.1.0/src/idle.c:23  * 2010-11-10     Bernard      add cleanup callback function in thread exit.
- demo/stm32f2xx_rtt/RT-Thread-2.1.0/src/timer.c:23  * 2006-04-29     Bernard      implement thread timer
- demo/stm32f2xx_rtt/RT-Thread-2.1.0/src/clock.c:23  * 2006-05-27     Bernard      add support for same priority thread schedule

https://github.com/AltraMayor/gatekeeper
- include/coro.h:56  * 2008-04-04 New (but highly unrecommended) pthreads backend.
- lib/launch.c:205 			 * this thread is running on the main lcore.
- include/gatekeeper_cps.h:121 	 *	@coro_root:	The main thread of CPS.
- lib/coro.c:502 /* pthread backend                                                           */
- main/main.c:364 	 * rte_eal_init(), which is called next, creates all threads that

https://github.com/Mesa3D/mesa
- src/util/u_thread.h:35 #include "c11/threads.h"
- src/util/u_thread.c:8 #include "util/u_thread.h"
- include/android_stub/system/thread_defs.h:33      * A thread priority should be chosen inverse-proportionally to
- src/c11/threads.h:2  * C11 <threads.h> emulation library
- src/c11/impl/threads_win32_tls_callback.cpp:6 #include "threads_win32.h"

https://github.com/libtcod/libtcod
- buildsys/autotools/m4/ax_pthread.m4:2 #        https://www.gnu.org/software/autoconf-archive/ax_pthread.html
- src/libtcod/sys.h:61 /* thread stuff */
- src/CMakeLists.txt:9 set(LIBTCOD_THREADS ON CACHE BOOL "If true then older thread functions are enabled by libtcod.")
- src/libtcod/sys.cpp:130 // thread stuff
- python/libtcodpy/cprotos.py:156     # _lib.TCOD_thread_new.restype=TCOD_thread_t

https://github.com/intel/isa-l
- doc/functions.md:171 files.  Optionally igzip can be compiled with multi-threaded compression.  See
- make.inc:194 # Check for pthreads
- programs/igzip_cli.c:44 # include <pthread.h>
- programs/igzip.1:62 \fB\-T\fR, \fB\-\-threads\fR <n>
- Release_notes.txt:149 * New multi-threaded compression option for igzip cli tool

https://github.com/isislovecruft/library--
- music theory & sheet music/Op. 27 No. 2: Sonata quasi una Fantasia - Beethoven.pdf:81     <span class="yjs-footer-item"><a data-orig-proto="http" data-orig-ref="anquan.baidu.com/bbs/forum.php?mod=viewthread&tid=371363&page=1&extra=" id="support_link" data-translate="help" target="_blank">帮助中心</a></span>

https://github.com/2ndQuadrant/pglogical
- pglogical_sync.h:48 #define SYNC_STATUS_SYNCWAIT	'w'		/* Table sync is waiting to get OK from main thread. */
- pglogical_sync.c:1248 	/* Wait for ack from the main apply thread. */
- pglogical_dependency.c:169 /* threaded list of ObjectAddresses, for recursion detection */

https://github.com/jattach/jattach
- README.md:17  - **datadump**        : show heap and thread summary
- src/windows/jattach.c:39 static DWORD WINAPI remote_thread_entry(LPVOID param) {
- src/posix/jattach_openj9.c:52     } else if (strcmp(cmd, "threaddump") == 0) {
- src/posix/psutil.c:49 // java (1234, #threads: 12)
- src/posix/jattach.c:77                "    load  threaddump   dumpheap  setflag    properties\n"

https://github.com/ianlancetaylor/libbacktrace
- ttest.c:33 /* Test using the libbacktrace library from multiple threads.  */
- backtrace.h:75    accessed by multiple threads simultaneously, and the library will
- ltmain.sh:4299     thread_safe=no
- dwarf.c:188   DW_AT_threads_scaled = 0x62,
- libtool.m4:4268   _LT_TAGVAR(thread_safe_flag_spec, $1)=

https://github.com/cfig/Android_boot_image_editor
- lazybox/src/main/kotlin/cfig/lazybox/sysinfo/Pidstat.kt:17         var show_thread: Boolean = true,
- lazybox/src/main/resources/logback.xml:4             <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
- src/resources/init.debug.rc:11     # exec - logd log -- /system/bin/logcat -L -b all -v threadtime -v usec -v printable -D -f /data/misc/logd/logcat -r 1024 -n 256
- bbootimg/src/main/resources/logback.xml:4             <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>

https://github.com/Qihoo360/huststore
- hustdb/sync/module/threadpool.cpp:1 #include "threadpool.h"
- hustdb/db/server/module/mdb/src/thread.c:13 #include <pthread.h>
- hustdb/db/server/module/binlog/thread.h:4 #include <pthread.h>
- hustmq/ha/nginx/src/os/unix/ngx_thread.h:17 #include <pthread.h>
- hustdb/db/server/module/binlog/thread.cpp:1 #include "thread.h"

https://github.com/managarm/mlibc
- sysdeps/lyre/generic/thread.S:2 .global __mlibc_thread_entry
- sysdeps/aero/generic/thread.cpp:2 #include <mlibc/thread-entry.hpp>
- sysdeps/aero/include/mlibc/thread-entry.hpp:5 extern "C" void __mlibc_start_thread(void);
- options/posix/include/pthread.h:7 // TODO: pthread is not required to define size_t.
- sysdeps/managarm/aarch64/thread_entry.S:3 .global __mlibc_start_thread

https://github.com/leecher1337/ntvdmx64
- ntvdmpatch/experimental/haxm/v86/haxm/i386/thread.c:11     This file contains functions for tracking and manipulating threads
- ntvdmpatch/src/ldntvdm/ldntvdm/xpwrap.c:21 	LARGE_INTEGER   CreateTime;             // thread creation time
- ntvdmpatch/experimental/haxm/v86/haxm/i386/sources:4              i386\thread.c \
- ntvdmpatch/experimental/haxm/minnt/v86/haxm/x86/sources.inc:4              x86\thread.c \
- ntvdmpatch/src/ldntvdm/ldntvdm/conspal.c:63 		// Queue APC to main thread and try again

https://github.com/openresty/stream-lua-nginx-module
- t/StapThread.pm:43 M(http-lua-user-thread-spawn) {
- t/127-uthread-kill.t:29         local t, err = ngx.thread.spawn(f)
- src/ngx_stream_lua_uthread.c:6  * src/subsys/ngx_subsys_lua_uthread.c.tt2
- t/094-uthread-exit.t:22 === TEST 1: exit in user thread (entry thread is still pending to run)
- src/ngx_stream_lua_uthread.h:6  * src/subsys/ngx_subsys_lua_uthread.h.tt2

https://github.com/moonlight-stream/moonlight-chrome
- main.cpp:3 #include <pthread.h>
- moonlight.hpp:18 #include "ppapi/utility/threading/simple_thread.h"
- ports/include/curl/easy.h:57  * be transferred. It is useful in multithreaded applications when you can run
- auddec.cpp:10 // ensures AudioPlayerSampleCallback and AudDecDecodeAndPlaySample are each only active on one thread
- ports/include/openssl/crypto.h:284 /* Adds thread number to the memory checking information */

https://github.com/MiKTeX/miktex
- Libraries/3rd/mpfr/source/src/mpfr-thread.h:1 /* MPFR internal header related to thread-local variables.
- Libraries/3rd/curl/source/lib/asyn-thread.c:29  * Only for threaded name resolves builds
- Libraries/3rd/apr/source/locks/os2/thread_cond.c:21 #include "apr_arch_thread_mutex.h"
- Libraries/3rd/apr/source/threadproc/os2/thread.c:19 #include "apr_arch_threadproc.h"
- Libraries/3rd/apr/source/locks/os2/thread_mutex.c:21 #include "apr_arch_thread_mutex.h"

https://github.com/Gericom/GBARunner2
- arm9/source/fat/ffconf.h:105 /   1: Enable LFN with static working buffer on the BSS. Always NOT thread-safe.
- arm9/source/fat/ff.vram.c:215 #error Static LFN work area cannot be used at thread-safe configuration

https://github.com/cntools/libsurvive
- src/poser.c:415 struct survive_threaded_poser {
- README.md:166 are invoked from the thread collecting the data; so if you have unnecessary delays in processing data will be dropped 
- src/survive_api.c:52 	og_thread_t thread;
- src/driver_openvr.cc:235 static void *openvr_thread(void *d) {
- sensors-readout.c:392 	og_thread_t kbThread = OGCreateThread(KBThread, "kb-thread", ctx);

https://github.com/jsoftware/jsource
- pthreads4w/include/pthread.h:1 /* This is an implementation of the threads API of the Single Unix Specification.
- jsrc/d.h:15 #define SUSTHREAD   8       // set thread number
- jsrc/i.c:35 JE can be used by multiple tasks and threads
- jsrc/mt.h:13 __attribute__((cold)) void jfutex_wake1(UI4 *p); //wake 1 thread waiting on p
- jsrc/mt.c:7 //    - various edge cases like lock on one thread/release on another, or acquire a lock you already hold, are UB in posix!

https://github.com/azul3d/engine
- native/cp/chipmunk/src/cpBBTree.c:169 ThreadUnlink(Thread thread)
- gfx/gl2/doc.go:108 //      // to the OS thread.
- native/ode/ode.go:230 // CleanupAllDataForThread manually releases ODE resources for the current thread.
- gfx/window/main.go:14 // For details about the main thread and LockOSThread, see:
- native/al/AL/alext.h:152 #ifndef ALC_EXT_thread_local_context

https://github.com/acados/acados
- interfaces/acados_template/acados_template/acados_sim_solver.py:266         # This is necessary if acados was compiled with OpenMP, since the OpenMP threads can't be destroyed.
- CMakeLists.txt:290         message(STATUS "Number of threads for acados with openMP (ACADOS_NUM_THREADS) ${ACADOS_NUM_THREADS}")
- acados/ocp_nlp/ocp_nlp_sqp_rti.c:441     // backup number of threads
- cmake/FindMatlab.cmake:893     # pthread options
- acados/ocp_nlp/ocp_nlp_sqp.c:496     // backup number of threads

https://github.com/goldsborough/ipc-bench
- source/common/utility.c:9 #include <pthread.h>
- source/common/utility.h:62 void pin_thread(int where);
- source/shm-sync/shm-sync-common.c:12 	// more than one process (and any thread in any of those
- source/CMakeLists.txt:17 link_libraries(pthread)
- source/shm-sync/shm-sync-common.h:4 #include <pthread.h>

https://github.com/pcbreflux/espressif
- esp32/app/lib/MQTTClient-C/src/MQTTClient.h:121 	Thread thread;
- esp32/app/ESP32_ble_notify/main/GreatNeilKolbanLib/Task.cpp:50  * The code here will run on the task thread.
- esp32/app/ESP32_ble_notify/main/GreatNeilKolbanLib/FreeRTOSTimer.cpp:26  * the timer demon thread.  As such it must **not** block.  Once the timer has fired, if the reload
- esp32/app/lib/MQTTClient-C/src/MQTTClient.c:345 	return ThreadStart(&client->thread, &MQTTRun, client);
- esp32/app/ESP32_ssl_webserver/main/openssl_server.c:206 static void openssl_demo_thread(void *p)

https://github.com/adafruit/Adafruit_nRF52_Arduino
- cores/nRF5/HardwarePWM.cpp:275   bool const thread_mode = !isInISR();
- cores/nRF5/rtos.h:68 // legacy thread-safe malloc/free
- changelog.md:15 - Implemnent thread-safe malloc/free using --wrap linker option
- libraries/Bluefruit52Lib/src/utility/bootloader_util.c:22  *          (thread/handler) and if in thread mode it will reset into other application.
- libraries/BLEHomekit/src/crypto/srp/memory_buffer_alloc.h:64  *          (Provided polarssl_malloc() and polarssl_free() are thread-safe if

https://github.com/lucadentella/esp32-tutorial
- 21_mqtt/components/espmqtt/mqtt.c:533         mqtt_info("Connected to MQTT broker, create sending thread before call connected callback");
- 18_u8g2/components/u8g2/sys/arduino/u8x8/HelloWorld/Makefile.180.leonardo:110 CXXFLAGS:=$(COMMON_FLAGS) -std=gnu++11 -fpermissive -fno-exceptions -fno-threadsafe-statics
- 18_u8g2/components/u8g2/sys/arduino/u8x8/FlipMode/Makefile.180.feather32u4:112 CXXFLAGS:=$(COMMON_FLAGS) -std=gnu++11 -fpermissive -fno-exceptions -fno-threadsafe-statics
- 18_u8g2/components/u8g2/sys/bitmap/cimg_annotate_screenshot/Makefile:3 LDFLAGS = -lpthread
- 16_spiffs/components/spiffs/spiffs_config.h:200 // These should be defined on a multithreaded system

https://github.com/postgrespro/zson
- docs/benchmark.md:300 number of threads: 12

https://github.com/krakjoe/ui
- classes/executor.h:24 	pthread_mutex_t           m;
- classes/executor.c:28 #include <pthread.h>
- config.m4:4 PHP_ARG_ENABLE(ui-threads, for ui threads,
- config.w32:9 		CHECK_HEADER_ADD_INCLUDE("pthread.h", "CFLAGS_UI", PHP_UI + ";" + configure_module_dirname) && 
- ui.c:36 #include <pthread.h>

https://github.com/eduardsui/tlse
- README.md:34 If thread-safety is needed, you need to call `tls_init()` before letting any other threads in, and not use the same object from multiple threads without a mutex. Other than that, TLSe and libtomcrypt are thread-safe. Also, you may want to define LTC_PTHREAD if you're using libtomcrypt.
- tlse.h:198   however, the initialization is not thread-safe, so if you intend to use TLSe

https://github.com/vimfung/LuaScriptCore
- Source/lua-core/src/lua.h:77 /* thread status */
- Source/lua-common/LuaDefined.h:13 #include <thread>
- Source/lua-core/src/lfunc.c:75   if (!isintwups(L)) {  /* thread not in list of threads with upvalues? */
- Source/lua-common/LuaContext.cpp:20 #include <thread>
- Source/lua-core/src/lfunc.h:21 /* test whether thread is in 'twups' list */

https://github.com/OpenSmalltalk/opensmalltalk-vm
- processors/ARM/gdb-8.3.1/gdb/thread-fsm.h:25 struct thread_fsm_ops;
- processors/ARM/gdb-8.3.1/gdb/ravenscar-thread.h:1 /* Ada Ravenscar thread support.
- processors/ARM/gdb-8.3.1/gdb/thread-iter.h:27    threads.  */
- processors/ARM/gdb-8.3.1/gdb/nat/gdb_thread_db.h:22 #include <thread_db.h>
- processors/ARM/gdb-8.3.1/gdb/nat/glibc_thread_db.h:1 /* thread_db.h -- interface to libthread_db.so library for debugging -lpthread

https://github.com/Greedysky/TTKWidgetTools
- TTKCommon/TTKLibrary/ttkabstractthread.h:26 /*! @brief The class of the ttk abstract thread.
- TTKModule/Label/netTrafficLabel/ttknettrafficlabel.h:23 #include "ttkabstractthread.h"
- TTKCommon/TTKLibrary/CMakeLists.txt:13   ttkabstractthread.h
- TTKCommon/TTKLibrary/TTKLibrary.pro:69     $$PWD/ttkabstractthread.h \
- TTKCommon/TTKCommon.pri:35             $$PWD/TTKLibrary/ttkabstractthread.h \

https://github.com/Rocky5/Xbox-Softmodding-Tool
- App Sources/XBP Table Writer/Source/Undocumented.h:433 	// 018 Thread ID of the thread that currently owns this critical section
- App Sources/Xbox Softmod Tool Kit/include/StdString.h:453 //    6.0 or earlier, and only then in some heavily multithreaded scenarios.
- App Sources/Xbox Softmodding Tool TSOP/include/StdString.h:453 //    6.0 or earlier, and only then in some heavily multithreaded scenarios.
- App Sources/Xbox Softmodding Tool Extras Disc XBE Loader/include/StdString.h:453 //    6.0 or earlier, and only then in some heavily multithreaded scenarios.

https://github.com/Gwion/Gwion
- src/arg.c:213   cmdapp_set(app, 't', "thread_count", CMDOPT_TAKESARG, NULL, "set number of threads", "integer",
- src/main.c:38     .thread_count = 4,
- include/arg.h:20   uint32_t           thread_count;
- src/gwiondata.c:19 ANN GwionData *new_gwiondata(const MemPool mp, const uint32_t thread_count,
- src/lib/shred.c:5 #include "gwion_thread.h"

https://github.com/zydeco/minivmac4ios
- libhfs/volume.h:44 int v_getthread(hfsvol *, unsigned long, CatDataRec *, node *, int);
- libhfs/volume.c:566  * NAME:	vol->getthread()
- libhfs/hfs.c:364       v_getdthread(vol, ent->blessed, 0, 0) <= 0)

https://github.com/scumjr/dirtycow-vdso
- 0xdeadbeef.c:16 #include <pthread.h>
- Makefile:2 LDFLAGS := -lpthread

https://github.com/Cubitect/cubiomes
- quadbase.c:14 typedef HANDLE thread_id_t;
- makefile:12 	override LDFLAGS += -pthread
- README.md:71 Both commands assume that your source code is saved as `find_biome_at.c` in the cubiomes working directory. If your makefile is configured to use pthreads, you may also need to add the `-lpthread` option to the compiler.
- quadbase.h:135 /* Starts a multi-threaded search through all 48-bit seeds. Since this can

https://github.com/thethumbler/Aquila
- kernel/include/sys/thread.h:6 struct thread;
- kernel/sys/thread.c:8 MALLOC_DEFINE(M_THREAD, "thread", "thread structure");
- kernel/arch/i386/sys/thread.c:11 MALLOC_DEFINE(M_X86_THREAD, "x86-thread", "x86 thread structure");
- kernel/sys/Build.mk:2 obj-y += thread.o
- kernel/sys/fork.c:54 int proc_fork(struct thread *thread, struct proc **ref)

https://github.com/flatpak/xdg-desktop-portal
- src/realtime.c:98 handle_make_thread_realtime_with_pid (XdpDbusRealtime       *object,
- src/gamemode.c:264 handle_call_thread (GTask        *task,
- src/request.c:297 close_requests_in_thread_func (GTask        *task,
- document-portal/file-transfer.c:554 stop_file_transfers_in_thread_func (GTask        *task,
- src/background.c:49  * $XDG_RUNTIME_DIR/.flatpak/. A thread is comparing

https://github.com/Skulltrail192/One-Core-Api
- dll/shellext/shellbtrfs/send.h:58     HANDLE thread, dirh, stream;
- sdk/lib/rtl/thread.c:4  * PURPOSE:           Rtl user thread functions
- sdk/lib/crt/process/threadx.c:6 uintptr_t CDECL _beginthreadex(
- dll/win32/shlwapi/thread.c:2  * SHLWAPI thread and MT synchronisation functions
- sdk/lib/crt/startup/threadSafeInit.c:15 long _Init_thread_epoch;

https://github.com/bperez77/xilinx_axidma
- README.md:17 In the future, the driver will have proper synchronization for both multiple processes and multiple threads. In the meantime, if you need multi-process support, the fork is a good workaround.
- driver/axidma_dma.c:148     /* For synchronous transfers, notify the kernel thread waiting. For
- examples/axidma_display_image.c:40  * signal handlers and the main thread. */
- examples/axidma_benchmark.c:61 // The DMA context passed to the helper thread, who handles remainder channels

https://github.com/Juniper/warp17
- inc/tpg_stats.h:46  *     efficiently updated by multiple threads.
- src/tpg_msg.c:83 /* Define MSG global statistics. Each thread has its own set of locally
- inc/tpg_config.h:197  * The size of the inter-module/thread message queue has to be a power of 2.
- src/kni_if/tpg_kni_pmd.c:460      * For example when called during the init phase as the mgmt thread is
- doc/Performance.md:22 * 34 lcores (hardware threads): `-c 0xFF3FCFF3FF`

https://github.com/Zero3K/ERAM
- eramum.h:92 //  Failed to create a system thread.%0
- eramui/eramum.mc:56 Failed to create a system thread.%0
- eram.c:598 		/* Notify thread termination */
- eramui/eramum.cs:92 // Failed to create a system thread.%0

https://github.com/Ebiroll/qemu_esp32
- net/socket_thread.c:2     C socket server example, handles multiple clients using threads
- QEMU_NET.md:52      http://www.freertos.org/thread-local-storage-pointers.html
- .gdbinit:19 # Command "freertos_show_threads"
- main/echo.c:45 /* thread spawned for each connection */
- examples/35_gps/README.md:42         If enabled, there will be no protection on the drivers from concurently accessing them from another thread/interrupt/core

https://github.com/nvpro-samples/optix_advanced_samples
- src/support/glfw/deps/tinycthread.c:30 #include "tinycthread.h"
- src/support/glfw/deps/tinycthread.h:32 * TinyCThread is a minimal, portable implementation of basic threading
- src/support/glfw/docs/main.dox:35 reentrancy, thread safety, event order and backward and forward compatibility.
- src/support/glfw/docs/intro.dox:29 successfully initialized, and only from the main thread.
- src/support/glfw/examples/CMakeLists.txt:28 set(TINYCTHREAD "${GLFW_SOURCE_DIR}/deps/tinycthread.h"

https://github.com/linuxmint/xed
- meson.build:29 gthread = dependency('gthread-2.0', version: '>= 2.13.0')

https://github.com/katlogic/WindowsD
- README.md:103    listening to notifications about changes to key value. The listener is either a thread, or kernel-resident

https://github.com/cntools/rawdraw
- wasm/README.md:80 	//If at all possible, we should attempt to load in-thread
- os_generic.h:4 	"osgeneric" Generic, platform independent tool for threads and time.
- Makefile:29 	gcc -o $@ $^ -lMali -lpthread -lm -O3
- examples/Makefile:17 	gcc -o $@ $^ -lX11 -lm -lpthread -lXinerama -lXext -lGL -g -DCNFGRASTERIZER -Wall
- README.md:213 os_generic is a platform independent way of creating threads, managing TLS, mutices, 

https://github.com/szhou42/osdev
- README.md:6 1. Userspace, Port Newlib, Multi-process, multi-thread, IPC, write syscalls, etc(process related stuff)
- src/kernel/drivers/rtl8139.c:27     // and probabbly this should be done in a separate thread...

https://github.com/shlomif/fortune-mod
- fortune-mod/datfiles/tao:174 A continuous thread beyond description,
- fortune-mod/datfiles/computers:2473 ``Thank God we were able to buy enough needles and thread and patch it
- fortune-mod/datfiles/literature:324 He draweth out the thread of his verbosity finer than the staple of his
- fortune-mod/datfiles/shlomif-fav:1254              thread doesn't fall apart
- fortune-mod/datfiles/definitions:1799 	tradition in many groups that, once this occurs, that thread is

https://github.com/syoyo/tinyobjloader-c
- examples/viewer/Makefile:9 LDFLAGS=-lGL -lGLU -lm -pthread -ldl `pkg-config --libs glfw3`

https://github.com/MockbaTheBorg/RunCPM
- RunCPM/lua/lua.h:48 /* thread status */
- RunCPM/lua/lfunc.h:21 /* test whether thread is in 'twups' list */
- RunCPM/lua/ldblib.c:24 ** The hook table at registry[HOOKKEY] maps threads to their current
- RunCPM/lua/lstate.h:73 **   - all threads.
- RunCPM/lua/lstate.c:33 ** thread state + extra space

https://github.com/MaJerle/lwgps
- docs/user-manual/thread-safety.rst:1 .. _thread_safety:
- docs/user-manual/index.rst:11     thread-safety

https://github.com/DNS-OARC/dnsperf
- m4/ax_pthread.m4:2 #        https://www.gnu.org/software/autoconf-archive/ax_pthread.html
- src/util.h:26 #include <pthread.h>
- CHANGES:124       - Treat `EBADF` as `EAGAIN` for stateful connections, receive thread
- src/net_tcp.c:41 About state sync between sending and receiving thread
- src/dnsperf.1.in:42 [\fB\-T\ \fIthreads\fR]

https://github.com/LikeUSummer/GamePainter
- noumenon/lua/src/lua.h:45 /* thread status */
- noumenon/lua/src/lfunc.c:75   if (!isintwups(L)) {  /* thread not in list of threads with upvalues? */
- noumenon/lua/src/lfunc.h:21 /* test whether thread is in 'twups' list */
- noumenon/lua/src/lstate.c:52 ** thread state + extra space
- noumenon/lua/src/ldblib.c:24 ** The hook table at registry[&HOOKKEY] maps threads to their current

https://github.com/vitotai/BrewPiLess
- lib/Adafruit_BME280_Library-master/Adafruit_BME280.cpp:524   // at high altitude. See this thread for more information:
- docs/Z0.FAQ.md:33 [REF#2](https://www.homebrewtalk.com/forum/threads/howto-make-a-brewpi-fermentation-controller-for-cheap.466106/page-136#post-7556259)
- docs/H0.PressureMonitor.md:88 ** BPL checks the pressure **every second**, if the pressure is greater than specified value, the solenoid will be open. The less the gas/pressure is released in 1 second, the more precise the pressure control is. It might sound like difficult. The fact is that it is more difficult to make something air tight. A threaded pipe and cap without seal might do the job.

https://github.com/filebench/filebench
- threadflow.h:46 typedef struct threadflow {
- threadflow.c:29 #include <pthread.h>
- NEWS:35 - osprof_enabled flag did not work correctly for worker threads.
- README:65 consisting of two processes with three threads each. Every thread continuously
- configure.ac:78 # fork1() syscall on Solaris forks only the calling thread,

https://github.com/espressif/openocd-esp32
- contrib/list_example.c:15 static LIST_HEAD(threads);
- src/rtos/ThreadX.c:24 static int is_thread_id_valid(const struct rtos *rtos, int64_t thread_id);
- src/rtos/hwthread.c:18 static bool hwthread_detect_rtos(struct target *target);
- src/rtos/mqx.c:263  * API function, update list of threads
- src/rtos/rtos.h:15 typedef int64_t threadid_t;

https://github.com/rryqszq4/ngx_php
- ChangeLog:63     * Fixd at zend_uthread, valid before change to valid after in zend_uthread_resume function, yield;ngx::sleep change to yield ngx::sleep.
- src/ngx_http_php_core.h:93     unsigned enable_thread : 1;
- t/lib/mysql.php:223         $thread_id = unpack("V", substr($data, $pos, 4));
- src/ngx_http_php_zend_uthread.h:60 void ngx_http_php_zend_uthread_rewrite_inline_routine(ngx_http_request_t *r);
- src/ngx_http_php_module.c:261     NULL,                           /* init thread */

https://github.com/ele7enxxh/android-afl
- docs/status_screen.txt:326   - Multiple threads executing at once in semi-random order. This is harmless
- libdislocator/libdislocator.so.c:79 static __thread size_t total_mem;       /* Currently allocated mem          */
- docs/notes_for_asan.txt:141 mailing list thread for tips:
- afl-as.c:99      by the user. See the thread here: http://goo.gl/HBWDtn.
- llvm_mode/afl-llvm-pass.so.cc:97      __afl_prev_loc is thread-local. */

https://github.com/stub42/pytz
- tz/NEWS:1068     tzalloc(NULL) or, if portability trumps thread-safety, should
- tz/Makefile:244 #  -DTHREAD_SAFE to make localtime.c thread-safe, as POSIX requires;
- tz/localtime.c:22 # include <pthread.h>
- tz/asia:1884 # Also see this thread about the moin.gov.il URL:
- tz/newctime.3:338 The remaining functions and data are thread-safe.

https://github.com/rweather/noise-c
- m4/ax_pthread.m4:2 #        http://www.gnu.org/software/autoconf-archive/ax_pthread.html
- src/crypto/goldilocks/TODO.txt:29     * Makes error-handling and thread safety easier.
- src/crypto/goldilocks/src/include/config.h:43  * @brief Goldilocks uses libpthread mutexes to provide
- src/crypto/goldilocks/src/include/crandom.h:28  * not be accessed by multiple threads at the same time.
- src/crypto/ed25519/README.md:83 Use `-DED25519_TEST` when compiling `ed25519.c` to use a deterministically seeded, non-thread safe CSPRNG 

https://github.com/TLeconte/acarsdec
- rtl.c:25 #include <pthread.h>
- acars.c:30 static pthread_mutex_t blkq_mtx;
- soapy.c:7 #include <pthread.h>
- sdrplay.c:30 #include <pthread.h>
- msk.c:21 pthread_mutex_t chmtx;

https://github.com/SrainApp/srain
- src/lib/utils.c:40  * NOTE: This function is not thread-safe

https://github.com/SideChannelMarvels/Tracer
- TraceGraph/mainwindow.h:70     QThread worker_thread;
- TraceGraph/mainwindow.cpp:31     sqlite_client.moveToThread(&worker_thread);
- TracerGrind/texttrace/texttrace.c:137             fread((void*)&(emsg.thread_id), 8, 1, trace);
- TracerGrind/tracergrind/tg_main.c:39 static uint64_t thread_id = 0;
- TracerPIN/Tracer.cpp:77 sqlite3_stmt *info_insert, *bbl_insert, *call_insert, *lib_insert, *ins_insert, *mem_insert, *thread_insert, *thread_update;

https://github.com/Samsung/ADBI
- process/thread.c:10 #include "thread.h"
- process/thread.h:11 typedef struct thread_t {
- doc/CALLS:8     1.  First all threads of the process are stopped. 
- doc/EXEC_RESTOP:6 a thread before running any injected code. 
- util/human.c:6 #include "process/thread.h"

https://github.com/MiEcosystem/miio_open
- arduino/Arduino_Firmware.md:34 - 导入Arduino [DHT11库文件导入](https://www.arduino.cn/thread-31720-1-1.html)

https://github.com/openbios/openbios
- fs/hfs/hfs.c:308   if (v_getdthread(vol, id, NULL, NULL) <= 0)
- fs/hfs/volume.c:413  * NAME:	vol->getthread()
- arch/unix/gui_qt/gui-qt.pro:10 CONFIG     += qt thread warn_on release staticlib
- arch/unix/gui_qt/qt-main.cpp:11 #include <pthread.h>
- fs/hfs/include/volume.h:48 int v_getthread(hfsvol *, unsigned long, CatDataRec *, node *, int);

https://github.com/pkoutoupis/rapiddisk
- src/rapiddiskd.h:64 int mgmt_thread(void *arg);
- src/net.c:721  * @param arg a pointer to the arguments passed to the thread function.
- src/rapiddiskd.c:347 	rc = mgmt_thread((void *)args);
- module/rapiddisk-cache.c:1271 	kcached_wq = create_singlethread_workqueue("kcached");

https://github.com/sifive/freedom-u-sdk
- README.md:271 sudo nbdkit -f --verbose --threads 128 --filter=cow --filter=partition --filter=xz file demo-coreip-xfce4-unmatched-<..>.rootfs.wic.xz partition=4
- ReleaseNotes/2021.11.md:12     + `nbdkit` could be used for the NBD server. The example: `sudo nbdkit -f --verbose --threads 128 --filter=cow --filter=partition --filter=xz file demo-coreip-xfce4-unmatched-<..>.rootfs.wic.xz partition=4`. This would expose the 4th partition from a compressed disk image with a cow (copy-on-write) layer on top to make it writable. Note that in this particular case `<export_name>` value is ignored by `nbdkit` server. If performance is important uncompress disk image before sharing it via NBD server.

https://github.com/M-HT/SR
- games/Albion/SR-Main/Game_thread.c:32 #include "Game_thread.h"
- scaler-plugins/xbrz/xbrz.h:37 - support multithreading
- games/Septerra Core/SR-Septerra/x86/CLIB-asm.asm:66     %define _beginthread_c __beginthread_c
- games/Albion/SR-Main/Game_scalerplugin.c:49     SDL_Thread *thread;
- games/Septerra Core/SR-Septerra/WinApi.h:39 WINAPI_STORAGE thread_local unsigned int Winapi_LastError;

https://github.com/cygwin/cygwin
- winsup/cygwin/local_includes/cygserver_ipc.h:77 class thread {
- winsup/testsuite/winsup.api/pthread/cancel8.c:32  * - have working pthread_create, pthread_cancel, pthread_setcancelstate
- winsup/testsuite/winsup.api/pthread/mainthreadexits.c:3 #include <pthread.h>
- winsup/testsuite/winsup.api/pthread/cancel6.c:32  * - have working pthread_create, pthread_cancel, pthread_setcancelstate
- winsup/cygwin/cygthread.cc:1 /* cygthread.cc

https://github.com/nelhage/rules_boost
- boost.BUILD:180         "libs/fiber/src/numa/linux/pin_thread.cpp",
- zstd.BUILD:28         "-pthread",
- config.lzma-linux.h:216 /* Define to 1 if you have the `pthread_condattr_setclock' function. */
- lzma.BUILD:94         "//conditions:default": ["-lpthread"],
- config.lzma-osx-x86_64.h:210 /* Define to 1 if you have the `pthread_condattr_setclock' function. */

https://github.com/JohnWStockwellJr/SeisUnix
- src/Sfio/include/vthread.h:24 /*	Header for the Vthread library.
- src/man/man3/vthread.3:4 \fBVthread\fR \- portable threads
- src/Sfio/src/lib/vthread/vtrun.c:3 /*	Run a thread
- src/Sfio/src/lib/vthread/vtset.c:3 /*	Set attributes of a thread
- src/Sfio/src/lib/vthread/vtwait.c:3 /*	Wait for a thread to end

https://github.com/gdabah/distormx
- src/OS.h:56  * Boost priority of current thread and suspend the rest of the threads in the process.
- src/OS.c:26 typedef void * thread_t;
- src/distormx.c:119 	void * threadsOpaque;
- include/distormx.h:71  * 2) Suspend all threads.
- distorm3/src/instructions.c:411 					 * And since the DB can't be patched dynamically, because the DB has to be multi-threaded compliant,

https://github.com/mackron/dred
- source/dred/dtk/dtk_threading.h:3 // Multithreading is implemented differently depending on the platform. Of note is the entry point which is slightly different. The thread
- source/dred/dtk/dtk_threading.c:16 dtk_result dtk_thread_create__win32(dtk_thread* pThread, dtk_thread_entry_proc entryProc, void* pData)
- source/dred/dtk/dtk.h:23     #include <pthread.h>
- source/dred/dred_context.h:16     // The IPC thread.
- source/dred/dtk/dtk.c:330 // This function is not thread safe, and the returned value is a pointer to a buffer that's managed

https://github.com/jflyup/nat_traversal
- nat_traversal.c:12 #include <pthread.h>
- Makefile:6 # clang warn about unused argument, it requires -pthread when compiling but not when linking
- main.c:5 #include <pthread.h>
- nat_traversal.h:36 pthread_t wait_for_command(int* server_sock);

https://github.com/robertdavidgraham/telnetlogger
- telnetlogger.c:15 		- Stefan Laudemann pointed out flaw in pthread_create causing
- Makefile:2 	gcc -o telnetlogger telnetlogger.c -Wall -lpthread
- README.md:36     gcc telnetlogger.c -o telnetlogger -lpthread

https://github.com/NVIDIA/egl-wayland
- src/wayland-thread.c:28 #include "wayland-thread.h"
- include/wayland-thread.h:27 #include <pthread.h>
- m4/ax_pthread.m4:2 #        http://www.gnu.org/software/autoconf-archive/ax_pthread.html
- src/meson.build:34     'wayland-thread.c',
- Makefile.am:33     src/wayland-thread.c                                      \

https://github.com/google/neper
- thread.h:20 #include <pthread.h>
- thread.c:32 #include "thread.h"
- README.md:5 * Support multithreads and multi-flows out of the box.
- Makefile:46 	thread.o \
- rr.h:20 struct thread;

https://github.com/washingtondc-emu/washingtondc
- src/common/frontend_io/io_thread.cpp:23 #include "threading.h"
- src/common/threading.h:26 typedef void(*washdc_thread_main)(void*);
- src/libwashdc/gfx/gfx.c:39 // Only call gfx_thread_signal and gfx_thread_wait when you hold the lock.
- src/washdc-headless/CMakeLists.txt:30 set(io_sources "${IO_SOURCE_DIR}/io_thread.hpp"
- src/libwashdc/dreamcast.h:72  * from any thread.

https://github.com/arjun024/memalloc
- memalloc.c:3 #include <pthread.h>

https://github.com/McArcady/lnp-forge
- patches/dfhack/0.47.05-r1/200-activate-kloker.patch:10      dfhack_plugin(luasocket luasocket.cpp LINK_LIBRARIES clsocket lua dfhack-tinythread)

https://github.com/DIVGAMES/DIV-Games-Studio
- src/other/divdll2.c:166 #define IMAGE_LIBRARY_PROCESS_TERM           2   // Dll has a thread termination routine.
- src/shared/lib/zip/src/miniz.h:1774 // Purposely making these tables static for faster init and thread safety.
- AndroidAppSettings.cfg:69 # Application does not call SDL_Flip() or SDL_UpdateRects() appropriately, or draws from non-main thread -
- tools/amiga.cmake:38 set ( CMAKE_EXE_LINKER_FLAGS "-L/opt/m68k-amigaos/lib -Wl,-rpath,/opt/m68k-amigaos/lib -lSDL -lpthread")
- tools/pi.cmake:99 set ( CMAKE_EXE_LINKER_FLAGS "-L${CROSS_DIR}SDL_cross/lib -Wl,-rpath,/home/mike/raspidev/SDL_cross/lib -lSDL -lpthread -ldl")

https://github.com/OpenAMP/libmetal
- lib/io.c:51 		atomic_thread_fence(memory_order_seq_cst);
- lib/dma.c:30 		atomic_thread_fence(memory_order_release);
- lib/sleep.h:27  *             delay the next execution in the calling thread
- README.md:165 checks whether UIO/VFIO drivers are avail, and starts interrupt handling thread.
- lib/atomic.h:100 using std::atomic_thread_fence;

https://github.com/RPISEC/HackTheVote
- 2020/pwn/fileshare/README.md:6 - for how to use it: strace pthread creation, obscure syscalls may be worth investigating
- 2016/exploitation/devVote/sol/README.txt:12 - Now that the check runs, we can request a large area to hash to cause the kernel thread to hang.
- 2020/web/dotlocker/src/server/admin.py:2 import threading
- 2020/pwn/electrostar/handout/sandbox.h:37     seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(set_thread_area), 0);
- 2020/pwn/fileshare/src/Makefile:2 	gcc fileshare.c -o fileshare -Wall -Wextra -pie -fstack-protector -Wl,-z,relro,-z,now -lpthread -O1

https://github.com/Terraspace/UASM
- omffixup.c:140      *      1 = frame is defined by a thread ( won't occur here )
- regress/src/linux64/Lin64_4.asm:33 threadMsg   db "In thread handler..",10,0
- regress/src/linux64/linux64_sys.inc:64 ; long thread_create(void (*)(void))
- H/dbgcv.h:1698     S_LTHREAD32_16t = 0x020d,	/* local thread storage */
- H/elfspec.h:510 #define IT_THREAD       3       // thread init, term

https://github.com/pmaillot/X32-Behringer
- X32TCP.c:32 #include <pthread.h> //for threading , link with lpthread
- X32_Command.c:30 // v 1.45: Using keyboard thread function to better manage user inputs
- README.md:317 A multi threaded TCP server to serve X32 commands. This program starts a TCP server and handles requests for X32 (changing to UDP to manage dialog with X32) from multiple clients. The goal is to provide a basis for people who want to access X32 via TCP protocol, rather than UDP. 

https://github.com/candlewill/Chinsese_word_vectors
- GloVe-1.2/src/glove.c:29 #include <pthread.h>
- GloVe-1.2/demo.sh:36        $BUILDDIR/glove -save-file $SAVE_FILE -threads $NUM_THREADS -input-file $COOCCURRENCE_SHUF_FILE -x-max $X_MAX -iter $MAX_ITER -vector-size $VECTOR_SIZE -binary $BINARY -vocab-file $VOCAB_FILE -verbose $VERBOSE
- GloVe-1.2/Makefile:3 CFLAGS = -lm -pthread -Ofast -march=native -funroll-loops -Wno-unused-result

https://github.com/rxi/uuid4
- README.md:18 `uuid4_generate()` is not thread-safe.

https://github.com/google/compact_enc_det
- CMakeLists.txt:51   set(THREADING threadwin)
- compact_enc_det/compact_enc_det.cc:322 // Debug only. not thread safe

https://github.com/4ilo/ssd1306-stm32HAL
- example/Drivers/CMSIS/Include/tz_context.h:60 /// Load secure context (called on RTOS thread context switch)

https://github.com/tinycorelinux/tinyx
- dix/main.c:238      * the main thread. This allows the X server main to be called again

https://github.com/glankk/gz
- lib/liboot-1.1.a:11 z64_thread_idle                   = 0x80006850 ;
- src/gz/rdb.c:35 static OSThread *const rdb_threads[] =
- lib/liboot-1.0.a:11 z64_thread_idle                   = 0x80006850 ;
- lib/liboot-1.2.a:11 z64_thread_idle                   = 0x80006D80 ;
- lib/liboot-mq-u.a:11 z64_thread_idle                   = 0x80006590 ;

https://github.com/SDL-Hercules-390/hyperion
- fthreads.h:2 /*              Fish's WIN32 version of pthreads                     */
- hthreads.h:4 /*              Hercules locking and threading                       */
- readme/README.PTT.md:16 The Hercules "Threading and locking trace debugger" is not just for thread and lock tracing.  It is actually a generic Hercules internal event tracing debugging facility.
- timer.c:159 /* TOD clock and timer thread                                        */
- readme/README.SETUID.md:14 There are also some reasons to have the Hercules executable itself setuid root, for example, to allow the timer thread to run with real time priority.

https://github.com/Formyown/Alesense-Antivirus
- AsUI/bolt/lua/lua.h:42 /* thread status; 0 is OK */
- AsUI/bolt/lua/lstate.h:66 ** `global state', shared by all threads of this state
- AsUI/bolt/lua/lgc.h:50 ** bit 6 - object is "super" fixed (only the main thread)
- AsUI/bolt/expat/expat.h:844    safely be used in a separate thread.  The handlers and userData are
- AsUI/bolt/lua/lobject.h:86 #define ttisthread(o)	(ttype(o) == LUA_TTHREAD)

https://github.com/vibansal/HapCUT2
- Makefile:21 	$(CC) $(CFLAGS) $(LDFLAGS) -I$(HTSLIB) -g $(B)/bamread.o $(B)/hapfragments.o $(B)/hashtable.o $(B)/readfasta.o $(B)/readvariant.o -o $(B)/extractHAIRS $(H)/extracthairs.c -pthread -lhts -lm -lz -lcurl -llzma -lbz2

https://github.com/prittt/YACCLAB
- cuda/src/labeling_TUF.cu:17 // Every thread looks at the neighborhood of pixel X and tests pixels with a certain order
- cuda/src/labeling_RADAR.cu:30 		unsigned global_row = blockIdx.y * BLOCK_ROWS + threadIdx.y;
- cuda/src/labeling_stava_2011.cu:73     const unsigned r = threadIdx.y;
- cuda/src/labeling_kalentev_2011.cu:28     unsigned global_row = blockIdx.y * BLOCK_ROWS + threadIdx.y;
- cuda/src/labeling_zavalishin_2016.cu:39     unsigned row = blockIdx.y * blockDim.y + threadIdx.y;

https://github.com/smuyyh/IncrementallyUpdate
- server/source/bzip2/bzlib.h:229    threading-safeness of it.
- server/source/bzip2/bzlib.c:1357    threading-safeness of it.
- app/src/main/jni/bzip2/bzlib.h:229    threading-safeness of it.
- app/src/main/jni/bzip2/bzlib.c:1357    threading-safeness of it.

https://github.com/yshui/deai
- di_internal.h:11 #include <threads.h>
- object.c:314 thread_local struct list_head all_objects;
- tests/c++_test.cc:11 thread_local static int result = 0;

https://github.com/linux-application-whitelisting/fapolicyd
- src/daemon/notify.c:33 #include <pthread.h>
- ChangeLog:54 - Update the locking between the main and decision threads
- src/library/queue.c:96 	msg(LOG_DEBUG, "Inter-thread max queue depth %u", q->max_depth);
- src/library/database.h:38 void lock_update_thread(void);
- README.md:227 When a program opens a file or calls execve, that thread has to wait for 

https://github.com/lastz/lastz
- src/quantum.c:170 	// note: this makes this module non-threadsafe
- src/infer_scores.c:295 	// note: this makes this module non-threadsafe
- src/seed_search.c:355 	// note: this makes this module non-threadsafe

https://github.com/jaygreig86/dmitry
- aclocal.m4:725 # Some implementations (such as Solaris 8's) are not thread-safe: if a

https://github.com/Francklin2/RTKLIB_Touchscreen_GUI
- RTKBASE/threadheuresysteme.cpp:29 #include "threadheuresysteme.h"
- RTKBASE/lib/rtklib/src/streamsvr.c:355 /* stearm server thread ------------------------------------------------------*/
- README.md:285 http://www.ebay.fr/itm/2PCS-3-8-to-1-4-inch-convert-screw-thread-adapter-tripod-ball-head-/231677594811?hash=item35f10f8cbb:g:qYoAAOSwqv9V6u21
- Package2/RTKLIB-2.4.2p13/readme.txt:84 internally uses winsock and WIN32 thread for Windows with the compiler option
- RTKBASE/lib/rtklib/src/rtksvr.c:383 /* rtk server thread ---------------------------------------------------------*/

https://github.com/suika2engine/suika2
- src/asound.c:15 #include <pthread.h>
- build/pro-qt6/cmake/libwebp.txt:52 option(WEBP_USE_THREAD "Enable threading support" ON)
- src/aunit.c:17 #include <pthread.h>
- src/dsound.c:158 	t = _beginthread(EventThread, 0, NULL);
- build/engine-sdl2/Makefile:40 	-lpthread \

https://github.com/seemoo-lab/bcm-rpi3
- kernel/tools/perf/util/thread.h:13 struct thread_stack;
- kernel/fs/proc/thread_self.c:7  * /proc/thread_self:
- kernel/tools/perf/util/thread_map.h:8 struct thread_map_data {
- kernel/arch/tile/include/asm/thread_info.h:27 struct thread_info {
- kernel/net/rds/threads.c:41  * work queues that execute in a connection managing thread.

https://github.com/mirror/newlib-cygwin
- winsup/cygwin/local_includes/cygserver_ipc.h:77 class thread {
- winsup/testsuite/winsup.api/pthread/cancel8.c:32  * - have working pthread_create, pthread_cancel, pthread_setcancelstate
- winsup/testsuite/winsup.api/pthread/mainthreadexits.c:3 #include <pthread.h>
- winsup/testsuite/winsup.api/pthread/cancel6.c:32  * - have working pthread_create, pthread_cancel, pthread_setcancelstate
- winsup/cygwin/cygthread.cc:1 /* cygthread.cc

https://github.com/150balbes/Jetson-Nano
- fs/proc/thread_self.c:7  * /proc/thread_self:
- tools/perf/util/thread.c:6 #include "thread.h"
- net/rds/threads.c:41  * work queues that execute in a connection managing thread.
- Documentation/workqueue.txt:26 independent thread serves as the asynchronous execution context.  The
- fs/btrfs/Makefile:8 	   extent_io.o volumes.o async-thread.o ioctl.o locking.o orphan.o \

https://github.com/qieangel2013/ngx-fastdfs
- php_client/README:1074         bMultiThread: if in multi-thread, default is false

https://github.com/latchset/jose
- lib/openssl/lock.c:22 #include <pthread.h>
- meson.build:38 threads = dependency('threads')
- lib/meson.build:43   dependencies: [zlib, jansson, libcrypto, threads],

https://github.com/dgod/yong
- llib/lqsort.c:9 // we do not need to be thread safe
- common/async.c:7 #include <pthread.h>
- llib/lzlib.c:308 // @TODO: should statically initialize these for optimal thread safety
- mb/build.txt:17 		env("LIBS=-ldl -ll -lpthread");

https://github.com/bittorrent/scout
- README.md:24 The start function will start a DHT node in a separate thread and return immediately. To stop the DHT node call the stop function.
- src/file.cpp:19 #include <thread>
- src/dht_session.cpp:586 	m_thread = std::move(std::thread(&dht_session::network_thread_fun, this, std::ref(promise)));
- src/upnp-portmap.cpp:337 // This needs to be in a UI-independent thread, as it blocks
- include/dht_session.hpp:20 #include <thread>

https://github.com/lvsgate/lvs-dpdk
- tools/keepalived/TODO:8 	  thread is registered. Occur when sigint is receive when
- tools/keepalived/genhash/ssl.h:32 extern int ssl_connect(thread_t *);
- tools/keepalived/genhash/ssl.c:98 ssl_connect(thread_t * thread)
- tools/keepalived/genhash/main.c:39 	/* register the terminate thread */
- tools/keepalived/genhash/sock.c:64 	thread_add_event(master, tcp_connect_thread, sock, 0);

https://github.com/leon-anavi/rpi-examples
- LED-SMD3528/c/Makefile:6 EXTRA_LIBS=-lwiringPi -lpthread
- DC-motor-SN754410/c/Makefile:5 EXTRA_LIBS=-lwiringPi -lpthread
- Ryanteck-RPi-Motor/c/Makefile:5 EXTRA_LIBS=-lwiringPi -lpthread

https://github.com/arkanis/single-header-file-c-libs
- slim_gl_demos/stb_image.h:68         the allocator, you'll have to store it in a global or a thread-local
- slim_gl_demos/Makefile:78 CFLAGS += `pkg-config --cflags gl` -pthread

https://github.com/d0k3/Hourglass9
- source/fatfs/00history.txt:239   Fixed wrong media change can lead a deadlock at thread-safe configuration.
- source/fatfs/ffconf.h:107 /   1: Enable LFN with static working buffer on the BSS. Always NOT thread-safe.
- source/fatfs/ff.c:38 #error Static LFN work area cannot be used at thread-safe configuration
- README.md:10 * __Dump & Inject the Health and Safety app__ - to setup a CIA installer in your system. More info [here](https://gbatemp.net/threads/release-inject-any-app-into-health-safety-o3ds-n3ds-cfw-only.402236/).
- source/decryptor/keys.c:204     // see source from https://gbatemp.net/threads/release-twltool-dsi-downgrading-save-injection-etc-multitool.393488/

https://github.com/RemixVSL/iomemory-vsl
- root/usr/src/iomemory-vsl-3.2.16/kcondvar.c:131     /* Linux wakes all threads in wake_up() unless
- root/usr/src/iomemory-vsl-3.2.16/include/fio/port/kcondvar.h:56  * Signaling threads waiting on condition variable:
- root/usr/src/iomemory-vsl-3.2.16/include/fio/port/kblock.h:68 extern void fio_start_submit_thread(struct fio_device *dev);
- root/usr/src/iomemory-vsl-3.2.16/include/fio/port/linux/ktypes.h:160 #define USE_QUEUE_SINGLE 2 ///< use single kernel thread.
- root/usr/src/iomemory-vsl-3.2.16/include/fio/port/csr_simulator.h:38 # include <pthread.h>

https://github.com/jtanx/libclipboard
- CMakeLists.txt:22     option(gtest_disable_pthreads "Disable gtest pthreads (default:on)" ON)
- src/clipboard_x11.c:24 #include <pthread.h>
- .appveyor.yml:32   - call %MBASH% "cd $APPVEYOR_BUILD_FOLDER; exec 0</dev/null; cp /mingw32/bin/lib{stdc++*,gcc*,winpthread*} bin/"
- README.md:23 * pthreads (for Linux/X11)
- test/libclipboard-test-private.h:23 #  include <thread>

https://github.com/nicolas-van/multirun
- README.md:89 * You want to launch multiple homogeneous single-threaded processes to effectively use multiple CPUs (and, for some reason, scaling your containers doesn't fit you): There often exist some technology-specific solutions for this but for simple needs multirun can be useful.

https://github.com/euwars/browser-ios
- Shared/UserAgent.swift:45      * As a result, it must be called on the UI thread.
- Utils/AssertionUtils.swift:8  Assertion for checking that the call is being made on the main thread.
- ClientTests/TestHistory.swift:122     // Fuzzing tests. These fire random insert/query/clear commands into the history database from threads. The don't check
- FxA/FxA/include/openssl/crypto.h:276 /* Adds thread number to the memory checking information */
- ClientTests/TestLocking.swift:15         let expectation = expectationWithDescription("main thread")

https://github.com/hklcf/Mirai
- loader/src/main.c:6 #include <pthread.h>
- loader/src/headers/server.h:16     pthread_t to_thrd;
- loader/src/server.c:5 #include <pthread.h>
- mirai/bot/killer.c:31     // Let parent continue on main thread
- mirai/bot/scanner.c:64     // Let parent continue on main thread

https://github.com/AllenDowney/ExercisesInC
- exercises/ex11/ex11.md:32 9) Make a copy of `ikkp_server.c` called `ikkp_server_thread.c` and modify it
- exercises/ex12/ex12.md:9 multiple threads that increment a counter.  Read through the code and
- examples/queue/main.c:11 #include <pthread.h>
- exercises/ex09/ex09.md:22 to spawning concurrent threads.
- examples/lock/array.c:12 #include <pthread.h>

https://github.com/LineageOS/android_device_qcom_common
- power/power.c:45 #include <pthread.h>

https://github.com/firemodels/smv
- Source/smokezip/threader.c:13   pthread_t *thread_ids;
- Source/pthreads/pthread_join.c:2  * pthread_join.c
- Source/pthreads/pthread_once.c:2  * pthread_once.c
- Source/pthreads/pthread_equal.c:2  * pthread_equal.c
- Source/pthreads/pthread.h:1 /* This is an implementation of the threads API of POSIX 1003.1-2001.

https://github.com/cyrusimap/cyrus-sasl
- m4/ax_pthread.m4:2 #        https://www.gnu.org/software/autoconf-archive/ax_pthread.html
- docsrc/sasl/quickstart.rst:45 This library is believed to be thread safe **if**:
- saslauthd/ipc_doors.c:58 #include <pthread.h>
- contrib/cyrus-sasl-libltdl:60 - the thread-safe issue is not resolved: I'm not a thread expert, please see
- doc/legacy/readme.html:50 This library is believed to be thread safe IF:

https://github.com/geekerlw/gstreamer-rockchip
- gst/rkximage/ximagesink.h:107  * @event_thread: a thread listening for events on @xwindow and handling them
- gst/vpudec/gstvpudec.c:135   /* Wait for mpp/libvpu output thread to stop */
- gst/rockchipmpp/gstmppvideodec.c:266   /* Wait for mpp output thread to stop */
- gst/rkximage/ximagesink.c:571      concurrently from the data flow thread */
- gst/rockchipmpp/gstmppvideoenc.c:78     GST_DEBUG_OBJECT (self, "Early stop of encoding thread");

https://github.com/embedded2016/server-framework
- README.md:9 * [`async`](async.h): A native POSIX thread pool.
- async.c:7 #include <pthread.h>
- async.h:12  * \brief A simple thread pool utilizing POSIX threads
- httpd.c:52                  .threads = THREAD_COUNT);
- protocol-server.h:21  * the thread pool, process forking, accepting new connections, setting up

https://github.com/Themaister/slang-shaders
- nedi/shaders/nedi-pass2.slang:23    Sources ported from this discussion thread:
- README.md:592 Always prioritize push constants for data used in fragment shaders as there are many more fragment threads than vertex.
- nedi/shaders/nedi-pass1.slang:23    Sources ported from this discussion thread:
- nedi/shaders/nedi-pass0.slang:23    Sources ported from this discussion thread:
- spec/SHADER_SPEC.md:592 Always prioritize push constants for data used in fragment shaders as there are many more fragment threads than vertex.

https://github.com/ros-drivers/microstrain_mips
- MIPSDK/C/Examples/Windows/RQ1/RQ1_Test/mip_sdk_user_functions.c:67  DWORD  thread_id;
- MIPSDK/C/Examples/Windows/GX4-15/GX4-15_Test/mip_sdk_user_functions.c:74  DWORD  thread_id;
- MIPSDK/C/Examples/Windows/GX3-35/GX3_35_Test/mip_sdk_user_functions.c:67  DWORD  thread_id;
- MIPSDK/C/Examples/Windows/GX3-45/GX3_45_Test/mip_sdk_user_functions.c:67  DWORD  thread_id;
- MIPSDK/C/Examples/Windows/GX4-45/GX4-45_Test/mip_sdk_user_functions.c:74  DWORD  thread_id;

https://github.com/lsh123/xmlsec
- src/dl.c:414  * Loads the xmlsec-$crypto library. This function is NOT thread safe,
- docs/api/xmlsec-dl.html:175 <p>Loads the xmlsec-$crypto library. This function is NOT thread safe,
- src/transforms.c:307  * This function is not thread safe and should only be called during initialization.
- docs/api/xmlsec-transforms.html:1874 This function is not thread safe and should only be called during initialization.</p>
- win32/README.md:115 and can only be linked to statically and used only in single-threaded mode.

https://github.com/KhArtNJava/MySQLConnectorUE4Plugin
- ThirdPartyLibs/mariadb-connector-c/unittest/libmariadb/thread.c:5 #include <ma_pthread.h>
- ThirdPartyLibs/mariadb-connector-c/include/ma_pthread.h:19 /* Defines to make different thread packages compatible */
- ThirdPartyLibs/mariadb-connector-c/zlib/zlib.3:12 The code is thread safe, assuming that the standard library functions
- ThirdPartyLibs/mariadb-connector-c/libmariadb/CMakeLists.txt:136  mysql_thread_end
- ThirdPartyLibs/mariadb-connector-c/libmariadb/ma_client_plugin.c.in:42 #include <ma_pthread.h>

https://github.com/chinashiyu/gfw.press.c
- src/client.c:29 #include <pthread.h>
- install.txt:1 gcc -o gfw.press  src/client.c src/encrypt.c -ansi -O3  -lssl -lcrypto -lpthread -Wall
- makefile:24 CFLAGS += -ansi -O3  -lssl -lcrypto -lpthread -Wall -g

https://github.com/KitSprout/UWB-Adapter
- Software/UWBA_Application_FreeRTOS/Program/main.c:38 static void thread_ToggleLEDG( void const *argument )
- Software/UWBA_Application_FreeRTOS/Libraries/FreeRTOS/Source/include/mpu_wrappers.h:54     compatible FAT file system, and our tiny thread aware UDP/IP stack.
- Software/UWBA_Application_FreeRTOS/Libraries/FreeRTOS/cmsis_os.c:11  *    osKernelStart added, optional feature: main started as thread
- Software/UWBA_Application_FreeRTOS/Libraries/FreeRTOS/cmsis_os.h:11  *    osKernelStart added, optional feature: main started as thread
- Software/UWBA_Application_FreeRTOS/Libraries/FreeRTOS/Source/queue.c:54     compatible FAT file system, and our tiny thread aware UDP/IP stack.

https://github.com/JUMA-IO/STM32_Platform
- applications/juma/emjs/regexp.c:24 typedef struct Rethread Rethread;
- README.md:17 > Cannon is FREE for developers right now! Apply for a Cannon at JUMA's [forum](http://www.52cannon.com/bbs/forum.php?mod=viewthread&tid=131&page=1&extra=#pid433).  
- system/middlewares/juma/FatFs/src/ffconf_template.h:138 /   1: Enable LFN with static working buffer on the BSS. Always NOT thread-safe.
- system/middlewares/juma/FatFs/src/ff.c:144 #error Static LFN work area cannot be used at thread-safe configuration

https://github.com/hocarm/STM32F103-Tutorial
- 16_FreeRTOS/Src/main.c:102   /* Create the thread(s) */
- 16_FreeRTOS/Inc/FreeRTOSConfig.h:54     compatible FAT file system, and our tiny thread aware UDP/IP stack.
- 17_STM32CubeIDE_Tutorial/Demo_STM32F1/Drivers/CMSIS/Include/tz_context.h:60 /// Load secure context (called on RTOS thread context switch)

https://github.com/tostq/EasyMulticoreDSP
- 2.emcv/cxcore/cxerror.cpp:117     CvContext* context = (CvContext*)pthread_getspecific( g_TlsIndex );
- 2.emcv/cv/cvhaar.cpp:413     int max_threads = cvGetNumThreads();
- 4.vlfft/vlfftApps/vlfftApps.c:4  * This file contains a multi-thread multi-core implementation of computing
- 2.emcv/cxcore/cxmisc.h:127 /* maximum possible number of threads in parallel implementations */
- 3.rgb2gray/Debug/rgb2gray.map:561 0c212e04   _Z20icvPthreadDestructorPv

https://github.com/LibreELEC/linux-amlogic
- drivers/amlogic/amports/thread_rw.c:2  * drivers/amlogic/amports/thread_rw.c
- drivers/amlogic/amports/thread_rw.h:8 ssize_t threadrw_write(struct file *file,
- arch/arm64/include/asm/thread_info.h:2  * Based on arch/arm/include/asm/thread_info.h
- kernel/kthread.c:1 /* Kernel thread helper functions.
- net/rds/threads.c:41  * work queues that execute in a connection managing thread.

https://github.com/hoene/libmysofa
- README.md:175 Then, all HRTFs having the same filename and sampling rate are stored only once in memory. If your program is using several threads, you must use appropriate synchronisation mechanisms so only a single thread can access the mysofa_open_cached and mysofa_close_cached functions at a given time.
- src/CMakeLists.txt:214   add_executable(multithread tests/multithread.c)
- src/tests/multithread.c:6 #include <pthread.h>

https://github.com/cisco/libacvp
- murl/README:42     * Murl is not thread-safe.  It should only be used by a single-threaded
- murl/murl_http.c:68  * parsed.  This will need to be addressed if/when thread-safety is
- murl/murl.c:1097     /* Free thread local error state, destroying hash upon zero refcount */
- config/ltmain.sh:4098     thread_safe=no
- src/acvp.c:2708  * it should be run on a separate thread if needed.

https://github.com/ivmai/cudd
- config.h.in:99 /* Define to 1 if C++ thread header is usable */
- configure.ac:69 AC_CHECK_LIB([pthread],[pthread_create],[have_pthreads=yes],[have_pthreads=no])
- cplusplus/multi.out:1 Report from thread 0 with 32 variables: 7598 nodes and 2147483648 minterms
- cplusplus/testmulti.cc:6   @brief Test program for multiple managers (one per thread).
- RELEASE.NOTES:4 It is now safe to use separate CUDD managers in different threads.

https://github.com/pycom/pycom-esp-idf
- components/esp32/include/xtensa/xos_thread.h:3 // xos_thread.h - XOS Thread API interface and data structures.
- components/pthread/pthread.c:15 // This module implements pthread API on top of FreeRTOS. API is implemented to the level allowing
- components/newlib/include/pthread.h:1 /*  pthread.h
- components/pthread/pthread_local_storage.c:15 #include <pthread.h>
- components/aws_iot/port/threads_freertos.c:21 #include "threads_platform.h"

https://github.com/NaluCFD/Nalu
- include/KokkosInterface.h:45     const size_t bytes_per_thread)
- include/AssembleElemSolverAlgorithm.h:35 calculate_shared_mem_bytes_per_thread(int lhsSize, int rhsSize, int scratchIdsSize, int nDim,
- include/AssembleFaceElemSolverAlgorithm.h:68       const int bytes_per_thread = calculate_shared_mem_bytes_per_thread(lhsSize, rhsSize, scratchIdsSize,
- src/AssembleNodalGradElemAlgorithm.C:207       //WARNING: do not thread this functor.  It is not thread-safe because each element scatters to all of its nodes.
- include/ScratchViews.h:732 int calculate_shared_mem_bytes_per_thread(int lhsSize, int rhsSize, int scratchIdsSize, int nDim,

https://github.com/LineageOS/android_kernel_google_marlin
- tools/perf/util/thread.c:6 #include "thread.h"
- tools/perf/util/thread_map.c:13 #include "thread_map.h"
- arch/x86/include/asm/thread_info.h:1 /* thread_info.h: low-level thread information
- net/rds/threads.c:41  * work queues that execute in a connection managing thread.
- kernel/kthread.c:1 /* Kernel thread helper functions.

https://github.com/klynastor/supervanitygen
- cpu.c:39 // Set this thread's CPU affinity to the Nth CPU in the list.
- vanitygen.c:51 /* Per-thread hash counter */
- externs.h:92 extern void set_working_cpu(int thread);
- secp256k1/include/secp256k1.h:35  *  A constructed context can safely be used from multiple threads

https://github.com/syzygy1/Cfish
- src/thread.c:30 #include "thread.h"
- src/thread.h:26 #include <pthread.h>
- src/tt.c:31 #include "thread.h"
- src/uci.c:29 #include "thread.h"
- src/main.c:29 #include "thread.h"

https://github.com/GrumpyOldPizza/arduino-STM32L4
- cores/stm32l4/hooks.c:23  * libraries or sketches that supports cooperative threads.
- platform.txt:40 compiler.cpp.flags=-mcpu={build.mcu} -mthumb -c -g {build.flags.optimize} {compiler.warning_flags} -std=gnu++11 -ffunction-sections -fdata-sections -fno-threadsafe-statics -nostdlib -fno-rtti -fno-exceptions -MMD
- system/STM32L4xx/Source/Makefile:9 CXXFLAGS = -mcpu=cortex-m4 -mthumb -c -g -Os $(WARNINGS) -std=gnu++11 -ffunction-sections -fdata-sections -fno-threadsafe-statics -nostdlib -fno-rtti -fno-exceptions -MMD $(EXTRAS) $(DEFINES) $(INCLUDES)
- cores/stm32l4/Makefile:9 CXXFLAGS = -mcpu=cortex-m4 -mthumb -c -g3 -Os $(WARNINGS) -std=gnu++11 -ffunction-sections -fdata-sections -fno-threadsafe-statics -nostdlib --param max-inline-insns-single=500 -fno-rtti -fno-exceptions -MMD $(EXTRAS) $(DEFINES) $(INCLUDES)

https://github.com/emeb/iceRadio
- MCU/f303_ice5_rxadc/ff9a/ffconf.h:177 /* The _FS_REENTRANT option switches the reentrancy (thread safe) of the FatFs module.

https://github.com/LSSTDESC/CCL
- pyccl/_core/schema.py:9 from _thread import RLock
- doc/0000-ccl_note/main.old:996 % to distribute the computation of a single $C_\ell$ on a single thread.
- doc/0000-ccl_note/main.tex:1044 % to distribute the computation of a single $C_\ell$ on a single thread.
- include/ccl_utils.h:68 int ccl_openmp_threads();
- src/ccl_utils.c:356 int ccl_openmp_threads()

https://github.com/RadeonOpenCompute/ROCm-Device-Libs
- ockl/src/hostcall.cl:28  *  The hostcall is executed for all active threads in the
- ockl/src/hostcall_impl.cl:234     // the first thread, while other threads reuse a value cached from
- opencl/src/devenq/schedule_rocm.cl:10     ulong  thread_counter;            //!< set to 0 before queuing the scheduler
- ockl/inc/hsa.h:154    * may also occur when the HSA runtime needs to spawn threads or create
- ockl/src/cg.cl:141 __ockl_multi_grid_thread_rank(void)

https://github.com/InputMapper/ViGEm
- ViGEmUM/ViGEmUM.cpp:34 #include <thread>

https://github.com/macosforge/darwinbuild
- darwinxref/DBPlugin.c:97 // one thread, with no plugin re-entrancy.
- patches/ppp-412.miniterm_and_noerr.patch:7      status = pthread_detach(pthread_self());
- CHANGES:24 	- darwintrace: fixed crash when used by multi-threaded applications
- darwintrace/darwintrace.c:35 #include <pthread.h>
- darwinxref/DBDataStore.c:41 // one thread, with no plugin re-entrancy.

https://github.com/ccj659/Incremental-update-master
- app_bsdiff/app_bsdiff/jni.h:162 #define JNI_EDETACHED    (-2)              /* thread detached from the VM */
- app_update/jni/bzip2/bzlib.h:229    threading-safeness of it.
- app_update/jni/bzip2/bzlib.c:1357    threading-safeness of it.
- app_bsdiff/app_bsdiff/bzlib.h:229    threading-safeness of it.
- app_bsdiff/app_bsdiff/bzlib.c:1358    threading-safeness of it.

https://github.com/yitiandelan/ZLCR
- README.md:39 2. [抛砖引玉 基于DSP的LCR表试制 供大家参考](https://www.amobbs.com/thread-5590156-1-1.html)
- firmware/rtos/src/main.c:392     /* Create the thread(s) */
- software/csharp/ZLCR/MainWindow.xaml.cs:46             Thread tty_thread = new Thread(ttyS0_thread);
- firmware/lib/BUILD.gn:191     "micropython/py/modthread.c",

https://github.com/android-coding-well/RtspPlayer
- mplayer/src/main/cpp/ffmpeg3/include/libavutil/threadmessage.h:42  *          lavu was built without thread support
- mplayer/src/main/cpp/player/Codec.cpp:122     pCodecCtx->thread_count = av_cpu_count();
- mplayer/src/main/cpp/ffmpeg3/include/libavutil/buffer.h:61  * @note Referencing and unreferencing the buffers is thread-safe and thus
- mplayer/src/main/cpp/ffmpeg3/include/libavutil/log.h:275  * @note The callback must be thread safe, even if the application does not use
- mplayer/src/main/cpp/ffmpeg3/include/libavfilter/avfilter.h:113  * The filter supports multithreading by splitting frames into multiple parts

https://github.com/ARMmbed/mbed-os-example-tls
- benchmark/mbed_app.json:7             "rtos.main-thread-stack-size": 32768,

https://github.com/technologiescollege/ArduinoTechnoEduc
- portable/packages/sandeepmistry/tools/gcc-arm-none-eabi/5_2-2015q4/share/doc/gcc-arm-none-eabi/html/gdb/thread_002did-syntax.html:1 <meta http-equiv="refresh" content="0; url=Packets.html#thread%2did%20syntax">
- java/lib/jvm.hprof.txt:39 THREAD END      mark the lifetime of Java threads
- portable/packages/arduino/tools/arm-none-eabi-gcc/7-2017q4/arm-none-eabi/include/threads.h:30 #include <machine/_threads.h>
- portable/packages/arduino/tools/arm-none-eabi-gcc/7-2017q4/arm-none-eabi/include/pthread.h:34 struct _pthread_cleanup_context {
- java/bin/client/Xusage.txt:15     -Xss<size>        set java thread stack size

https://github.com/huict/TCTI-V1OOPC-15-BASE
- 21-04-window/window.cpp:19 		/* Upon destruction, tell the main thread to stop */
- bmptk/tools/bmptk-ssc.py:33 import operator, subprocess, sys, os, argparse, threading
- 05-01-xyxy/print_line.cpp:22 		/* Upon destruction, tell the main thread to stop */
- Catch/include/internal/catch_message.hpp:24     // This may need protecting if threading support is added
- 06-template/window.cpp:19 		/* Upon destruction, tell the main thread to stop */

https://github.com/ccj659/NDK-FFmpeg-master
- ndk-ffmpeg_players/jni/include/ffmpeg/libavutil/threadmessage.h:42  *          lavu was built without thread support
- ndk-ffmpeg_players/jni/include/ffmpeg/libavutil/buffer.h:61  * @note Referencing and unreferencing the buffers is thread-safe and thus
- ndk-ffmpeg_players/jni/include/ffmpeg/libavutil/log.h:269  * @note The callback must be thread safe, even if the application does not use
- ndk-ffmpeg_players/jni/include/ffmpeg/libavutil/cpu.h:88  * @warning this function is not thread safe.
- ndk-ffmpeg_players/jni/include/ffmpeg/libavfilter/avfilter.h:439  * The filter supports multithreading by splitting frames into multiple parts

https://github.com/STMicroelectronics/STMems_Linux_Input_drivers
- fs/proc/thread_self.c:9  * /proc/thread_self:
- drivers/staging/speakup/thread.c:2 #include <linux/kthread.h>
- arch/sparc/include/asm/thread_info.h:5 #include <asm/thread_info_64.h>
- tools/testing/selftests/proc/thread-self.c:16 // Test that /proc/thread-self gives correct TGID/PID.
- include/linux/kthread.h:4 /* Simple interface for creating and stopping kernel threads without mess. */

https://github.com/piyushpandey013/ucGUI
- Start/GUI/MigrateByZhang/GUI_X.c:66 *   thread using the emWin API.
- Start/GUI/JPEG/Doc/libjpeg.txt:1556 eliminate response-time problems in single-threaded applications.  If you

https://github.com/armbian/linux
- arch/frv/include/asm/thread_info.h:1 /* thread_info.h: description
- kernel/kthread.c:1 /* Kernel thread helper functions.
- include/linux/kthread.h:3 /* Simple interface for creating and stopping kernel threads without mess. */
- arch/mips/include/asm/thread_info.h:1 /* thread_info.h: MIPS low-level thread information
- Documentation/usb/dwc3.txt:6 - Convert interrupt handler to per-ep-thread-irq

https://github.com/eleqian/WiDSO
- MCU/Libraries/CMSIS/RTOS/cmsis_os.h:13  *    osKernelStart added, optional feature: main started as thread

https://github.com/redcanaryco/atomic-red-team
- atomics/T1620/T1620.md:3 <blockquote>Adversaries may reflectively load code into a process in order to conceal the execution of malicious payloads. Reflective loading involves allocating then executing payloads directly within the memory of the process, vice creating a thread or process backed by a file path on disk. Reflectively loaded payloads may be compiled binaries, anonymous files (only present in RAM), or just snubs of fileless executable code (ex: position-independent shellcode).(Citation: Introducing Donut)(Citation: S1 Custom Shellcode Tool)(Citation: Stuart ELF Memory)(Citation: 00sec Droppers)(Citation: Mandiant BYOL)
- atomics/T1055.012/T1055.012.md:5 Process hollowing is commonly performed by creating a process in a suspended state then unmapping/hollowing its memory, which can then be replaced with malicious code. A victim process can be created with native Windows API calls such as <code>CreateProcess</code>, which includes a flag to suspend the processes primary thread. At this point the process can be unmapped using APIs calls such as <code>ZwUnmapViewOfSection</code> or <code>NtUnmapViewOfSection</code>  before being written to, realigned to the injected code, and resumed via <code>VirtualAllocEx</code>, <code>WriteProcessMemory</code>, <code>SetThreadContext</code>, then <code>ResumeThread</code> respectively.(Citation: Leitch Hollowing)(Citation: Elastic Process Injection July 2017)
- atomics/T1046/src/T1046.py:2 from threading import Thread
- atomics/T1055.001/T1055.001.md:5 DLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code> (which calls the <code>LoadLibrary</code> API responsible for loading the DLL). (Citation: Elastic Process Injection July 2017) 
- atomics/T1055.003/T1055.003.md:13 - [Atomic Test #1 - Thread Execution Hijacking](#atomic-test-1---thread-execution-hijacking)

https://github.com/yugabyte/yugabyte-db
- src/yb/util/thread.h:35 #include <pthread.h>
- src/yb/rpc/thread_pool.h:34   // Invoked in thread pool
- src/yb/server/server_base.h:157   scoped_refptr<Thread> metrics_logging_thread_;
- src/yb/util/threadpool.h:84 // Interesting thread pool metrics. Can be applied to the entire pool (see
- src/yb/yql/pggate/pggate_thread_local_vars.cc:15 #include "yb/yql/pggate/pggate_thread_local_vars.h"

https://github.com/imbushuo/mac-precision-touchpad
- src/AmtPtpDeviceSpiKm/Queue.c:250     //   to prevent other threads from manipulating the request concurrently.

https://github.com/tporadowski/redis
- src/Win32_Interop/Win32_PThread.h:19 /* threads avoiding pthread.h */
- src/Win32_Interop/Win32_PThread.c:13 /* Proxy structure to pass func and arg to thread */
- src/Win32_Interop/Win32_ThreadControl.c:29 // Safe mode means the threads are not touching the heap, or they are suspended because of an explicit suspension request
- utils/whatisdoing.sh:16     gdb -ex "set pagination 0" -ex "thread apply all bt" -batch -p $pid
- src/bio.c:19  * and a different thread and job queue for every job type.

https://github.com/xmrig/xmrig
- src/backend/common/Thread.h:26 #include <thread>
- src/backend/opencl/OclThread.cpp:32 static const char *kThreads      = "threads";
- doc/CPU.md:11 * `"rx/wow"` Exact match to algorithm `rx/wow`, defined 4 threads without CPU affinity.
- doc/BENCHMARK.md:10 This will run between 1 and 10 million RandomX hashes, depending on `bench` parameter, and print the time it took. First two commands use Monero variant (2 MB per thread, best for Zen2/Zen3 CPUs), second two commands use Wownero variant (1 MB per thread, useful for Intel and 1st gen Zen/Zen+ CPUs).
- src/backend/cpu/CpuThreads.h:44     inline void add(const CpuThread &thread)                { m_data.push_back(thread); }

https://github.com/SecWiki/windows-kernel-exploits
- MS09-050/README.md:39 [MS09-050漏洞测试](http://edu.aqniu.com/group/30/thread/107)  
- MS08-067/40279.py:6 from threading import Thread    #Thread is imported incase you would like to modify
- MS16-032/MS16-032.ps1:19       https://googleprojectzero.blogspot.co.uk/2016/03/exploiting-leaked-thread-handle.html
- MS14-058/Exploit/Exploit/Exploit.cpp:72 //Gets a pointer to the Win32ThreadInfo structure for the current thread by indexing into the Thread Execution Block for the current thread
- MS11-011/16262.c:150         HANDLE  LoggerThreadId;         // thread id of Logger

https://github.com/pygame/pygame
- src_py/threads/__init__.py:4 Like the map function, but can use a pool of threads.
- src_c/_pygame.h:274 /* thread check */
- docs/reST/ref/fastevent.rst:8               threads.
- src_c/time.c:225     /* This function runs in a separate thread, so we acquire the GIL,
- examples/audiocapture.py:33     """This is called in the sound thread.

https://github.com/Syllo/nvtop
- cmake/modules/FindTSan.cmake:28     "-g -fsanitize=thread"
- cmake/modules/FindSanitizers.cmake:90         add_sanitize_thread(${TARGET})
- src/get_process_info_linux.c:142  *   long process_num_threads;

https://github.com/huggingface/neuralcoref
- include/numpy/npy_interrupt.h:36  2) how to handle threads: apparently whether signals are delivered to
- include/numpy/ndarraytypes.h:18 /* Only use thread if configured in config and python supports it */
- include/numpy/multiarray_api.txt:2371 thread.  The hook should be written to be reentrant, if it performs
- neuralcoref/train/weights/tuned_word_vocabulary.txt:17367 thread
- neuralcoref/neuralcoref.pyx:598     def pipe(self, stream, batch_size=128, n_threads=1,

https://github.com/iqiyi/dpvs
- src/main.c:27 #include <pthread.h>
- src/log.c:47 static bool dpvs_log_thread_ready = false;
- tools/keepalived/TODO:75 Check timers passto to thread_... functions are reasonable, and stacktrace if not.
- doc/Worker-Performance-Tuning.md:7 DPVS is a multi-thread DPDK application program. It is based on the "polling" framework, all the threads would get into an infinite loop to process various jobs registered for the thread during the initialization stage. We call each such DPVS thread a DPVS Worker. There exists four different DPVS Worker types now.
- tools/keepalived/lib/notify.h:97 extern void notify_fifo_open(notify_fifo_t*, notify_fifo_t*, int (*)(thread_ref_t), const char *);

https://github.com/ShadowsocksR-Live/shadowsocksr-native
- src/shadowsocks.h:70  * Calling this function will block the current thread forever if the server
- cmake/configure.cmake:112 check_symbol_exists ( PTHREAD_PRIO_INHERIT "pthread.h" HAVE_PTHREAD_PRIO_INHERIT )
- src/client/tls_cli2.c:62 static void tls_cli_worker_thread(uv_work_t *req);
- src/ssrutils.c:122              * cannot be considered thread safe. */
- config.h.cmake:355 /* Enable threading extensions on Solaris.  */

https://github.com/viabtc/viabtc_exchange_server
- network/README.md:13 - `nw_job`   : thread pool
- network/nw_job.c:13 struct thread_arg {
- utils/ut_kafka.c:30 static void *thread_routine(void *data)
- network/nw_job.h:11 # include <pthread.h>
- utils/ut_kafka.h:12 # include <pthread.h>

https://github.com/Ewenwan/ShiYanLou
- openmp/readme.md:3 # parallel programming 并行编程   多线程Multi_thread
- learn_cpp/c++11新特性.md:19       3.1、std::thread
- OS/Linux/线程池分析.md:2 [代码](https://github.com/Ewenwan/thread_pool)
- OS/gdb_指南.txt:180 info threads              # 查看当前线程和 id
- shell/vim_sheets.txt:727 http://bbs.it-home.org/thread-80794-1-1.html

https://github.com/winshining/nginx-http-flv-module
- ngx_rtmp_limit_module.c:58     NULL,                                   /* init thread */
- ngx_rtmp.c:51 ngx_thread_volatile ngx_queue_t     ngx_rtmp_init_queue;
- ngx_rtmp_control_module.c:97     NULL,                               /* init thread */
- ngx_rtmp_core_module.c:260     NULL,                                  /* init thread */
- ngx_rtmp.h:816 extern ngx_thread_volatile ngx_queue_t      ngx_rtmp_init_queue;

https://github.com/containers/crun
- NEWS:110 - cgroup: fix creating cgroup under "domain threaded".
- contrib/seccomp-notify-plugin-example/full.c:3   It handles the notification in an async way.  Spawning a thread for each request.
- maint.mk:685   bsd_signal kill killpg pthread_kill pthread_sigmask raise sigaction \
- src/libcrun/utils.c:832   attr_dirfd = open ("/proc/thread-self/attr", O_DIRECTORY | O_RDONLY | O_CLOEXEC);
- src/libcrun/container.c:1683               /* pidfd_open returns EINVAL if the process is not a thread-group leader.

https://github.com/Sunzxyong/Tiny
- README.md:24 `Tiny` does not depend on any library , it keeps the code clean on architecture . `Tiny` also uses an asynchronous thread pool to compress images , and will hand out the result in the main thread when compression is completed.
- tiny/src/main/java/com/zxy/tiny/core/CompressThreadPool.java:24     public CompressThreadPool(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue, ThreadFactory threadFactory) {
- tiny/src/main/java/com/zxy/tiny/core/CompressThreadFactory.java:13     private static final String COMPRESS_THREAD_PREFIX_NAME = "tiny-compress-thread";
- tiny/src/main/java/com/zxy/tiny/common/TinyUtil.java:24                     "thread-name:" + Thread.currentThread().getName() +
- tiny/src/main/java/com/zxy/tiny/core/CompressFutureTask.java:36         Logger.e("task is done! thread-name:" + Thread.currentThread().getName());

https://github.com/eduard-permyakov/permafrost-engine
- deps/SDL2/include/SDL_thread.h:22 #ifndef SDL_thread_h_
- src/main.h:46 extern SDL_threadID   g_main_thread_id;   /* readonly */
- src/perf.h:41 #include <SDL_thread.h>
- scripts/stdlib/sched.py:4 No multi-threading is implied; you are supposed to hack that
- src/perf.c:105 static khash_t(pstate) *s_thread_state_table;

https://github.com/akermu/emacs-libvterm
- vterm.el:113              ;; `(locate-library "vterm")'. See emacs-devel thread

https://github.com/jtesta/ssh-mitm
- openssl-1.0.2u/crypto/threads/th-lock.c:1 /* crypto/threads/th-lock.c */
- openssl-1.0.2u/crypto/threads/netware.bat:2 rem batch file to build multi-thread test ( mttest.nlm )
- openssl-1.0.2u/crypto/threads/mttest.c:1 /* crypto/threads/mttest.c */
- openssl-1.0.2u/INSTALL.NW:367 Multi-threaded Development
- JoesAwesomeSSHMITMVictimFinder.py:32 import argparse, importlib, ipaddress, os, signal, subprocess, sys, tempfile, threading

https://github.com/fossasia/pslab-firmware
- src/sdcard/fatfs/ffconf.h:105 /   1: Enable LFN with static working buffer on the BSS. Always NOT thread-safe.
- src/sdcard/fatfs/00history.txt:239   Fixed wrong media change can lead a deadlock at thread-safe configuration.
- src/sdcard/fatfs/ff.c:208 #error Static LFN work area cannot be used at thread-safe configuration

https://github.com/ScanNet/ScanNet
- Server/upload.py:15 import threading
- AnnotationTools/ProjectAnnotations/Visualizer.cpp:330 	int numThreads = omp_get_max_threads();
- Calibrate/src/calibration.h:259 			if (omp_get_thread_num() == 0) {
- ScannerApp/Scanner/ViewController+Camera.mm:33              // This block fires on a separate thread, so we need to ensure any actions here
- Server/config/upload.ini:33 format = %(asctime)-15s [%(levelname)-5.5s] %(process)d:%(thread)s [%(name)s.%(funcName)s:%(lineno)d] -- %(message)s

https://github.com/Ysurac/openmptcprouter
- common/package/boot/uboot-ipq40xx/src/arch/arm/cpu/ixp/npe/IxOsalOsThread.c:4  * @brief OS-specific thread implementation.
- common/package/boot/uboot-ipq40xx/src/doc/README.sched:4   'sched.c' provides an very simplistic multi-threading scheduler.
- common/package/boot/uboot-ipq40xx/src/drivers/qe/uec.h:231 /* Tx thread data, each Tx thread has one this struct.
- common/package/boot/uboot-ipq40xx/src/drivers/qe/qe.c:113  * we just need to know what the SNUMs are for the threads.
- common/package/boot/uboot-ipq40xx/src/arch/arm/include/asm/processor.h:66 struct thread_struct {

https://github.com/RedisBloom/RedisBloom
- build/rmutil/Makefile:68 	$(SHOW)$(CC) -Wall -o $@ $^ -lc -lpthread -O0
- tests/flow/tests.sh:58 		SAN=type              Use LLVM sanitizer (type=address|memory|leak|thread) 
- tests/benchmarks/cf_add_cap10M.yml:14     - threads: 2
- tests/benchmarks/topk_incrby_k100.yml:14     - threads: 2
- tests/benchmarks/tdigest_add_comp50.yml:14     - threads: 2

https://github.com/open5gs/open5gs
- lib/ipfw/glue.h:223  * our own struct thread
- lib/core/ogs-thread.h:33  * https://github.com/mongodb/mongo-c-driver/blob/master/src/libmongoc/src/mongoc/mongoc-thread-private.h
- lib/core/ogs-thread.c:23 #define OGS_LOG_DOMAIN __ogs_thread_domain
- lib/core/meson.build:28     pthread.h
- src/mme/mme-init.c:34 static ogs_thread_t *thread;

https://github.com/jarcode-foss/glava
- glava/fifo.h:5 #include <pthread.h>
- glava-obs/entry.c:4 #include <obs/util/threading.h>
- glava/glava.c:6 #include <pthread.h>
- shaders/glava/util/fft_radix16.glsl:19 // Radix 16 FFT is implemented by doing separate radix-4 FFTs in four threads, then the results are shared via shared memory,
- glfft/glfft.cpp:119     // To avoid too many threads per workgroup due to workgroup_size_z,

https://github.com/Meituan-Dianping/MyFlash
- source/binlogParseGlib.c:1624   guint32 threadId;

https://github.com/emmericp/ixy
- README.md:31 * Support for multiple device queues and multiple threads
- src/memory.h:36 	// replacing this with a lock-free queue (or stack) makes this thread-safe
- src/memory.c:89 // this is currently not yet thread-safe, i.e., a pool can only be used by one thread,
- src/driver/virtio.c:310 // this is not thread-safe, (but we only support one queue anyways)

https://github.com/arduino/ArduinoCore-avr
- firmwares/atmegaxxu2/arduino-usbserial/Lib/LightweightRingBuff.h:101 		 *        stored in the given buffer; this value may change as other threads write new data and so
- firmwares/wifishield/wifiHD/src/SOFTWARE_FRAMEWORK/SERVICES/LWIP/lwip-1.3.2/src/include/lwip/sys.h:67 #define sys_thread_new(n,t,a,s,p)
- firmwares/wifishield/wifiHD/src/SOFTWARE_FRAMEWORK/SERVICES/LWIP/lwip-1.3.2/src/include/lwip/api_msg.h:57     for a netconn in another thread context (mainly used to process netconns
- firmwares/wifishield/wifiHD/src/SOFTWARE_FRAMEWORK/COMPONENTS/WIFI/HD/wlap_api.h:75  * This function is not thread safe. It must be called in the
- firmwares/wifishield/wifiHD/src/SOFTWARE_FRAMEWORK/SERVICES/LWIP/lwip-1.3.2/src/include/lwip/api.h:128       by the netconn application thread (can grow quite big) */

https://github.com/node-on-mobile/node-on-android
- app/src/main/include/node/pthread-barrier.h:20 #include <pthread.h>
- app/src/main/cpp/native-lib.cpp:3 #include <thread>
- app/src/main/include/node/uv-unix.h:42 #include <pthread.h>
- app/src/main/include/node/v8-platform.h:66    * whether to execute the task on a dedicated thread.
- app/src/main/include/node/uv-darwin.h:38   uv_thread_t cf_thread;                                                      \

https://github.com/dekuNukem/duckyPad
- firmware/code/Src/main.c:229   /* Create the thread(s) */
- firmware/code/Inc/ffconf.h:149 /   1: Enable LFN with static working buffer on the BSS. Always NOT thread-safe.
- pc_software/duckypad_config.py:20 import threading
- firmware/code/Inc/FreeRTOSConfig.h:54     compatible FAT file system, and our tiny thread aware UDP/IP stack.
- resources/old_v1/firmware/Inc/ffconf.h:149 /   1: Enable LFN with static working buffer on the BSS. Always NOT thread-safe.

https://github.com/FDio/vpp
- docs/developer/corearchitecture/multi_thread.rst:1 .. _vpp_multi_thread:
- src/plugins/ioam/export/ioam_export_thread.c:16  * ioam_export_thread.c
- src/vlib/threads.h:15 #ifndef included_vlib_threads_h
- src/vlib/threads.c:25 #include <vlib/threads.h>
- src/vlibapi/api_doc.rst:81 -  Barrier synchronization of worker threads across thread-unsafe

https://github.com/RavenProject/Ravencoin
- src/checkqueue.h:14 #include <boost/thread/condition_variable.hpp>
- build-aux/m4/ax_boost_thread.m4:2 #      http://www.gnu.org/software/autoconf-archive/ax_boost_thread.html
- src/leveldb/port/thread_annotations.h:8 // Some environments provide custom macros to aid in static thread-safety
- src/threadsafety.h:14 // See http://clang.llvm.org/docs/LanguageExtensions.html#threadsafety
- build-aux/m4/ax_pthread.m4:2 #        http://www.gnu.org/software/autoconf-archive/ax_pthread.html

https://github.com/SciresM/boot9strap
- stage2/arm9/source/fatfs/ffconf.h:121 /   1: Enable LFN with static  working buffer on the BSS. Always NOT thread-safe.
- stage2/arm9/source/fatfs/00history.txt:239   Fixed wrong media change can lead a deadlock at thread-safe configuration.
- stage2/arm9/source/fatfs/ff.c:240 #error Static LFN work area cannot be used in thread-safe configuration

https://github.com/libunwind/libunwind
- src/coredump/_UCD_get_threadinfo_prstatus.c:2  * Extract threadinfo from a coredump (supported targets)
- TODO:35      called, it is clear that the unwind info for the calling thread
- configure.ac:215 AC_ARG_ENABLE([per-thread-cache],
- src/arm/Gtrace.c:32 #pragma weak pthread_once
- doc/unw_step.man:51 is thread\-safe. If cursor cp

https://github.com/kanflo/opendps
- emu/README.md:9 Comms thread listening on UDP port 5005
- emu/dpsemul.c:30 #include <pthread.h>
- dpsctl/dpsctl.py:47 import threading
- emu/Makefile:2 LIBS = -lm -lpthread
- opendps/ringbuf.h:32  #include <pthread.h>

https://github.com/Qihoo360/mysql-sniffer
- libnids-1.24/configure.in:117 	PKG_CHECK_MODULES(GTHREAD, gthread-2.0 >= 2.2.0,,)
- libnids-1.24/src/libnids.c:199 /* called either directly from pcap_hand() or from cap_queue_process_thread()
- libnids-1.24/config.log:75 Configured with: ../configure --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --with-bugurl=http://bugzilla.redhat.com/bugzilla --enable-bootstrap --enable-shared --enable-threads=posix --enable-checking=release --with-system-zlib --enable-__cxa_atexit --disable-libunwind-exceptions --enable-gnu-unique-object --enable-languages=c,c++,objc,obj-c++,java,fortran,ada --enable-java-awt=gtk --disable-dssi --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-1.5.0.0/jre --enable-libgcj-multifile --enable-java-maintainer-mode --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --disable-libjava-multilib --with-ppl --with-cloog --with-tune=generic --with-arch_32=i686 --build=x86_64-redhat-linux
- libnids-1.24/tags:85 LIBS	samples/Makefile	/^LIBS		= -L..\/src -lnids $(PCAPLIB) $(LNETLIB) -lgthread-2.0 -lnsl $/;"	m
- libnids-1.24/CHANGES:27 separate thread for packet capture; 

https://github.com/akospasztor/stm32-bootloader
- lib/fatfs/ff.c:461 #error Static LFN work area cannot be used at thread-safe configuration
- projects/STM32L496-CustomHw/include/ffconf.h:100 /   1: Enable LFN with static working buffer on the BSS. Always NOT thread-safe.
- projects/STM32L476-CustomHw/include/ffconf.h:100 /   1: Enable LFN with static working buffer on the BSS. Always NOT thread-safe.
- projects/STM32L496-Discovery/include/ffconf.h:100 /   1: Enable LFN with static working buffer on the BSS. Always NOT thread-safe.

https://github.com/pret/pokefirered
- src/battle_anim_bug.c:243 // Creates a single web thread that travels from attacker to target.
- INSTALL.md:475 See [the GNU docs](https://www.gnu.org/software/make/manual/html_node/Parallel.html) and [this Stack Exchange thread](https://unix.stackexchange.com/questions/208568) for more information.
- src/graphics.c:591 const u32 gBattleAnimSpriteGfx_WebThread[] = INCBIN_U32("graphics/battle_anims/sprites/web_thread.4bpp.lz");
- src/data/pokemon/pokedex_text_fr.h:1177     "thread. It then waits patiently for prey\n"

https://github.com/holzschu/ios_system
- curl/curl/lib/asyn-thread.c:41 #    include <pthread.h>
- libinfo/lookup.subproj/thread_data.c:24 #include "thread_data.h"
- libinfo/lookup.subproj/thread_data.h:29 si_item_t *LI_get_thread_item(uint32_t key);
- curl/curl/docs/libcurl/libcurl-thread.3:23 .TH libcurl-thread 3 "April 10, 2017" "libcurl 7.54.0" "libcurl thread safety"
- curl/curl/docs/examples/smooth-gtk-thread.c:23  * A multi threaded application that uses a progress bar to show

https://github.com/e-ago/bitcracker
- src_CUDA/main.cu:25 int gpu_id=0, psw_x_thread=8, tot_psw=0;
- README.md:107 - `-t` : number of passwords processed by each CUDA thread
- src_CUDA/bitcracker.h:110 extern int psw_x_thread;
- src_OpenCL/opencl_attack.c:289     printf("Type of attack: %s\n\tLocal Work Size: %zd\n\tWork Group Number: %d\n\tGlobal Work Size: %zd\n\tPassword per thread: %d\n\tPassword per kernel: %d\n\tDictionary: %s\n\tStrict Check (-s): %s\n\tMAC Comparison (-m): %s\n\t\n\n", 
- src_OpenCL/main.c:39 int psw_x_thread=8;

https://github.com/Atoptool/atop
- README.md:16 process (and thread) it shows e.g. the CPU utilization, memory growth,
- README:49 per process/thread as described in www.atoptool.nl/netatop.php
- atopgpud:52 import threading
- netatop.h:74 // get counters for thread group (i.e. process):  input is 'id' (pid)
- netatopbpfif.c:9 ** and thread, and exited process.

https://github.com/mz-automation/libiec61850
- hal/inc/hal_thread.h:2  *  thread_hal.h
- hal/thread/bsd/thread_bsd.c:2  * thread_bsd.c
- hal/thread/macos/thread_macos.c:2  * thread_macos.c
- hal/thread/win32/thread_win32.c:2  *  thread_win32.c
- examples/iec61850_client_example_no_thread/client_example_no_thread.c:2  * client_example_no_thread.c

https://github.com/espressif/esp-at
- examples/at_spi_master/sdspi/README.md:80 The app\_main.c file is mainly the usage of SDIO SPI, including two threads (the receiving thread and the sending thread).
- examples/at_sdio_host/STM32/Src/freertos.c:139   /* Create the thread(s) */
- examples/at_sdio_host/STM32/Drivers/CMSIS/Include/tz_context.h:60 /// Load secure context (called on RTOS thread context switch)
- components/rainmaker/at_rainmaker.c:1670     // ESP RainMaker agent thread is not running
- tools/relink/object.csv:63 libpthread.a,pthread.c.obj,esp-idf/pthread/CMakeFiles/__idf_pthread.dir/pthread.c.obj

https://github.com/zjupure/GlideWebpDecoder
- webp_decoder/src/main/jni/libwebp/src/utils/thread_utils.c:10 // Multi-threaded worker
- webp_decoder/src/main/jni/libwebp/src/utils/thread_utils.h:10 // Multi-threaded worker
- webp_decoder/src/main/jni/libwebp/Android.mk:75     src/utils/thread_utils.c \
- webp_decoder/src/main/jni/libwebp/src/dsp/cpu.h:162 // This macro prevents thread_sanitizer from reporting known concurrent writes.
- webp_decoder/src/main/jni/libwebp/src/utils/Makefile.am:35 COMMON_SOURCES += thread_utils.c

https://github.com/jpbruyere/vkvg
- src/deps/tinycthread.c:30 #include "tinycthread.h"
- src/deps/tinycthread.h:32 * TinyCThread is a minimal, portable implementation of basic threading
- src/vkvg_fonts.h:145 	mtx_t			mutex;			/* font cache global mutex, used only if device is in thread aware mode (see: vkvg_device_set_thread_aware) */
- README.md:76 - Context should be thread safe, extensive tests required.
- src/vkvg_device.c:458 	if (dev->threadAware)

https://github.com/ramapcsx2/gbs-control
- README.md:27 Development threads:  

https://github.com/introlab/odas
- src/general/thread.c:3     * \file     thread.c
- include/odas/general/thread.h:5     * \file     thread.h
- demo/odaslive/threads.c:2     #include "threads.h"
- CMakeLists.txt:41     src/general/thread.c
- demo/odaslive/main.c:7     #include "threads.h"

https://github.com/vozlt/nginx-module-sysguard
- src/ngx_http_sysguard_module.c:117     NULL,                                   /* init thread */

https://github.com/r-lib/pak
- src/library/cli/src/thread.c:4 #include <pthread.h>
- src/library/processx/src/win/thread.c:17 HANDLE processx__iocp_thread = NULL;
- src/library/cli/src/init.c:15   clic_stop_thread();
- src/library/processx/src/Makevars.win:6 	  win/utils.o win/thread.o cleancall.o
- src/library/cli/src/cli.h:65 SEXP clic_start_thread(SEXP pkgenv, SEXP tick, SEXP speed);

https://github.com/fletcher/MultiMarkdown-6
- src/token.h:70 /// Should call init() once per thread/use, and drain() once per thread/use.
- QuickStart/QuickStart.txt:62 These steps are managed using the `mmd_engine` "object".  An individual `mmd_engine` cannot be used by multiple threads simultaneously, so if libMultiMarkdown is to be used in a multithreaded program, a separate `mmd_engine` should be created for each thread.  Alternatively, just use the slightly more abstracted `mmd_convert_string()` function that handles creating and destroying the `mmd_engine` automatically. 
- src/d_string.c:81  *	http://groups.google.com/group/jansson-users/browse_thread/thread/
- src/miniz.h:1119 /* Note that the m_last_error functionality is not thread safe. */
- src/miniz.c:670 /* Purposely making these tables static for faster init and thread safety. */

https://github.com/h2o/quicly
- include/quicly/cid.h:47  * Authentication of the CID can be done by validating if server_id and thread_id contain correct values.
- lib/defaults.c:98  * used concurrently from multiple threads.
- include/quicly/local_cid.h:65      * Identifier of the connection used by quicly. Three tuple of (node_id, thread_id, master_id) is used to identify the
- src/cli.c:901                          * because loop is prevented by authenticating the CID (by checking node_id and thread_id). If the peer is
- lib/quicly.c:27 #include <pthread.h>

https://github.com/WangShuo1143368701/FFmpegAndroid
- app/libs/include/libavutil/threadmessage.h:42  *          lavu was built without thread support
- app/libs/include/libavutil/buffer.h:61  * @note Referencing and unreferencing the buffers is thread-safe and thus
- app/libs/include/libavutil/log.h:275  * @note The callback must be thread safe, even if the application does not use
- app/libs/include/libavfilter/avfilter.h:113  * The filter supports multithreading by splitting frames into multiple parts
- app/libs/include/libavcodec/avcodec.h:1055  * Codec supports frame-level multithreading.

https://github.com/pygobject/pycairo
- cairo/__init__.pyi:1943         Acquires the device for the current thread. This function will block
- NEWS:718 Pycairo 1.8.0 resulted in crashes for some applications using threads. So

https://github.com/InsomniacGames/ig-cachesim
- Examples/ThreadedExample/ThreadedExample.cpp:33 #include <thread>
- CacheSim/CacheSim.h:83   /// Returns a thread ID suitable for use with CachesimSetThreadCoreMapping
- CacheSim/CacheSimLinux.cpp:139   // Make sure the thread state is up to date.
- CacheSim/CacheSimCommon.inl:72   static thread_local ThreadState s_ThreadState;
- CacheSim/CacheSimWindows.cpp:46 /// When taking an exception for *every instruction* on *every thread* that lock is extremely contended.

https://github.com/hasherezade/process_doppelganging
- ntddk.h:2902     LPC_CLIENT_DIED,                    // (6) Messages to thread termination ports

https://github.com/floooh/sokol-samples
- sapp/modplay-sapp.c:18 // use stream callback (0) or push-from-mainthread (1) model
- sapp/loadpng-sapp.c:4 //  (this is non-perfect since it happens on the main thread)
- libs/stb/stb_image.h:875 // this is not threadsafe
- libs/spine-c/src/spine/VertexAttachment.c:33 /* FIXME this is not thread-safe */
- libs/ozzanim/include/ozz/base/containers/intrusive_list.h:55             // easily lead to thread-unsafe code.

https://github.com/atlas0fd00m/rfcat
- rflib/ccspecan.py:33 import threading
- rfcat_server:9 import threading
- README.msfrelay:66     bgrun                Executes a meterpreter script as a background thread
- rflib/chipcon_usb.py:19 import threading
- firmware/include/chipcon_usb.h:676  * If a thread in your driver uses this call, make sure your disconnect()

https://github.com/Hamlib/Hamlib
- macros/ax_pthread.m4:2 #        http://www.gnu.org/software/autoconf-archive/ax_pthread.html
- src/event.c:44 #  include <pthread.h>
- src/multicast.c:29 static pthread_t threadid;
- PLAN:16 o thread safe (reentrant) would be a must
- rotators/ars/ars.h:34     pthread_t thread;

https://github.com/PacktPublishing/Linux-Device-Drivers-Development
- Chapter03/dedicated-workqueue.c:26     wq = create_singlethread_workqueue("my_single_thread");
- Chapter14/gpio-legacy-module.c:66     retval = request_threaded_irq(irq, NULL,\
- Chapter14/gpio-descriptor-module.c:73     retval = request_threaded_irq(irq, NULL,
- Chapter14/gpio-legacy-dt-module.c:82     retval = request_threaded_irq(irq, NULL,

https://github.com/zserge/tray
- README.md:125 All functions are meant to be called from the UI thread only.

https://github.com/haasn/libplacebo
- src/pl_thread.h:55 typedef void pl_thread;
- src/pl_thread_win32.h:122 typedef HANDLE pl_thread;
- src/pl_thread_pthread.h:21 #include <pthread.h>
- meson.build:230       '128': 'add pl_opengl_params.make/release_current, for thread safety',
- src/log.h:28 // Warning: Not entirely thread-safe. Exercise caution when using. May result

https://github.com/ARM-software/CMSIS-FreeRTOS
- Source/include/picolibc-freertos.h:32 /* Use picolibc TLS support to allocate space for __thread variables,
- Source/portable/MSVC-MingW/portmacro.h:155  * thread.  The interrupt number must be above any used by the kernel itself
- CMSIS/RTOS2/FreeRTOS/Source/cmsis_os1.c:35 osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument) {
- DoxyGen/src/cmsis_freertos.txt:249   Application thread: Initialize and start the Application
- CMSIS/RTOS2/FreeRTOS/Source/ARM/clib_arm.c:70 /* C/C++ Standard Library Multithreading Interface */

https://github.com/embeddedartistry/libc
- BuildOptions.cmake:69   add_compile_options(-fsanitize=thread)
- Makefile:153 	@echo "         Options are: none (default), address, thread, undefined, memory,"
- include/stdlib.h:549  * rand is not guaranteed to be thread-safe.
- src/meson.build:268 	# with libc, for example -lpthread or -lm
- Makefile-cmake:152 	@echo "        Options are: none (default), address, thread, undefined, memory,"

https://github.com/bitcoin-core/btcdeb
- .cirrus.yml:84   name: '[sanitizers: thread (TSan)] [focal]'
- secp256k1/include/secp256k1.h:37  *  A constructed context can safely be used from multiple threads
- ci/test/00_setup_env_native_asan.sh:10 export PACKAGES="clang llvm python3-zmq qtbase5-dev qttools5-dev-tools libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libnatpmp-dev libzmq3-dev libqrencode-dev libsqlite3-dev"
- ci/test/00_setup_env_native_tsan.sh:14 export BITCOIN_CONFIG="--enable-zmq --with-gui=no CPPFLAGS='-DARENA_DEBUG -DDEBUG_LOCKORDER' CXXFLAGS='-g' --with-sanitizers=thread CC=clang CXX='clang++ -stdlib=libc++' --with-boost-process"
- ci/test/00_setup_env_native_msan.sh:12 LIBCXX_FLAGS="-nostdinc++ -stdlib=libc++ -L${LIBCXX_DIR}lib -lc++abi -I${LIBCXX_DIR}include -I${LIBCXX_DIR}include/c++/v1 -lpthread -Wl,-rpath,${LIBCXX_DIR}lib -Wno-unused-command-line-argument"

https://github.com/Siguza/IOHIDeous
- src/hid/exploit.c:1 #include <pthread.h>            // pthread_*
- src/hid/main.c:3 #include <pthread.h>            // pthread_*
- docs/index.md:167 - In one thread, we just spam a value to `eop->evGlobalsOffset`.
- src/hid/macf.h:319     addr_t mpo_thread_userret;
- src/poc/main.c:1 #include <pthread.h>

https://github.com/SmartisanTech/SmartisanOS_Kernel_Source
- fs/btrfs/async-thread.c:19 #include <linux/kthread.h>
- arch/hexagon/include/asm/thread_info.h:39 extern struct thread_info *alloc_thread_info_node(struct task_struct *tsk, int node);
- kernel/kthread.c:1 /* Kernel thread helper functions.
- include/linux/kthread.h:3 /* Simple interface for creating and stopping kernel threads without mess. */
- Documentation/usb/dwc3.txt:6 - Convert interrupt handler to per-ep-thread-irq

https://github.com/Rinnegatamante/vitaGL
- README.md:37 `HAVE_PTHREAD=1` Use pthread instead of sceKernel for starting garbage collector thread.<br>
- source/gxm.c:97 static int gc_thread_priority = 0x10000100;
- samples/skybox_env_map/stb_image.h:52       2.24  (2020-02-02) fix warnings; thread-local failure_reason and flip_vertically

https://github.com/devnoname120/vhbb
- src/nosleep_thread.h:6 int nosleep_thread(SceSize args, void *argp);
- src/install_thread.cpp:1 #include "install_thread.h"
- src/install_thread.h:12 int install_thread(SceSize args_size, InstallArguments *installArgs);
- src/nosleep_thread.cpp:1 #include "nosleep_thread.h"
- src/fetch_load_icons_thread.cpp:1 #include "fetch_load_icons_thread.h"

https://github.com/jovanbulck/sgx-step
- sdk/gramine/README.md:90 |`sgx.thread_num = 4`                        | This is probably optional, but Gramine needs 3 threads according to the [docs](https://gramine.readthedocs.io/en/latest/manifest-syntax.html#number-of-threads-deprecated-syntax), so we set it to 4 (assuming the binary is single-threaded) |
- libsgxstep/aep_trampoline.S:51      * Save TCS address thread-local on the stack
- sdk/gramine/0002-helloworld-Nemesis.patch:20 +sgx.thread_num = 4
- app/apic-ipi/README.md:13 first synchronize spy and victim threads, before triggering the IPI in the spy
- sdk/intel-sdk/0001-reconfigure-AEP-TCS-ebase.patch:55  /* int __morestack(const tcs_t *tcs, const int fn, const void *ocall_table, const void *ms, CTrustThread *trust_thread); */

https://github.com/Samgisaninja/SuccessionRestore
- SuccessionRestore/Objective-Zip/ZLib/crc32.c:19   one thread to use crc32().
- SuccessionRestore/Objective-Zip/ZLib/infback.c:79    used for threaded applications, since the rewriting of the tables and virgin
- SuccessionRestore/Objective-Zip/ZLib/zlib.h:144    If zlib is used in a multi-threaded application, zalloc and zfree must be
- SuccessionRestore/Objective-Zip/ZLib/inflate.c:258    used for threaded applications, since the rewriting of the tables and virgin

https://github.com/google/kmsan
- net/rxrpc/io_thread.c:50 	rxrpc_wake_up_io_thread(local);
- include/linux/thread_info.h:2 /* thread_info.h: common low-level thread information accessors
- tools/perf/util/thread_map.h:7 #include <perf/threadmap.h>
- arch/sh/include/asm/thread_info.h:27 struct thread_info {
- lib/Kconfig.kcsan:7 	def_bool (CC_IS_CLANG && $(cc-option,-fsanitize=thread -mllvm -tsan-distinguish-volatile=1)) || \

https://github.com/JingchengLi/swapdb
- swap-ssdb-1.9.2/src/util/thread.h:14 #include <pthread.h>
- swap-ssdb-1.9.2/ChangeLog:29 		- Fix Logger bug on multi-threads, which halt the service for seconds(2016-01-25)
- swap-redis-4.0.0/src/bio.c:19  * and a different thread and job queue for every job type.
- swap-redis-4.0.0/deps/jemalloc/INSTALL:144     Disable thread-specific caches for small objects.  Objects are cached and
- swap-ssdb-1.9.2/src/ssdb/ttl.h:10 #include "../util/thread.h"

https://github.com/muellerberndt/frida-detection
- AntiFrida/app/src/main/cpp/native-lib.cpp:5 #include <pthread.h>

https://github.com/smartdone/dexdump
- app/src/main/jni/dump.h:7 #include <pthread.h>

https://github.com/lixiaoshaxing/MultiMediaLearn
- distribution/ffmpeg/include/ffmpeg/libavutil/threadmessage.h:42  *          lavu was built without thread support
- app/src/main/cpp/ffmpeg/opensl_io.c:475 // thread Locks
- app/src/main/cpp/ffmpeg/native-player.c:13 #include "pthread.h"
- app/src/main/cpp/ffmpeg/native-live.c:12 #include "pthread.h"
- app/src/main/java/com/lx/multimedialearn/utils/WeakHandler.java:23      * current thread.

https://github.com/r-lib/fs
- src/libuv-1.44.2/src/win/thread.c:77 /* Verify that uv_thread_t can be stored in a TLS slot. */
- src/libuv-1.44.2/m4/ax_pthread.m4:2 #        https://www.gnu.org/software/autoconf-archive/ax_pthread.html
- src/libuv-1.44.2/src/threadpool.c:35 static unsigned int idle_threads;
- src/libuv-1.44.2/src/unix/thread.c:25 #include <pthread.h>
- src/libuv-1.44.2/Makefile.am:24                     include/uv/threadpool.h \

https://github.com/Seagate/openSeaChest
- Make/gccWin/Makefile.gccWin:188 #https://sourceforge.net/p/mingw-w64/mailman/mingw-w64-public/thread/20120411101049.GA4263%40glandium.org/#msg29128250
- Make/vmware/Makefile:281 VMW_uw32_beta_COMPILEFLAGS = -pthread -fwrapv -pipe -fno-working-directory -fno-strict-aliasing -funwind-tables -fasynchronous-unwind-tables -Wall -O2 -march=i686 -g -fPIC -fstack-protector -fstack-protector-all -fno-strict-aliasing -Wno-unused-but-set-variable -Wno-unused-value -Wno-enum-compare -Wno-switch --sysroot=$(CAYMAN_ESX_GLIBC_DIR)/sysroot -m32 -isystem $(CAYMAN_ESX_TOOLCHAIN_DIR)/usr/lib/gcc/x86_64-vmk-linux-gnu/4.8.4/include -D_LARGEFILE64_SOURCE -D_XOPEN_SOURCE=500 -D_SVID_SOURCE -DVMX86_DEBUG -D_FORTIFY_SOURCE=1 -D_FILE_OFFSET_BITS=64 -D_BSD_SOURCE -Dlinux -DVMX86_BETA
- Make/vmware/Makefile.openSeaChest_firmware:281 VMW_uw32_beta_COMPILEFLAGS = -pthread -fwrapv -pipe -fno-working-directory -fno-strict-aliasing -funwind-tables -fasynchronous-unwind-tables -Wall -O2 -march=i686 -g -fPIC -fstack-protector -fstack-protector-all -fno-strict-aliasing -Wno-unused-but-set-variable -Wno-unused-value -Wno-enum-compare -Wno-switch --sysroot=$(CAYMAN_ESX_GLIBC_DIR)/sysroot -m32 -isystem $(CAYMAN_ESX_TOOLCHAIN_DIR)/usr/lib/gcc/x86_64-vmk-linux-gnu/4.8.4/include -D_LARGEFILE64_SOURCE -D_XOPEN_SOURCE=500 -D_SVID_SOURCE -DVMX86_DEBUG -D_FORTIFY_SOURCE=1 -D_FILE_OFFSET_BITS=64 -D_BSD_SOURCE -Dlinux -DVMX86_BETA

https://github.com/tomwimmenhove/subarufobrob
- fobrob.c:31 #include <pthread.h>
- CMakeLists.txt:31 TARGET_LINK_LIBRARIES(fobrob encoding modem protocol pthread rtlsdr m)

https://github.com/yunnian/php-nsq
- nsq_lookupd.c:30 #include "event2/thread.h"
- nsq.c:51 /* True global resources - no need for thread safety here */

https://github.com/mz-automation/lib60870
- lib60870-C/src/hal/inc/hal_thread.h:2  *  thread_hal.h
- lib60870-C/src/hal/thread/bsd/thread_bsd.c:2  * thread_bsd.c
- lib60870-C/src/hal/thread/macos/thread_macos.c:2  * thread_macos.c
- lib60870-C/src/hal/thread/win32/thread_win32.c:2  *  thread_win32.c
- lib60870-C/Makefile:21 LIB_SOURCE_DIRS += src/hal/thread/win32

https://github.com/Leandros/WindowsHModular
- include/win32/process.h:21 /* Originally defined in threads.h */
- include/win32/windows.h:2949 /* Originally defined in threads.h */
- include/win32/make.bat:37 type threads.h >> windows.h
- include/win32/windows_modular.h:74 #include "threads.h"
- README.md:41 	- `threads.h`

https://github.com/EionRobb/purple-discord
- README.md:57 | threads | `/threads` | Display active channel threads. |
- po/purple-discord.pot:56 msgid "A new thread has been started!"
- libdiscord.c:288 	GHashTable *threads;

https://github.com/icing/mod_md
- src/mod_md_drive.c:196     /* mod_watchdog invoked us as a single thread inside the whole server (on this machine).
- src/md_ocsp.c:27 #include <apr_thread_mutex.h>
- README.md:214 When Apache is done with start up, `mod_md` spins up a background thread that contacts LetsEncrypt and negotiates a certificate for `mydomain.com`. This usually takes a few seconds, but there are several things that may delay this: bad internet connectivity, maintenance at LetsEncrypt, problems with DNS resolutions somewhere, etc.
- event_interface_notes.txt:161 not block the service thread in HTTPD.
- src/mod_md_ocsp.c:152     /* mod_watchdog invoked us as a single thread inside the whole server (on this machine).

https://github.com/niekiran/MasteringMCU
- Resources/Source_code/Legacy/UART/Objects/uart_main.htm:624 <P><STRONG><a name="[c3]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

https://github.com/orbcode/orbuculum
- Src/nwclient.c:11 #include <pthread.h>
- Src/itmfifos.c:18 #include <pthread.h>
- Src/orbprofile.c:16 #include <pthread.h>
- Src/orbuculum.c:27 #include <pthread.h>
- Src/orblcd.c:21 #include <SDL_thread.h>

https://github.com/willdurand/ArvernOS
- src/kernel/arch/aarch64/board/raspi3/asm/proc.asm:8   cbz x19, ret_to_user // not a kernel thread
- docs/index.html:93 <p >ArvernOS (formerly known as "willOS") is a minimal and experimental monolithic kernel (not really an Operating System because it cannot do a lot of things currently). Some screencasts are available in <a href="https://twitter.com/couac/status/1201278626211254274">this Twitter thread</a>.</p>
- src/libc/sys/recvfrom.c:13   // processes/threads. It cannot be done in the syscall handler either because
- Doxyfile:455 # The NUM_PROC_THREADS specifies the number threads doxygen is allowed to use
- external/dlmalloc/dlmalloc.h:112   Thread-safety: NOT thread-safe unless USE_LOCKS defined non-zero

https://github.com/nothinglo/NISwGSP
- UglyMan_NISwGSP_Stitching/UglyMan_NISwGSP_Stitching/vlfeat-0.9.20/vl/generic.h:112 /** @name Multi-thread computations
- UglyMan_NISwGSP_Stitching/UglyMan_NISwGSP_Stitching/vlfeat-0.9.20/Makefile.mak:101 #   /MD                : Multi-thread run-time library dynamically linked
- UglyMan_NISwGSP_Stitching/UglyMan_NISwGSP_Stitching/vlfeat-0.9.20/vl/generic.c:81   - @ref threads
- UglyMan_NISwGSP_Stitching/UglyMan_NISwGSP_Stitching/vlfeat-0.9.20/toolbox/misc/vl_threads.m:1 %VL_THREADS  Control VLFeat computational threads
- UglyMan_NISwGSP_Stitching/UglyMan_NISwGSP_Stitching/vlfeat-0.9.20/vl/kdtree.c:381  ** When using a multi-threaded approach a user should at first instantiate

https://github.com/microsoft/ms-tpm-20-ref
- TPMCmd/Simulator/src/TcpServer.c:58 #  include <pthread.h>
- .clang-format:73   - _No_competing_thread_
- TPMCmd/Simulator/include/prototypes/Simulator_fp.h:59 // This function starts a new thread waiting for platform signals.
- TPMCmd/tpm/include/TpmTypes.h:2555                               authread,                                              \
- TPMCmd/configure.ac:59 AX_PTHREAD([], [AC_MSG_ERROR([requires pthread])])

https://github.com/NetworkConfiguration/dhcpcd
- compat/arc4random.c:89 /* dhcpcd isn't multithreaded */

https://github.com/lcn2/calc
- decl.h:46 # define EXTERN extern __thread
- CHANGES:512     thread, and crash issues under RHEL and macOS.
- Makefile.config:1389 # See also: https://developer.apple.com/documentation/xcode/diagnosing-memory-thread-and-crash-issues-early

https://github.com/Fabrizio-Caruso/CROSS-LIB
- tools/cc65/osic1p/srecord-1.64/etc/autoconf.cook:117     single-thread conftest.subs
- tools/cc65/osic1p/srecord-1.64/config.log:107 Configured with: /mnt/share/cygpkgs/gcc/gcc.x86/src/gcc-11.2.0/configure --srcdir=/mnt/share/cygpkgs/gcc/gcc.x86/src/gcc-11.2.0 --prefix=/usr --exec-prefix=/usr --localstatedir=/var --sysconfdir=/etc --docdir=/usr/share/doc/gcc --htmldir=/usr/share/doc/gcc/html -C --build=i686-pc-cygwin --host=i686-pc-cygwin --target=i686-pc-cygwin --without-libiconv-prefix --without-libintl-prefix --libexecdir=/usr/lib --with-gcc-major-version-only --enable-shared --enable-shared-libgcc --enable-static --enable-version-specific-runtime-libs --enable-bootstrap --enable-__cxa_atexit --with-dwarf2 --with-arch=i686 --with-tune=generic --disable-sjlj-exceptions --disable-bootstrap --enable-languages=c,c++,fortran,lto,objc,obj-c++,jit --enable-graphite --enable-threads=posix --enable-libatomic --enable-libgomp --enable-libquadmath --enable-libquadmath-support --disable-libssp --enable-libada --disable-symvers --with-gnu-ld --with-gnu-as --with-cloog-include=/usr/include/cloog-isl --without-libiconv-prefix --without-libintl-prefix --with-system-zlib --enable-linker-build-id --with-default-libstdcxx-abi=gcc4-compatible --enable-libstdcxx-filesystem-ts
- docs/BUILD.md:14 `xl build [project_name] [optional system_name] [optional number of threads]`
- README.md:245 `xl build [game_or_test_name] [optional system_name] [optional number of threads]`
- src/xl:185 def multiple_build(mypath,target,threads,zsdcc_extra_optimization):

https://github.com/rpi-ws281x/rpi-ws281x-python
- library/rpi_ws281x_wrap.c:954 #  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */

https://github.com/nns779/px4_drv
- winusb/src/BonDriver_PX4/io_queue.hpp:12 #include <thread>
- winusb/src/DriverHost_PX4/itedtv_bus_winusb.c:37 	HANDLE worker_thread;
- winusb/src/DriverHost_PX4/notify_icon.hpp:9 #include <thread>
- winusb/src/DriverHost_PX4/device_notifier.hpp:9 #include <thread>
- winusb/src/DriverHost_PX4/server_base.hpp:9 #include <thread>

https://github.com/sigrokproject/libsigrok
- src/session.c:357 	/* TODO: This is invalid if the session runs in a different thread.
- NEWS:360    - Windows: Fix some thread-related issues causing hangs (bugs #343, #328).
- src/dmm/mm38xr.c:34  * EEVBlog discussion thread about the meter
- bindings/python/setup.py:74         self.swig_opts = ['-c++', '-threads', '-Isigrok/core', '-I..',
- tests/strutil.c:167 	 * For all *nix and OSX systems, change the locale for all threads to

https://github.com/sahlberg/libsmb2
- lib/krb5-wrapper.c:356         /* NOTE: this call is not async, a helper thread should be used if that

https://github.com/KillerInk/FreeDcam
- app/src/main/java/freed/image/ThreadPoolQueue.java:65             Thread thread = task.getThread();
- app/src/main/jni/tiff/config/mkinstalldirs:72 # Solaris 8's mkdir -p isn't thread-safe.  If you mkdir -p a/b and
- app/src/main/jni/LibRaw/samples/half_mt_win32.c:6  * LibRaw  C API mutithreaded sample:  emulates call to "dcraw  -h [-w] [-a] [-v]"
- app/src/main/jni/tiff/m4/acinclude.m4:572 dnl http://www.gnu.org/software/autoconf-archive/ax_pthread.html
- Camera1Parameters/s9-cam.txt:5081     #04 pc 0007727d  /system/lib/libhidlbase.so (android::hardware::PoolThread::threadLoop()+12)

https://github.com/Schildkroet/GRBL-Advanced
- grbl/GCode.c:2200                         // External thread

https://github.com/xyzz/gamecard-microsd
- driver/main.c:46 #include <psp2kern/kernel/threadmgr.h>

https://github.com/lsds/sgx-lkl
- docs/Threading.md:1 The SGX-LKL threading implementation
- src/include/enclave/lthread.h:2  * Lthread
- src/sched/lthread.c:2  * Lthread
- docs/FAQ.md:50 On setup, there is a single synchronous call to each enclave thread (roughly: VCPU) to start it running and allow the scheduler to begin working.
- docs/Architecture.md:25 Most of these are in [src/enclave](../src/enclave), though the threading library has its own directory.

https://github.com/raspberrypi/raspiraw
- raspiraw.c:321 	int awb_thread_quit;
- Makefile:7 LIBS	:= -L/opt/vc/lib -lrt -lbcm_host -lvcos -lmmal_core -lmmal_util -lmmal_vc_client -lvcsm -lpthread

https://github.com/emutos/emutos
- vdi/vdi_blit.S:83 //      these fragments may be threaded together to perform all the prescribed
- bdos/fs.h:153     OFD   *o_thread;    /* mulitple open thread list            */
- aes/struct.h:122         AESPD   *p_thread;      /*  4 */
- bdos/fsopnclo.c:307         p2->o_thread = p;
- bios/amiga.c:318      * https://eab.abime.net/showthread.php?t=97234

https://github.com/mmozeiko/pkgi
- pkgi.h:79 typedef void pkgi_thread_entry(void);
- pkgi.c:51 static void pkgi_refresh_thread(void)
- pkgi_vita.c:17 #include <psp2/kernel/threadmgr.h>
- pkgi_simulator.c:457 static DWORD WINAPI pkgi_win32_thread(void* arg)
- puff.c:266     /* build fixed huffman tables if first call (may not be thread safe) */

https://github.com/VCVRack/Fundamental
- src/Wavetable.hpp:5 #include <thread>
- src/dr_wav.c:3304     think of to do this is with wcsrtombs(). Note that wcstombs() is apparently not thread-safe because it uses a static global mbstate_t object for

https://github.com/SymbioticLab/Infiniswap
- infiniswap_daemon/rdma-common.h:118   pthread_t cq_poller_thread;
- infiniswap_bd/is_mq.c:101 static int stackbd_threadfn(void *data)
- infiniswap_daemon/rdma-common.c:26   pthread_mutex_init(&m->mutex,NULL);
- infiniswap_bd/infiniswap.h:47 #include <linux/kthread.h>
- infiniswap_bd/is_main.c:469 			IS_bitmap_init(cb->remote_chunk.chunk_list[i]->bitmap_g); //should be in in_flight_thread

https://github.com/thispc/psiphon
- openssh-5.9p1/auth-pam.h:45 void sshpam_thread_cleanup(void);
- openssh-5.9p1/auth-pam.c:117 #include <pthread.h>
- openssh-5.9p1/openbsd-compat/getrrsetbyname.c:64 /* We don't need multithread support here */
- openssh-5.9p1/sshd.c:2457 	/* done after do_cleanup so it can cancel the PAM auth 'thread' */
- openssh-5.9p1/session.c:2707 		sshpam_thread_cleanup();

https://github.com/ParallelSSH/ssh2-python
- libssh2/nw/nwlib.c:18 #include <nks/thread.h>
- Changelog.rst:357 * Agent authentication thread safety.
- examples/nonblocking_execute.py:4 the main thread for up to <timeout> (default 1sec). Use for testing purposes
- libssh2/docs/libssh2_init.3:13 crypto library.  It uses a global state, and is not thread safe -- you
- libssh2/NEWS:1219   READ of size 69 at 0x60700001bcf0 thread T0

https://github.com/hartkopp/can-isotp
- net/can/isotp.c:175 	spinlock_t rx_lock; /* protect single thread state machine */

https://github.com/bazad/memctl
- src/libmemctl/arm64/finder/pthread_callbacks.c:1 #include "arm64/finder/pthread_callbacks.h"
- include/memctl/error.h:47  * 	Initialize the thread-local error system.
- include/memctl/kernel.h:147  * 	This call is not thread safe.
- src/libmemctl/arm64/finder/pthread_callbacks.h:7  * kernel_find_pthread_callbacks
- src/libmemctl/error.c:27  * 	A thread-local error stack.

https://github.com/tyranid/windows-logical-eop-workshop
- LogicalEoPWorkshopDriver/device_control.c:207   HANDLE thread = NULL;

https://github.com/MrCheeze/botw-tools
- text/QuestMsg/QL_TwoWheels.xmsbt:4 		<text>"When a single arrow threads two rings,
- text/EventFlowMsg/TwoWheels.xmsbt:4 		<text>&#xE;&#x1;&#x3;&#x4;\0ǯ&#xE;&#x1;&#x1;&#x4;㻌쳍When a single arrow&#xE;&#x5;&#x1;\0 threads &#xE;&#x5;&#x1;\0two rings,&#xE;&#x1;\0&#x4;\0ª
- text/ActorType/Item.xmsbt:1312 many times it's turned, its threads never
- text/EventFlowMsg/Npc_Kakariko016.xmsbt:80 If you're after some new threads,
- text/ActorType/ArmorLower.xmsbt:236 		<text>These old trousers are threadbare in

https://github.com/eboxmaker/eBox_Framework
- os/rtt/components/cplusplus/cxx_thread.h:14 #include <rtthread.h>
- os/rtt/components/cplusplus/cxx_Thread.cpp:10 #include "cxx_thread.h"
- os/rtt/components/cplusplus/cpp11/gcc/thread:10 #include <pthread.h>
- os/rtt/components/cplusplus/cpp11/gcc/thread.cpp:11 #include "thread"
- os/rtt/components/cplusplus/cpp11/thread_local_impl.cpp:11 #include <pthread.h>

https://github.com/endgameinc/ClrGuard
- ClrGuard/Service.cpp:201     DWORD threadId = 0;

https://github.com/loboris/ESP32-PPPOS-EXAMPLE
- pppapi.c.patched:46  * Call ppp_set_default() inside the tcpip_thread context.

https://github.com/explosion/cython-blis
- blis/_src/frame/thread/bli_thread.h:40 // Include thread communicator (thrcomm_t) object definitions and prototypes.
- blis/_src/frame/compat/blis/thread/b77_thread.c:42 void PASTEF770(bli_thread_set_ways)
- blis/_src/frame/compat/blis/thread/b77_thread.h:40 BLIS_EXPORT_BLAS void PASTEF770(bli_thread_set_ways)
- blis/_src/frame/thread/bli_thrcomm.c:45 	if ( comm == NULL || comm->n_threads == 1 ) return to_send;
- blis/_src/frame/thread/bli_thrcomm.h:40 // multithreading.

https://github.com/netpyoung/unity.webp
- unity_project/Assets/unity.webp/Plugins/WebGL/src/utils/thread_utils.h:10 // Multi-threaded worker
- unity_project/Assets/unity.webp/Plugins/WebGL/src/utils/thread_utils.c:10 // Multi-threaded worker
- unity_project/Assets/unity.webp/Runtime/Interop/WebPConfig.cs:47         public int thread_level;
- unity_project/Assets/unity.webp/Plugins/WebGL/src/utils/Makefile.am:34 COMMON_SOURCES += thread_utils.c
- unity_project/Assets/unity.webp/Plugins/WebGL/src/dec/vp8i_dec.h:22 #include "../utils/thread_utils.h"

https://github.com/boochow/micropython-raspberrypi
- raspberrypi/gccollect.c:32 #include "py/mpthread.h"

https://github.com/BazkieBumpercar/GameplayFootball
- src/main.cpp:30 #include "types/thread.hpp"
- CMakeLists.txt:43 FIND_PACKAGE(Boost REQUIRED COMPONENTS system thread signals filesystem)
- src/misc/sqlite3ext.h:131   void  (*thread_cleanup)(void);
- src/menu/startmatch/loadingmatch.cpp:67     EnvironmentManager::GetInstance().Pause_ms(100); // make 'sure' the logos have been displayed by the graphics thread. todonow: this is a terrible hax, and you know it. you are a bad person!
- src/misc/sqlite3.h:179 ** ^The sqlite3_threadsafe() function returns zero if and only if

https://github.com/Javanaise/mrboom-libretro
- sdl2/xBRZ/xbrz.h:35    - support multithreading
- libretro/libretro.h:683                                             * The callback can be called from any thread, so a core using this must
- Makefile:364    LDFLAGS += -lm -lpthread
- sdl2/xBRZ/Changelog.txt:49 - support multithreading

https://github.com/bradleybauer/music_visualizer
- src/main.cpp:4 #include <thread>
- src/FileWatcher.h:37 		std::this_thread::sleep_for(std::chrono::milliseconds(100));
- libs_win/glfw-3.2.1/include/GLFW/glfw3native.h:130  *  @thread_safety This function may be called from any thread.  Access is not
- libs_win/glew-2.1.0/include/GL/eglew.h:136 typedef void (EGLAPIENTRY  *EGLDEBUGPROCKHR)(EGLenum error,const char *command,EGLint messageType,EGLLabelKHR threadLabel,EGLLabelKHR objectLabel,const char* message);
- libs_win/glfw-3.2.1/include/GLFW/glfw3.h:514 /*! @brief No context is current for this thread.

https://github.com/wlmnzf/oranges
- chapter10/c/lib/fork.c:30  *         parent's thread of execution, and a 0 is returned in the child's
- chapter10/d/lib/fork.c:30  *         parent's thread of execution, and a 0 is returned in the child's
- chapter10/a/lib/fork.c:30  *         parent's thread of execution, and a 0 is returned in the child's
- chapter10/e/lib/fork.c:30  *         parent's thread of execution, and a 0 is returned in the child's
- chapter10/b/lib/fork.c:30  *         parent's thread of execution, and a 0 is returned in the child's

https://github.com/xerub/extra_recipe
- extra_recipe/jailbreak.c:5 #include <pthread.h>
- extra_recipe/README:102 One type of mach message which the kernel sends with a lot of user-controlled data is an exception message, sent when a thread crashes.
- extra_recipe/unjail.m:330     uint64_t mpo_thread_userret;
- extra_recipe/patchfinder64.c:530             } *thread = (void *)(ptr + 2);

https://github.com/khadas/fenix
- scripts/xze:17     -T#thread            #
- archives/filesystem/special/VIM4/usr/include/ispMgr.h:5 #include <thread>
- archives/filesystem/special/Edge2/usr/include/rkaiq/xcore/base/xcam_common.h:36 #include <pthread.h>
- archives/filesystem/special/Edge2/usr/include/rkaiq/common/opencv2/cvconfig.h:118 /* Posix threads (pthreads) */
- archives/filesystem/special/Edge2/usr/include/rkaiq/algos/af/rk_aiq_uapi_af_int.h:10 // the thread synchronization

https://github.com/AVSystem/Anjay
- doc/sphinx/source/BasicClient/BC-ThreadSafety.rst:12 All the examples in this tutorial so far have been single-threaded applications.
- doc/sphinx/source/PortingGuideForNonPOSIXPlatforms/ThreadingAPI.rst:15 If Anjay is compiled with thread safety enabled (``WITH_THREAD_SAFETY`` CMake
- examples/tutorial/BC-ThreadSafety/CMakeLists.txt:2 project(anjay-bc-thread-safety C)
- examples/tutorial/BC-ThreadSafety/src/main.c:1 #include <pthread.h>
- demo/objects/ip_ping.c:22 #include <pthread.h>

https://github.com/uw-unsat/hyperkernel
- user/lwip/apps/snmp/snmp_threadsync.c:3  * SNMP thread synchronization implementation.
- user/lwip/include/lwip/apps/snmp_threadsync.h:3  * SNMP server MIB API to implement thread synchronization
- user/lwip/api/tcpip.c:3  * Sequential API Main thread module
- user/lwip/api/netifapi.c:7  * Thread-safe functions to be called from non-TCPIP threads
- user/lwip/netif/slipif.c:50  *        1) For NO_SYS==0, an RX thread can be used which blocks on sio_read()

https://github.com/codeqian/ffmpegCLDemo
- app/src/main/java/codepig/ffmpegcldemo/utils/ThreadPoolUtils.java:27     private static ThreadFactory threadFactory = new ThreadFactory() {
- app/src/main/jni/ffmpeg.h:29 #include <pthread.h>
- app/src/main/jni/ffmpeg.c:62 #include "libavutil/threadmessage.h"
- app/src/main/jni/ffmpeg_opt.c:1037     f->thread_queue_size = o->thread_queue_size > 0 ? o->thread_queue_size : 8;
- app/src/main/obj/local/armeabi-v7a/objs/ffmpeginvoke/ffmpeg_filter.o.d:33   F:/demo/ffmpeg-3.0\libavutil/threadmessage.h \

https://github.com/LIJI32/MIP
- MIP/injector/hook/thread_locking.h:1 /* Makes unsafe code thread-safe by pausing all other threads*/
- MIP/injector/hook/thread_locking.c:2 #include <mach/thread_act.h>
- README.md:14  * The injected code runs on the main thread, and blocks it until it finishes initializing; preventing race bugs.
- MIP/injector/main.c:87     mach_port_t thread;
- MIP/injector/hook/hook.c:6 #include "thread_locking.h"

https://github.com/dm-vdo/vdo
- utils/uds/uds-threads.h:10 #include <pthread.h>
- utils/uds/uds-threads.c:20 #include "uds-threads.h"
- utils/uds/volume.h:18 #include "uds-threads.h"
- utils/vdo/constants.h:76          * The maximum number of total threads in a VDO thread configuration.
- utils/uds/page-cache.h:58  * An invalidate counter is only written by its zone thread by calling

https://github.com/OpenDataPlane/odp
- helper/linux/thread.c:21 #include <odp/helper/linux/pthread.h>
- include/odp/api/thread.h:8  * ODP thread API
- platform/linux-generic/odp_thread.c:11 #include <odp/api/thread.h>
- include/odp/api/spec/thread_types.h:8  * ODP thread API types
- platform/linux-generic/odp_thread_api.c:7 #include <odp/api/thread.h>

https://github.com/kiltum/modbus
- README.md:5 - It need only one thread on normal (or the same with interface) priority. 
- modbustest/Src/freertos.c:94   /* Create the thread(s) */
- modbustest/Inc/FreeRTOSConfig.h:54     compatible FAT file system, and our tiny thread aware UDP/IP stack.

https://github.com/JaneaSystems/nodejs-mobile-samples
- android/native-gradle/app/libnode/include/node/pthread-barrier.h:20 #include <pthread.h>
- ios/native-xcode/README.md:5 The sample app runs the node.js engine in a background thread to start an HTTP server on port 3000 and return the `process.versions` value. The app's Main ViewController UI has a button to query the server and show the server's response. Alternatively, it's also possible to access the server from a browser running on a different device connected to the same local network.
- android/native-gradle/app/libnode/include/node/v8-platform.h:126    * whether to execute the task on a dedicated thread.
- android/native-gradle/app/libnode/include/node/uv-unix.h:42 #include <pthread.h>
- android/native-gradle/app/libnode/include/node/uv-darwin.h:38   uv_thread_t cf_thread;                                                      \

https://github.com/CEED/libCEED
- backends/hip-shared/ceed-hip-shared.h:22   CeedInt       block_sizes[3];  // interp, grad, weight thread block sizes
- backends/hip-gen/ceed-hip-gen-operator.c:105   const CeedInt thread_1d = CeedIntMax(Q_1d, P_1d);
- doc/sphinx/source/intro.md:27 libCEED provides a unified interface, so that users only need to write a single source code and can select the desired specialized implementation at run time. Moreover, each process or thread can instantiate an arbitrary number of backends.
- include/ceed/jit-source/magma/magma-basis-grad-2d.h:47   // 1. 1D threads of size max(P,Q)
- backends/cuda-gen/ceed-cuda-gen-operator.c:29 static int Waste(int threads_per_sm, int warp_size, int threads_per_elem, int elems_per_block) {

https://github.com/wifiphisher/roguehostapd
- roguehostapd/apctrl.py:7 import threading
- roguehostapd/hostapd-2_6/src/l2_packet/l2_packet_ndis.c:13  * WinXP version of the code uses overlapped I/O and a single threaded design
- roguehostapd/hostapd-2_6/src/l2_packet/l2_packet_winpcap.c:2  * WPA Supplicant - Layer2 packet handling with WinPcap RX thread
- roguehostapd/hostapd-2_6/src/eap_server/tncs.c:20 /* TODO: TNCS must be thread-safe; review the code and add locking etc. if
- roguehostapd/hostapd-2_6/src/crypto/tls_openssl.c:1051 		ERR_remove_thread_state(NULL);

https://github.com/iwatake2222/DigitalCamera_STM32
- Src/main.c:197   /* Create the thread(s) */
- Inc/ffconf.h:149 /   1: Enable LFN with static working buffer on the BSS. Always NOT thread-safe.
- Inc/FreeRTOSConfig.h:54     compatible FAT file system, and our tiny thread aware UDP/IP stack.

https://github.com/GrayHatHacking/GHHv5
- ch05/Capture/remote_analysis.grc:76       <key>thread_safe_setters</key>
- ch05/Replay/remote_analysis_replay.grc:76       <key>thread_safe_setters</key>
- ch05/Execute/test-execute.grc:76       <key>thread_safe_setters</key>
- ch05/Preview/test-preview.grc:76       <key>thread_safe_setters</key>

https://github.com/ethers-io/ethers.objc
- ethers/src/Utilities/Promise.h:31  *  The setup function is called immediately, on the current thread. The setup function
- ethers/src/Providers/Provider.h:33  *  future. A Promise always calls its onCompletion handlers on the main thread.
- ethers/src/Account.m:423             // Cancelled after derfivation completed but before we responded (on the main thread)

https://github.com/alex-sector/dns2tcp
- client/command.c:142  * any additional thread.
- configure:2363 { $as_echo "$as_me:${as_lineno-$LINENO}: checking for a thread-safe mkdir -p" >&5

https://github.com/ahmedbilal/OSTEP-Solution
- Chapter 5/question3-yorwos.c:25             a signal.You can wake a pause()d thread with pthread_kill() or kill()

https://github.com/gujianhesong/Test
- FFmpegTest/app/src/main/cpp/include/libavutil/threadmessage.h:42  *          lavu was built without thread support
- FFmpegTest/app/src/main/cpp/include/libavutil/buffer.h:61  * @note Referencing and unreferencing the buffers is thread-safe and thus
- AudioEdit/app/src/main/java/com/pinery/audioedit/util/CrashUtils.java:76   private void printCrash2File(final String threadName, final String msg) {
- FFmpegTest/app/src/main/cpp/include/libavutil/log.h:275  * @note The callback must be thread safe, even if the application does not use
- FFmpegTest/app/src/main/cpp/include/libavfilter/avfilter.h:113  * The filter supports multithreading by splitting frames into multiple parts

https://github.com/fooinha/nginx-ssl-ja3
- src/ngx_http_ssl_ja3_module.c:58     NULL,                                  /* init thread */
- src/ngx_stream_ssl_ja3_preread_module.c:55     NULL,                                        /* init thread */

https://github.com/matusnovak/rpi-opengl-without-x
- triangle.c:65                "is bound in another thread).";
- triangle_rpi4.c:188                "is bound in another thread).";

https://github.com/brailcom/speechd
- TODO:103  * use GLib GThreads and GAsyncQueues for thread communication.
- NEWS:22 * Fix atomicity of getting reply in threaded mode.
- src/audio/nas.c:33 #include <pthread.h>
- src/common/common.c:20 #include <pthread.h>
- src/modules/dummy.c:47 static pthread_t dummy_speak_thread;

https://github.com/johannes-fetz/joengine
- Compiler/WINDOWS/sh-elf/include/pthread.h:34 struct _pthread_cleanup_context {
- Compiler/WINDOWS/sh-elf/include/threads.h:30 #include <machine/_threads.h>
- Compiler/WINDOWS/sh-elf/include/sys/_pthreadtypes.h:30 typedef unsigned int pthread_t;          /* identify a thread */
- Compiler/WINDOWS/sh-elf/include/time.h:243 /* values for the pthread cputime_clock_allowed attribute */
- Compiler/WINDOWS/sh-elf/include/sched.h:101 int sched_get_thread_affinity (void *, size_t, cpu_set_t *);

https://github.com/VOID001/neu-os
- init/main.c:100     printf("This is a multi-thread demo, start in 3s ... 3");

https://github.com/3gstudent/Inject-dll-by-Process-Doppelganging
- inject.c:357         // Create primary thread.

https://github.com/glumes/AndroidDevWithCpp
- cppso/src/main/cpp/jnioperations/thread_operation.h:6 #include <pthread.h>
- cppso/src/main/cpp/jnioperations/thread_operation.cpp:6 #include "thread_operation.h"
- cppso/src/main/java/com/glumes/cppso/jnioperations/ThreadOps.java:25     private native void posixThreads(int threads, int iterations);
- cppso/src/main/cpp/CMakeLists.txt:30             ${CMAKE_SOURCE_DIR}/jnioperations/thread_operation.cpp

https://github.com/minipli/linux-unofficial_grsec
- tools/perf/util/thread_map.c:13 #include "thread_map.h"
- net/rds/threads.c:41  * work queues that execute in a connection managing thread.
- kernel/kthread.c:1 /* Kernel thread helper functions.
- tools/perf/util/Build:46 libperf-y += thread.o
- Documentation/RCU/trace.txt:203 o	"kt" is the per-CPU kernel-thread state.  The digit preceding

https://github.com/mybaby101/Linux-Kernel-2.6-comment
- include/asm-sh/thread_info.h:18 struct thread_info {
- kernel/kthread.c:1 /* Kernel thread helper functions.
- include/asm-ppc64/thread_info.h:1 /* thread_info.h: PPC low-level thread information
- arch/arm/vfp/vfphw.S:14  * r10 points at the start of the private FP workspace in the thread structure
- arch/i386/Kconfig.debug:53 	  kernel stack attached to each process/thread. This facilitates

https://github.com/xaxaxa-dev/vna
- libxavna/README.md:12 Note that the hardware is continuously sending data through the FIFO interface, so any time that you aren't reading it it is being queued up, meaning stale data can surface. The recommended usage pattern is to continuously read values in a loop, possibly in a background thread.
- tester/main.C:112 // hack to make it easy to start a thread with a std::function
- vna_gtk/vna_ui_core.H:37 // you must call this function from a secondary thread (non UI thread)
- libxavna/xavna_cpp.C:5 #include <pthread.h>
- vna_gtk/vna_ui_core.C:65 // increment this variable to request the thread take an extended measurement (for when more accuracy is required)

https://github.com/WangYihang/Apache-HTTP-Server-Module-Backdoor
- README.md:18 /usr/share/apr-1.0/build/libtool  --mode=compile --tag=disable-static x86_64-linux-gnu-gcc -prefer-pic -pipe -g -O2 -fstack-protector-strong -Wformat -Werror=format-security  -Wdate-time -D_FORTIFY_SOURCE=2   -DLINUX -D_REENTRANT -D_GNU_SOURCE  -pthread  -I/usr/include/apache2  -I/usr/include/apr-1.0   -I/usr/include/apr-1.0 -I/usr/include  -c -o mod_backdoor.lo mod_backdoor.c && touch mod_backdoor.slo

https://github.com/xl-player-developers/xl_player
- xl-player-armv7a/src/main/cpp/xl_player_read_thread.c:7 #include "xl_player_read_thread.h"
- xl-player-armv7a/src/main/cpp/xl_player_read_thread.h:9 void * read_thread(void * data);
- xl-player-armv7a/src/main/cpp/xl_video/xl_player_gl_thread.h:8 void * xl_player_gl_thread(void *data);
- xl-player-armv7a/src/main/cpp/xl_decoders/xl_player_audio_decode_thread.h:9 void * audio_decode_thread(void * data);
- xl-player-armv7a/src/main/cpp/xl_decoders/xl_player_video_sw_decode_thread.h:8 void * video_decode_sw_thread(void * data);

https://github.com/DanielRTeixeira/injectAllTheThings
- injectAllTheThings/t_CreateRemoteThread.cpp:48 	// Create a remote thread that calls LoadLibraryW(DLLPathname)
- injectAllTheThings/t_RtlCreateUserThread.cpp:73 		wprintf(TEXT("[+] Remote thread has been created successfully ...\n"));
- injectAllTheThings/fheaders.h:57 // Technique 6: thread suspend/inject/resume
- injectAllTheThings/LoadLibraryR.c:241 			// create a remote thread in the host process to call the ReflectiveLoader!
- injectAllTheThings/auxiliary.cpp:96 							wprintf(TEXT("[-] Error: Couldn't get thread handle\n"));

https://github.com/Cybellum/DoubleAgent
- DoubleAgentDll/Process.c:32 	/* Closes the thread handle */

https://github.com/m5stack/M5Stack
- docs/esp-idf_component.md:55         - If enabled, there will be no protection on the drivers from concurently accessing them from another thread/interrupt/core
- examples/Advanced/MultiTask/MultiTask.ino:16                                   // thread 1.  定义线程1内要执行的任务
- examples/Unit/KEY/KEY-DEMO2/KEY-DEMO2.ino:42         NULL);  // Create a thread for breathing LED. 创建一个线程用于LED呼吸灯.

https://github.com/ARM-software/ML-KWS-for-MCU
- Deployment/Examples/simple_test_k64f_gcc/mbed/drivers/AnalogIn.h:103         // Underlying call is thread safe
- Deployment/Examples/simple_test_k64f_gcc/mbed/platform/mbed_stats.h:55     uint32_t thread_id;         /**< Identifier for thread that owns the stack or 0 if multiple threads. */
- Deployment/Examples/simple_test_k64f_gcc/mbed/drivers/DigitalIn.h:108         // Underlying read is thread safe
- Deployment/Examples/simple_test_k64f_gcc/mbed/TARGET_K64F/tz_context.h:59 /// Load secure context (called on RTOS thread context switch)
- Deployment/Examples/simple_test_k64f_gcc/mbed/drivers/DigitalOut.h:104         // Underlying write is thread safe

https://github.com/lh3/minimap2
- Makefile:4 OBJS=		kthread.o kalloc.o misc.o bseq.o sketch.o sdust.o options.o index.o \
- example.c:16 	int n_threads = 3;
- minimap.h:196 // memory buffer for thread-local storage during mapping
- minimap2.1:451 Free thread-local kalloc memory reservoir if after the alignment the size of the reservoir above
- map.c:5 #include "kthread.h"

https://github.com/yangchaojiang/yjPlay
- ffmpeg/src/main/jni/ffmpeg/libavutil/thread.h:20 // threading is optional, not as a generic threading abstraction.
- ffmpeg/src/main/jni/ffmpeg/libavcodec/frame_thread_encoder.c:23 #include "frame_thread_encoder.h"
- ffmpeg/src/main/jni/ffmpeg/libavcodec/frame_thread_encoder.h:26 int ff_frame_thread_encoder_init(AVCodecContext *avctx, AVDictionary *options);
- ffmpeg/src/main/jni/ffmpeg/libavcodec/pthread.c:28  * Multithreading support functions
- ffmpeg/src/main/jni/ffmpeg/libavcodec/thread.h:23  * Multithreading support functions

https://github.com/hlldz/Phant0m
- README.md:7 This means briefly that; On Windows operating systems, svchost.exe manages the services and services are actually running under svchost.exe’s as threads. Phant0m targets the Event Log service and finding the process responsible for the Event Log service, it detects and kills the threads responsible for the Event Log service. Thus, while the Event Log service appears to be running in the system (because Phant0m didn't kill process), it does not actually run (because Phant0m killed threads) and the system does not collect logs.
- phant0m/include/technique_1.h:10 	printf("[*] Using Technique-1 for killing threads...\n");
- phant0m/include/technique_2.h:7 // Inspired from http://www.rohitab.com/discuss/topic/36675-how-to-get-the-module-name-associated-with-a-thread/?p=10078697
- phant0m.cna:13 			blog($1, "\c0Phant0m will detect PID with SCM and kill service threads with Technique-1.");

https://github.com/OpenPrinting/cups-filters
- DEVELOPING.md:131      // Wait for state changes on another thread...
- CHANGES-1.x.md:1378 	- foomatic-rip: Change execution of renderer thread to fail

https://github.com/amethyst/rlua
- src/thread.rs:12 /// Status of a Lua thread (or coroutine).
- src/lib.rs:63 mod thread;
- src/value.rs:9 use crate::thread::Thread;
- CHANGELOG.md:70 - Add a `Context::current_thread` method to get a reference to the `Thread`
- src/conversion.rs:15 use crate::thread::Thread;

https://github.com/naelag/lab2-f17
- proc.c:361 // kernel thread, not this CPU. It should

https://github.com/wangbojing/threadpool
- thread_pool_active.c:17 #include <pthread.h>
- thread_pool_simple.c:13 #include <pthread.h>
- README.md:1 # threadpool

https://github.com/armink-rtt-pkgs/micropython
- docs/05-System_Module/05-_thread.md:1 # **_thread** – 多线程支持
- py/mpthread.h:36 #include <mpthreadport.h>
- py/modthread.c:35 #include "py/mpthread.h"
- port/modrtthread.c:30 #include <rtthread.h>
- docs/03-Basic_Module/01-rtthread.md:1 # **rtthread** – 系统相关函数

https://github.com/eziya/STM32_HAL_FREEMODBUS_RTU
- Src/main.c:118   /* Create the thread(s) */
- Inc/FreeRTOSConfig.h:54     compatible FAT file system, and our tiny thread aware UDP/IP stack.
- Drivers/CMSIS/RTOS/Template/cmsis_os.h:11  *    osKernelStart added, optional feature: main started as thread

https://github.com/foss-for-synopsys-dwc-arc-processors/embarc_applications
- ot_smarthome_multinode/README.md:50 ![openthread_smarthome_application][30]
- ot_smarthome_multinode/src/frontDoor/main.c:60  *       * Generate boot.bin of the Openthread CoAP application using "make bin".
- arc_design_contest/2020/HUST_SHMS/python/helper.py:3 import threading
- aws_iot_smarthome/src/FreeRTOSConfig.h:53     compatible FAT file system, and our tiny thread aware UDP/IP stack.
- arc_design_contest/2019/NCKU_New_Vision_World/Software-verification/cloud_to_ARC.py:13 from threading import Thread

https://github.com/oofem/oofem
- CMakeLists.txt:367     list (APPEND EXT_LIBS ${PARDISO_ORG_LIB} blas lapack gfortran pthread)
- src/oofemlib/connectivitytable.C:70     omp_set_lock(&initLock); // if not initialized yet; one thread can proceed with init; others have to wait until init completed
- src/oofemlib/domain.h:103  * description of domain associated to particular processor or thread of execution. Generally, it contain and
- doc/paper-actap/paper-actap.tex:278 with a particular processor or thread of execution. \class{Domain} 
- doc/programmer/programmer.tex:145 with a particular processor or thread of execution. \class{Domain} 

https://github.com/csepracticals/SerVerDesign
- mts/multi_threaded_server.c:9 #include <pthread.h>

https://github.com/plume-design/opensync
- src/lib/osw/inc/osw_thread.h:31 osw_thread_init(void);
- src/lib/osw/src/osw_thread.c:27 #include <pthread.h>
- src/lib/ow/inc/ow_core_thread.h:30 typedef void *ow_core_thread_call_fn_t(void *priv);
- src/lib/ow/src/ow_core_thread.c:29 #include <pthread.h>
- src/lib/osw/unit.mk:38 UNIT_SRC := src/osw_thread.c

https://github.com/XradioTech/XR871-OLD
- 03_SDK/xr871sdk/include/kernel/os/os_thread.h:34 #include "kernel/os/FreeRTOS/os_thread.h"
- 03_SDK/xr871sdk/project/common/cmd/cmd_thread.c:33 enum cmd_status cmd_thread_list_exec(char *cmd)
- 03_SDK/xr871sdk/src/kernel/os/FreeRTOS/os_thread.c:2  * @file os_thread.c
- 03_SDK/xr871sdk/include/net/mbedtls/configs/config-thread.h:24  * http://threadgroup.org/
- 03_SDK/xr871sdk/project/common/cmd/cmd_thread.h:37 enum cmd_status cmd_thread_exec(char *cmd);

https://github.com/vb6mmorpg/uplink-source-code
- contrib/irclib/linux/windows.cpp:5 #include <pthread.h>
- contrib/SDL-1.2.11_dev/include/SDL_thread.h:23 #ifndef _SDL_thread_h
- contrib/SDL-1.2.11/docs/html/thread.html:4 >Multi-threaded Programming</TITLE
- contrib/SDL-1.2.11_dev/src/thread/SDL_thread.c:24 /* System independent thread management routines for SDL */
- contrib/SDL-1.2.11_dev/src/thread/SDL_thread_c.h:24 #ifndef _SDL_thread_c_h

https://github.com/hceng/learn
- c++_learn/20th_strongpointer_weekpointer/include/utils/Thread.h:25 # include <pthread.h>
- tiny4412/07_vivid/kernel_viivd/vivid_drv/vivid-kthread-out.c:2  * vivid-kthread-out.h - video/vbi output thread support functions.
- tiny4412/07_vivid/kernel_viivd/vivid_drv/vivid-kthread-cap.h:2  * vivid-kthread-cap.h - video/vbi capture thread support functions.
- c++_learn/20th_strongpointer_weekpointer/include/utils/ThreadDefs.h:23 #include <system/thread_defs.h>
- io/day4/PROCESS-day2.txt:64 	1、创建       --》  pthread_create

https://github.com/LineageOS/android_kernel_leeco_msm8976
- fs/btrfs/async-thread.c:19 #include <linux/kthread.h>
- fs/btrfs/async-thread.h:22 struct btrfs_worker_thread;
- tools/perf/util/thread_map.c:11 #include "thread_map.h"
- drivers/staging/speakup/thread.c:1 #include <linux/kthread.h>
- arch/um/include/asm/thread_info.h:15 struct thread_info {

https://github.com/AzureGreen/ArkProtect
- README.md:12 3. Enumerate process's running threads.

https://github.com/lvmteam/lvm2
- doc/kernel/crypt.txt:106     Disable offloading writes to a separate thread after encryption.
- daemons/lvmdbusd/main.py:14 import threading
- daemons/lvmdbusd/fetch.py:16 import threading
- libdaemon/server/daemon-server.c:22 #include <pthread.h>
- make.tmpl.in:302   # memory debugging is not thread-safe yet

https://github.com/jiaminzou888/cppvnpy
- cpp_basictool/CppThread.hpp:5 #include <thread>
- mysql/include/mysql.h:247   unsigned long thread_id;		/* Id for connection in server */
- mysql/include/mysql_com.h:127 #define REFRESH_THREADS		32	/* Flush thread cache */
- glog/include/logging.h:273 //     Lmmdd hh:mm:ss.uuuuuu threadid file:line] msg...

https://github.com/HaxeExtension/extension-webm
- project/libvpx-generic/vpx_util/vpx_thread.h:10 // Multi-threaded worker
- project/libvpx-generic/vpx_util/vpx_thread.c:10 // Multi-threaded worker
- project/libvpx-generic/vp10/common/thread_common.c:14 #include "vp10/common/thread_common.h"
- project/libvpx-generic/vp10/common/thread_common.h:15 #include "vpx_util/vpx_thread.h"
- project/libvpx-generic/vp9/common/vp9_thread_common.h:15 #include "vpx_util/vpx_thread.h"

https://github.com/ramizebian/Software-Security
- w4/week-4-quiz:110 15. VSFTPD forks a new process to handle each client connection. It could have, instead, spawned a thread within the main process to handle each connection, as is done in many servers. How would this alternative design compare to the original?

https://github.com/git-for-windows/git-sdk-32
- mingw32/include/c++/13.2.0/experimental/executor:45 #include <thread>
- mingw32/lib/ruby/3.1.0/irb/ext/multi-irb.rb:32     # Returns the thread for the given +key+ object, see #search for more
- usr/share/perl5/core_perl/Thread.pm:12     if (! $Config{useithreads}) {
- usr/lib/perl5/core_perl/CORE/thread.h:1 /*    thread.h
- mingw32/include/c++/13.2.0/thread:1 // <thread> -*- C++ -*-

https://github.com/gschorcht/spi-ch341-usb
- README.md:185 GPIO inputs are polled periodically by a separate kernel thread. GPIO polling rate defines the **rate at which the kernel thread reads GPIO inputs** and determines whether to generate **software interrupts**. That is, it defines the maximum rate at which changes at GPIO inputs can be recognized and software interrupts can be generated. 
- spi-ch341-usb.c:167     struct task_struct *     gpio_thread;                       // GPIO poll thread

https://github.com/foss-for-synopsys-dwc-arc-processors/embarc_osp
- middleware/openthread/src/core/api/thread_api.cpp:34 #define WPP_NAME "thread_api.tmh"
- middleware/openthread/include/openthread/thread.h:38 #include <openthread/link.h>
- middleware/openthread/include/openthread/thread_ftd.h:38 #include <openthread/link.h>
- middleware/openthread/src/core/api/thread_ftd_api.cpp:34 #define WPP_NAME "thread_ftd_api.tmh"
- middleware/openthread/src/core/thread/thread_tlvs.hpp:37 #include <openthread/types.h>

https://github.com/baidu/baidu-iot-samples
- STM32/I-CUBE-BAIDU/Drivers/CMSIS/Documentation/RTOS/html/structos_thread_def__t.js:1 var structos_thread_def__t =
- STM32/I-CUBE-BAIDU/Drivers/CMSIS/Documentation/RTOS/html/structos_thread_def__t.html:75 $(document).ready(function(){initNavTree('structos_thread_def__t.html','');});
- STM32/I-CUBE-BAIDU/Drivers/CMSIS/Documentation/RTOS/html/group___c_m_s_i_s___r_t_o_s___thread_mgmt.js:1 var group___c_m_s_i_s___r_t_o_s___thread_mgmt =
- STM32/I-CUBE-BAIDU/Drivers/CMSIS/Documentation/RTOS/html/group___c_m_s_i_s___r_t_o_s___inter_thread.js:1 var group___c_m_s_i_s___r_t_o_s___inter_thread =
- STM32/I-CUBE-BAIDU/Drivers/CMSIS/Documentation/RTOS/html/group___c_m_s_i_s___r_t_o_s___inter_thread.html:68 $(document).ready(function(){initNavTree('group___c_m_s_i_s___r_t_o_s___inter_thread.html','');});

https://github.com/LineageOS/android_kernel_lenovo_msm8953
- include/linux/thread_info.h:1 /* thread_info.h: common low-level thread information accessors
- tools/perf/util/thread_map.c:11 #include "thread_map.h"
- tools/perf/util/thread_map.h:7 struct thread_map {
- drivers/staging/speakup/thread.c:1 #include <linux/kthread.h>
- kernel/kthread.c:1 /* Kernel thread helper functions.

https://github.com/Lotlab/nrf51822-keyboard
- sdk/bootloader_util.c:23  *          (thread/handler) and if in thread mode it will reset into other application.
- sdk/ble.h:263  * The application is free to choose whether to call this function from thread mode (main context) or directly from the Interrupt Service Routine
- sdk/nrf_soc.h:687  * this function will wait in thread mode, then the execution will return in the application's

https://github.com/StreetSec/FatRat
- tools/proguard5.3.2/src/proguard/gui/SwingUtil.java:37      * Invokes the given Runnable in the AWT event dispatching thread,
- fatrat:725 echo -e $orange "  |$white [$okegreen 3$white ]$yellow iat_reverse_tcp_inline_threaded$orange      |"
- tools/android-sdk/renderscript/include/rs_atomic.rsh:22  * To update values shared between multiple threads, use the functions below.
- tools/power.py:604 										"text"			: "createthread",
- tools/proguard5.3.2/src/proguard/gui/splash/SplashPanel.java:96         // Make sure we have an animation thread running.

https://github.com/opencryptoki/opencryptoki
- usr/lib/api/api.mk:19 	-shared	-Wl,-z,defs,-Bsymbolic -lc -ldl -lpthread -lcrypto -lrt	\
- usr/include/apictl.h:29                 if (pthread_rwlock_rdlock(                                  \
- usr/include/slotmgr.h:20 #include <pthread.h>
- CONTRIBUTING.md:56 * Include test information/results on the email thread of your patch or on the
- usr/lib/common/trace.c:15 #include <pthread.h>

https://github.com/auriza/komdat-lab
- src/server-thread.c:5 #include <pthread.h>
- src/server-thread.py:2 from threading import Thread
- p04.md:97 Dengan membuat program server menjadi *multithreaded*, server bisa melayani
- p05.md:11 Pada praktikum sebelumnya, telah dibuat aplikasi server yang hanya bisa melayani satu klien tiap satu waktu. Aplikasi server ini kurang berguna pada dunia nyata. Klien lain harus menunggu lama untuk dapat dilayani oleh server. Untuk mengatasinya, aplikasi server biasanya menggunakan arsitektur paralel, baik menggunakan multiprocessing, multithreading, maupun kombinasi keduanya.
- src/server-omp.c:25     #pragma omp parallel private(client, cl_addr, data) num_threads(8)

https://github.com/pycom/esp-idf-2.0
- components/esp32/include/xtensa/xos_thread.h:3 // xos_thread.h - XOS Thread API interface and data structures.
- components/newlib/include/pthread.h:1 /*  pthread.h
- components/mbedtls/include/mbedtls/threading.h:2  * \file threading.h
- docs/openocd.rst:8 OS that comes with ESP-IDF is capable of multi-core pre-emptive multithreading, allowing for an intuitive way of writing software. 
- components/lwip/Kconfig:30     int "Index for thread-local-storage pointer for lwip"

https://github.com/thijsk/Skynet3d
- arduino-1.8.0/java/lib/jvm.hprof.txt:39 THREAD END      mark the lifetime of Java threads
- arduino-1.8.0/java/bin/client/Xusage.txt:15     -Xss<size>        set java thread stack size
- arduino-1.8.0/java/lib/security/java.policy:11         // Allows any thread to stop itself using the java.lang.Thread.stop()
- SkynetV2.3.2/ultralcd.cpp:3019  * No worries. This function is only called from the main thread.
- arduino-1.8.0/hardware/tools/avr/libexec/gcc/avr/4.9.2/install-tools/mkinstalldirs:72 # Solaris 8's mkdir -p isn't thread-safe.  If you mkdir -p a/b and

https://github.com/AnhTVc/OpenVPN-IOS
- build/src/openssl-1.0.2k/doc/crypto/threads.pod:10 CRYPTO_destroy_dynlockid, CRYPTO_lock - OpenSSL thread support
- build/src/openssl-1.0.2j/crypto/threads/th-lock.c:1 /* crypto/threads/th-lock.c */
- build/src/openssl-1.0.1e/crypto/threads/netware.bat:2 rem batch file to build multi-thread test ( mttest.nlm )
- build/src/openssl-1.0.1e/crypto/threads/mttest.c:1 /* crypto/threads/mttest.c */
- build/src/openssl-1.0.2k/doc/crypto/sha.pod:56 is placed in a static array. Note: setting B<md> to NULL is B<not thread safe>.

https://github.com/staskobzar/amiws
- ltmain.sh:6559     thread_safe=no
- src/lib/mongoose.h:405 #include <pthread.h>

https://github.com/varigit/meta-variscite-fslc
- recipes-connectivity/wpa-supplicant/wpa-supplicant/defconfig:317 # winpcap = WinPcap with receive thread

https://github.com/SamLarenN/CallbackDisabler
- CallbackDisabler/src/main.c:19 		Disables ObCallbacks of the thread and process of the driver specified ( call CTL_GET_DRIVERINFO before this ).

https://github.com/stardot/b-em
- src/midi-linux.c:11 # include <pthread.h>
- src/tapecat-allegro.c:16 static void *tapecat_thread(ALLEGRO_THREAD *thread, void *tdata)
- src/keydef-allegro.c:322 static void *keydef_thread(ALLEGRO_THREAD *thread, void *tdata)
- SUBMITTING_PATCHES.md:67 [the main b-em thread on the stardot forums](http://stardot.org.uk/forums/viewtopic.php?f=4&t=10823)
- src/debugger.c:93 static ALLEGRO_THREAD  *mem_thread;

https://github.com/SanderMertens/flecs
- src/world.h:13 /* Get current thread-specific stage from readonly world */
- src/private_types.h:294 /* World level allocators are for operations that are not multithreaded */
- docs/Systems.md:432 When running a multithreaded application, switching pipelines can be an expensive operation. The reason for this is that it requires tearing down and recreating the worker threads with the new pipeline context. For this reason it can be more efficient to use queries that allow for enabling/disabling groups of systems vs. switching pipelines.
- include/flecs/os_api.h:51 typedef uintptr_t ecs_os_thread_t;
- src/addons/os_api_impl/posix_impl.inl:6 #include "pthread.h"

https://github.com/TelegramMessenger/Telegram-iOS
- submodules/ffmpeg/Sources/FFMpeg/ffmpeg-4.1/libavutil/thread.h:20 // threading is optional, not as a generic threading abstraction.
- submodules/SSignalKit/SwiftSignalKit/Source/ThreadPool.swift:27     private weak var threadPool: ThreadPool?
- submodules/ffmpeg/Sources/FFMpeg/ffmpeg-4.1/libavfilter/pthread.c:21  * Libavfilter multithreading support
- submodules/AsyncDisplayKit/Source/PublicHeaders/AsyncDisplayKit/ASThread.h:12 #import <pthread.h>
- submodules/ffmpeg/Sources/FFMpeg/ffmpeg-4.1/libavcodec/thread.h:23  * Multithreading support functions

https://github.com/NVIDIA/cuda-samples
- bin/x86_64/linux/release/APM_threadMigration.txt:1 Starting threadMigration
- Samples/2_Concepts_and_Techniques/threadMigration/README.md:1 # threadMigration - CUDA Context Thread Management
- Samples/2_Concepts_and_Techniques/threadMigration/threadMigration.cpp:30 *   Module: threadMigration.cpp
- Samples/2_Concepts_and_Techniques/threadFenceReduction/threadFenceReduction.cu:35   later) and the __threadfence() intrinsic (CUDA 2.2 or later).
- Common/multithreading.h:32 //Simple portable thread library.

https://github.com/TelegramMessenger/MTProxy
- net/net-thread.c:27 #include "net/net-thread.h"
- Makefile:16 LDFLAGS = $(ARCH) -ggdb -rdynamic -lm -lrt -lcrypto -lz -lpthread -lcrypto
- jobs/jobs.h:52 struct job_thread;
- engine/engine.c:62 #include "net/net-thread.h"
- net/net-timers.c:51 static __thread event_timer_t **et_heap;

https://github.com/xufuji456/FFmpegAndroid
- app/src/main/cpp/ffmpeg/thread_queue.c:27 #include "libavutil/thread.h"
- app/src/main/cpp/ffmpeg/thread_queue.h:29  * Allocate a queue for sending data between threads.
- app/src/main/cpp/include/libavutil/thread.h:20 // threading is optional, not as a generic threading abstraction.
- app/src/main/cpp/include/libavutil/threadmessage.h:42  *          lavu was built without thread support
- Live/src/main/cpp/PacketQueue.h:6 #include <thread>

https://github.com/aircrack-ng/aircrack-ng
- build/m4/ax_pthread.m4:2 #        https://www.gnu.org/software/autoconf-archive/ax_pthread.html
- lib/libac/cpu/cpuset_pthread.c:43 #include <pthread.h>
- lib/osdep/cygwin.h:43  * - sniff can block and inject can be called by another thread.
- lib/ce-wpa/wpapsk.c:136 									int threadid,
- build/m4/aircrack_ng_tsan.m4:49     LDFLAGS="$LDFLAGS -fsanitize=thread"

https://github.com/facebookincubator/katran
- tools/xdpdump/XdpDump.h:21 #include <thread>
- tools/xdpdump/XdpDump.cpp:256     evbThread_ = std::thread([this]() {
- build/fbcode_builder/manifests/boost:36 boost169-thread
- katran/lib/BpfAdapter.h:39   // BpfAdapter is not thread safe.  Discourage unsafe use by disabling copy
- katran/lib/KatranMonitor.cpp:60   writerThread_ = std::thread([this]() { writer_->runMulti(queue_); });

https://github.com/microshow/RxFFmpeg
- rxffmpeg/src/main/cpp/include/libavutil/threadmessage.h:42  *          lavu was built without thread support
- rxffmpeg/src/main/cpp/include/libavutil/buffer.h:61  * @note Referencing and unreferencing the buffers is thread-safe and thus
- rxffmpeg/src/main/cpp/include/libavutil/log.h:275  * @note The callback must be thread safe, even if the application does not use
- rxffmpeg/src/main/cpp/include/libavfilter/avfilter.h:113  * The filter supports multithreading by splitting frames into multiple parts
- rxffmpeg/src/main/cpp/include/libavcodec/avcodec.h:1013  * Codec supports frame-level multithreading.

https://github.com/Entware/Entware
- tools/mpfr/Makefile:25 	--enable-thread-safe \
- scripts/ext-toolchain.sh:36 	pthread:  libpthread-* libpthread
- scripts/flashing/jungo-image.py:35 import _thread
- include/prereq-build.mk:95 $(eval $(call TestHostCommand,perl-thread-queue, \
- package/utils/busybox/config/procps/Config.in:17 	bool "Support thread display in ps/pstree/top"

https://github.com/alibaba/GCanvas
- core/android/3d/view/grenderer.h:11 #include <pthread.h>
- core/android/3d/view/grenderer.cpp:16     pthread_mutex_init(&m_mutex, 0);
- node/renderContext/GRenderContext.cc:104         // Step 8 - Bind the context to the current thread
- core/android/freetype-prebuilt/include/freetype/freetype.h:332   /*    For multi-threading applications each thread should have its own   */
- core/android/3d/view/GcanvasWeexAndroid.h:22     void signalUpGLthread();

https://github.com/hasherezade/hollows_hunter
- util/ntddk.h:2902         LPC_CLIENT_DIED,                    // (6) Messages to thread termination ports
- CMakeLists.txt:115 	# 5) test scan threads with caching
- params_info/params.h:20 #define PARAM_THREADS "threads"

https://github.com/SinaKarvandi/Hypervisor-From-Scratch
- Part 3 - Setting up Our First Virtual Machine/MyHypervisorDriver/MyHypervisorDriver/VMX.c:31         DbgPrint("\t\tCurrent thread is executing in %d th logical processor.", i);
- Part 8 - How To Do Magic With Hypervisor!/Hypervisor From Scratch/MyHypervisorApp/MyHypervisorApp.cpp:172 				// the thread should not work anymore
- Part 8 - How To Do Magic With Hypervisor!/Hypervisor From Scratch/MyHypervisorDriver/Logging.c:128 	// check if there is any thread in IRP Pending state, so we can complete their request
- Part 3 - Setting up Our First Virtual Machine/MyHypervisorDriver/MyHypervisorDriver/Driver.c:268         // of the thread that made this request. The driver should always
- Part 8 - How To Do Magic With Hypervisor!/Hypervisor From Scratch/MyHypervisorDriver/Vmx.c:401 		and therefore not a thread running with a system-wide page directory.

https://github.com/Dr-Noob/cpufetch
- doc/DOCUMENTATION_X86.md:53 - `smt_supported`: Stores if SMT (or Intel HT) is supported in the CPU, storing the number of threads per core. So, if `smt_supported == 1`, it means that there is 1 thread per core, and SMT is not supported. If SMT is supported, then `smt_supported >= 1`. Note this field tells if the CPU if supports it, but not if SMT is activated or not.
- src/x86/freq/freq.c:18 #include <pthread.h>
- src/arm/uarch.c:406     case UARCH_CORTEX_A77:  // [https://fuse.wikichip.org/news/2339/arm-unveils-cortex-a77-emphasizes-single-thread-performance]
- Makefile:25 			CFLAGS += -pthread
- doc/DOCUMENTATION_PPC.md:9 The total number of cores is queried using `sysconf(_SC_NPROCESSORS_ONLN)`. Then, with the number of sockets and the number of physical cores, we can calculate the number of threads per core.

https://github.com/rosehgal/BinExp
- Lecture7/README.md:17 The memory created in this segment is global, in terms that any function/thread in the program can share that memory. They are handled with pointers. If you are not too handy with pointers, you can refer [this guide]() before going forward.

https://github.com/Battelle/movfuscator
- validation/crc32.c:17 	/* This check is not thread safe; there is no mutex. */

https://github.com/yodaos-project/yodaos
- openwrt/package/utils/adbd/src/include/utils/Thread.h:25 # include <pthread.h>
- framework/libs/ota/bootx/os.h:20 	long threadid;
- framework/libs/android-corelibs/include/utils/Thread.h:25 # include <pthread.h>
- openwrt/package/utils/adbd/src/libbacktrace/thread_utils.h:23 #include <cutils/threads.h>
- openwrt/package/utils/swupdate/src/corelib/network_thread.c:36 #include <pthread.h>

https://github.com/UncleRus/esp-idf-lib
- FAQ.md:55 > The I2C APIs are not thread-safe, if you want to use one I2C port in
- Porting.md:10 Still, this is not enough because it does not exclude scenarios when another i2cdev component accesses the I2C periphery in its thread. Therefore, all I2C raw calls must be rewritten to `i2c_dev_xxx` functions.
- docs/source/groups/i2cdev.rst:3 i2cdev - I2C master thread-safe functions for communication with I2C slave
- components/i2cdev/Kconfig:13 		drivers will become non-thread safe. 
- devtools/devtool/errors.py:70         super().__init__(ctx, 'thread_safe', value)

https://github.com/malxau/yori
- clmp/clmp.c:82      A handle to the thread processing this stream.
- cvtvt/main.c:71  @return Exit code for the thread, currently unused.
- libsh/yorish.h:125      A handle to the initial thread within the process.  This has been
- more/moreinit.c:99  from, and launch a background thread to commence ingesting the data.
- lib/filecomp.c:5  * threads

https://github.com/switchbrew/nx-hbmenu
- common/status.c:16 // This uses netstatusGetDetails from a dedicated thread, since nifmGetInternetConnectionStatus can block for a few seconds.
- nx_main/nx_audio.c:20 static Thread audio_thread;
- README.md:26 Since C11 threads are used, building for the PC may fail if C11 threads are not available.
- Makefile.pc:17 	gcc -Wall -O2 -g -DVERSION=\"v$(APP_VERSION)\" $(EXTRA_CFLAGS)  `pkg-config freetype2 --cflags` $^ -lsfml-graphics -lsfml-window -lsfml-system -lstdc++ -lpthread `pkg-config freetype2 --libs` -lm -lphysfs -lz -lconfig -lturbojpeg -lpng $(EXTRA_LDFLAGS) -I. -iquote $(DEVKITPRO)/libnx/include -Ibuild_pc -g -o $@
- common/common.h:13 #include <threads.h>

https://github.com/septag/sx
- src/threads.c:9 #include "sx/threads.h"
- include/sx/threads.h:9 // threads.h - v1.0 - Common portable multi-threading primitives
- README.md:28 	- Fixed thread pool
- src/jobs.c:9 #include "sx/threads.h"
- include/sx/jobs.h:8 // Job dispatcher is a multi-threaded task scheduler, that uses lightweight fibers to switch

https://github.com/exelix11/SwitchThemeInjector
- SwitchThemesNX/Libs/mbedtls/include/mbedtls/threading.h:2  * \file threading.h
- SwitchThemesNX/Libs/hactool/source/kip.h:31     uint8_t main_thread_priority;
- SwitchThemesNX/Libs/hactool/source/npdm.h:29     uint32_t lowest_thread_prio;
- SwitchThemesNX/Libs/hactool/source/kip.c:117     cJSON_AddU32ToObject(kip_json, "main_thread_stack_size", ctx->header->section_headers[1].attribute);
- SwitchThemesNX/Libs/mbedtls/include/mbedtls/timing.h:84  * \warning        Only one alarm at a time  is supported. In a threaded

https://github.com/winsiderss/phnt
- ntkeapi.h:16 #define LOW_PRIORITY 0 // Lowest thread priority level
- ntpsapi.h:413     HANDLE Thread; // handle to initial/only thread; needs THREAD_QUERY_INFORMATION access
- ntrtl.h:3017 // Extended thread context
- ntexapi.h:3031 // Event types for the thread class scheduler

https://github.com/kondrak/vkQuake2
- win32/conproc.c:86 	unsigned	threadAddr;
- client/miniaudio/dr_mp3.h:3376     think of to do this is with wcsrtombs(). Note that wcstombs() is apparently not thread-safe because it uses a static global mbstate_t object for
- client/miniaudio/stb_vorbis.c:86 // Individual stb_vorbis* handles are not thread-safe; you cannot decode from
- linux/Makefile:89 LDFLAGS=-L/usr/local/lib -ldl -lm -lasound -lpthread
- client/miniaudio/dr_wav.h:2862     think of to do this is with wcsrtombs(). Note that wcstombs() is apparently not thread-safe because it uses a static global mbstate_t object for

https://github.com/GPUOpen-LibrariesAndSDKs/V-EZ
- Source/Utility/ThreadPool.h:35     // A thread-safe queue class.
- Source/Utility/ThreadPool.cpp:26     ThreadPool::ThreadPool(uint32_t threadCount)
- Docs/AsciiDoctor/UpdatingMemory.txt:10 V-EZ simplifies host to device data transfers by providing two utility functions. Both are synchronous function calls on the host and block the calling thread until completion.
- Source/Core/Device.h:27 #include <thread>
- Libs/glfw/include/GLFW/glfw3native.h:130  *  @thread_safety This function may be called from any thread.  Access is not

https://github.com/klaussilveira/qengine
- src/tools/common/threads.c:24 #include "threads.h"
- src/tools/qvis3/flow.c:28   if (!thread->portalmightsee[portalnum])
- src/tools/qbsp3/qbsp3.c:333     if (!strcmp(argv[i], "-threads")) {
- src/tools/common/threads.h:23 extern int numthreads;
- src/tools/CMakeLists.txt:16         ../common/threads.c

https://github.com/nxrighthere/ENet-CSharp
- README.md:201 Multi-threading

https://github.com/Gbps/gbhv
- gbhv/arch.h:104  //  and 3) it is used in the user level thread creation routines.
- gbhv/phnt/ntkeapi.h:5 #define LOW_PRIORITY 0 // Lowest thread priority level
- gbhv/phnt/ntpsapi.h:371     HANDLE Thread; // handle to initial/only thread; needs THREAD_QUERY_INFORMATION access
- gbhv/phnt/ntrtl.h:2858 // Extended thread context

https://github.com/ianh/owl
- README.md:283 Each thread would have to store its own action list, which could end up taking a lot of memory for some inputs—that's why I avoided this approach in the first place.  But the Dubé-Feeley-style action maps also take up a lot of memory.  In retrospect, I think this approach could be worth a try.

https://github.com/berry-lang/berry
- docs/Doxyfile:463 # The NUM_PROC_THREADS specifies the number threads doxygen is allowed to use

https://github.com/nsacyber/Hardware-and-Firmware-Security-Guidance
- README.md:131 BranchScope builds upon Spectre. BranchScope targets the Branch Prediction Units (BPUs) that handle speculation when branching instructions, such as a conditional, are encountered. Modern processors handle multiple process threads simultaneously. BranchScope leverages processes against each other to influence and sometimes control the flow of speculative execution. Processes may prime the Branch Predictor itself to be predisposed to a specific solution, or they may corrupt the state of BPUs.

https://github.com/iqiyi/libfiber
- c/src/fiber.c:52 static __thread THREAD *__thread_fiber = NULL;
- c/src/common/pthread_patch.h:12 #define __thread __declspec(thread)
- samples/c/threads/main.c:4 #include <pthread.h>
- samples/xcode/fiber_server/fiber_server/FiberThread.cpp:9 #include <thread>
- README.md:15     * [Wait for the result from a thread](#wait-for-the-result-from-a-thread)

https://github.com/SanderMertens/bake
- util/src/win/thread.c:24 ut_thread ut_thread_new(
- util/include/bake-util/thread.h:40 typedef HANDLE ut_thread;
- util/src/posix/thread.c:24 ut_thread ut_thread_new(
- util/include/bake-util/win/thread.h:2  * light weight pthread compatible library for Windows
- build-Linux/bake.make:25   LIBS += -lrt -ldl -lpthread -lm

https://github.com/xqemu/xqemu
- util/thread-pool.c:2  * QEMU block layer thread pool
- docs/devel/multi-thread-tcg.txt:9 This document outlines the design for multi-threaded TCG system-mode
- include/qemu/thread.h:14 #include "qemu/thread-win32.h"
- docs/multi-thread-compression.txt:1 Use multiple thread (de)compression in live migration
- util/qemu-thread-win32.c:2  * Win32 implementation for mutex/cond/thread functions

https://github.com/externalist/exploit_playground
- extra_recipe/yalu102-master/yalu102/ViewController.m:13 #import <pthread.h>
- CVE-2018-4233/pwn_i8.js:478     //    is going to call os_thread_self_restrict_rwx_to_rw 
- extra_recipe/extra_recipe-cydia/extra_recipe/jailbreak.c:5 #include <pthread.h>
- CVE-2016-8655/CVE-2016-8655_chocobo_root_commented.c:15 user@ubuntu:~$ gcc chocobo_root.c -o chocobo_root -lpthread
- extra_recipe/extra_recipe-cydia/extra_recipe/README:102 One type of mach message which the kernel sends with a lot of user-controlled data is an exception message, sent when a thread crashes.

https://github.com/wangbojing/NtyTcp
- src/nty_eth.c:62 #include <pthread.h>
- include/nty_tcp.h:138 	if (pthread_mutex_init(lock, PTHREAD_PROCESS_PRIVATE)) {		\
- include/nty_nic.h:104 	int (*init)(nty_thread_context *ctx, const char *ifname);
- src/nty_nic.c:69 int nty_nic_init(nty_thread_context *tctx, const char *ifname) {
- src/nty_tcp.c:65 #include <pthread.h>

https://github.com/jas502n/0day-security-software-vulnerability-analysis-technology
- 27MS06-055分析实战HeapSpray/reference/MSF/mcafee_epolicy_source.pm:29 	'AutoOpts'  => { 'EXITFUNC' => 'thread' },
- 21探索ring0/shineast收集的内核漏洞/[2010-03-30][ALWIL][Antivirus_4.7][aavmker4.sys][本地缓冲区溢出内核漏洞][本地权限提升][28502]/12406.py:11 import time, struct, sys, thread, os
- 21探索ring0/shineast收集的内核漏洞/[2010-04-13][微点][主动防御1.3.10123.0][Mp110013.sys][任意地址写固定数据内核漏洞][本地权限提升]/12213.c:204    printf("cannot open thread %u\n",GetLastError());
- 21探索ring0/shineast收集的内核漏洞/[2010-01-19][Microsoft][#GP陷阱处理器][nt][设计缺陷内核漏洞][本地权限提升][MS10-015][37864]/KiTrap0D/vdmallowed.c:131     // Pass the parameters required by exploit thread to NTVDM.
- 21探索ring0/shineast收集的内核漏洞/[2009-07-30][Kaspersky][KIS_8.0.0.35][kl1.sys][任意地址写任意数据内核漏洞][本地权限提升]/kis_22c008_ioctl_expl/ntdll.h:1242 	CLIENT_ID		Cid;				// process/thread ids

https://github.com/murphyzhao/FlexibleButton
- README.md:44 该示例程序可以直接在 RT-Thread [`stm32l475-atk-pandora`](https://github.com/RT-Thread/rt-thread/tree/master/bsp/stm32/stm32l475-atk-pandora) BSP 中运行，可以在该 BSP 目录下，使用 menuconfig 获取本软件包。
- examples/demo_rtt_iotboard.c:24  * This demo is base on rt-thread IoT Board, reference
- examples/demo_tos_evb_mx_plus.c:198     /* Create background ticks thread */

https://github.com/hasherezade/mal_unpack
- ntddk.h:2911     LPC_CLIENT_DIED,                    // (6) Messages to thread termination ports

https://github.com/omnetpp/omnetpp
- ui/org.omnetpp.scave.pychart/src/org/omnetpp/scave/pychart/PythonCallerThread.java:17  * A thread that queues and executes blocking function calls to a
- ui/org.omnetpp.ide.nativelibs/defs.i:19 #define OPP_THREAD_LOCAL thread_local
- include/omnetpp/platdep/platdefs.h:77 // When building a shared library on Windows, some static thread_local variables would be exported with __declspec(dllexport)
- src/utils/opp_fingerprinttest:29 import threading
- src/sim/ccoroutine.cc:73             throw cRuntimeError("cCoroutine::init(): Cannot convert main thread to fiber");

https://github.com/gabonator/LA104
- system/apps_experiments/111_micropython/source/py/mpthread.h:33 struct _mp_state_thread_t;
- system/apps_experiments/111_micropython/source/py/modthread.c:35 #include "py/mpthread.h"
- system/apps_experiments/111_micropython/source/py/qstr.c:77 #define QSTR_ENTER() mp_thread_mutex_lock(&MP_STATE_VM(qstr_mutex), 1)
- system/apps_experiments/111_micropython/source/py/reader.c:32 #include "py/mpthread.h"
- system/apps_experiments/111_micropython/source/py/mpstate.h:32 #include "py/mpthread.h"

https://github.com/gohypergiant/IAPKit
- iOS/OpenSSL/crypto.h:284 /* Adds thread number to the memory checking information */
- iOS/OpenSSL/err.h:356 void ERR_remove_thread_state(const CRYPTO_THREADID *tid);
- iOS/OpenSSL/bio.h:738  * We might want a thread-safe interface too:
- iOS/OpenSSL/bn.h:338  * threads

https://github.com/Dvd848/CTFs
- 2021_Shabak/Vision.md:119     img_list_thread_pool = ThreadPool(NUM_THREADS, download_images, (img_list_queue, result_queue))
- 2019_TAMUctf/Bird_Box_Challenge.md:253 [00:16:30] [WARNING] running in a single-thread mode. Please consider usage of option '--threads' for faster data retrieval
- 2019_MITRE_CTF/REbase.md:128 cannot set %fs base address for thread-local storage
- 2019_ArkCon/searchable_text.txt:1166 Starting with kernel 2.2, Linux divides the privileges traditionally associated with superuser into distinct units, known as capabilities, which can be independently enabled and disabled. Capabilities are a per-thread attribute.
- 2019_Lahav433/README.md:1435 The first things that jumps to the eye when reviewing the list of functions is the existence of a TLS callback. TLS Callbacks are traditionally used to initialize  thread-specific data before a thread runs, and are therefore called before the entry point of the program. In other words, they can execute before the debugger breaks on the entry point. So, in order to make it harder to find anti-debugging checks, these anti-debugging checks are sometimes placed in the TLS Callback.

https://github.com/Yubico/libfido2
- man/fido_init.3:53 function in the context of the executing thread.
- CMakeLists.txt:341 # Decide which keyword to use for thread-local storage.
- NEWS:148  ** hid_osx: allow reads from spawned threads.
- examples/CMakeLists.txt:58 	target_link_libraries(select winpthread)
- regress/CMakeLists.txt:56 	target_link_libraries(regress_dev winpthread)

https://github.com/crawshaw/sqlite
- snapshot.go:43 // The returned *Snapshot is threadsafe for creating additional read
- sqlite3ext.h:141   void  (*thread_cleanup)(void);
- README.md:17 A HTTP handler that uses a multi-threaded pool of SQLite connections via a shared cache.
- blocking_step.c:23 	pthread_mutex_init(&un->mu, 0);
- blocking_step.h:5 #include <pthread.h>

https://github.com/switch-iot/hin2n
- bundles/uip/uip/pt.h:43  * Protothreads implementation.
- bundles/uip/uip/psock.c:199      * protothread will wait here until all data has been acknowledged
- bundles/uip/uip/psock.h:49  * The protosocket library uses \ref pt protothreads to provide
- bundles/uip/apps/dhcpc/dhcpc.c:312    * PT_END restarts the thread so we do this instead. Eventually we
- Hin2n_android/app/src/main/jniLibs/x86/include/openssl/async.h:40 int ASYNC_init_thread(size_t max_size, size_t init_size);

https://github.com/imalimin/HardwareVideoCodec
- rtmp/src/main/jni/rtmp/HandlerThread.h:12 #include <pthread.h>
- rtmp/src/main/jni/rtmp/HandlerThread.cpp:28     pthread_attr_init(&attr);
- codec/src/main/jni/speexdsp/include/speex/speex_buffer.h:4    This is a very simple ring buffer implementation. It is not thread-safe
- rtmp/src/main/jni/rtmp/Java_com_lmy_rtmp_RtmpClient.cpp:27                 LOGE("Cannot attach current thread.");
- codec/src/main/jni/codec/include/x264.h:260 #define X264_THREADS_AUTO 0 /* Automatically select optimal number of threads */

https://github.com/hundredrabbits/Orca-c
- README.md:178 - Discuss and get help in the [forum thread](https://llllllll.co/t/orca-live-coding-tool/17689).
- tui_main.c:984     // we'll need to thread the timestamping/timing info through the function

https://github.com/Dice-Developer-Team/Dice
- quickjspp/storage/dybase/src/pagepool.h:29     psWait  = 0x04  // other thread(s) wait load operation completion
- quickjspp/quickjs-libc.c:74 /* enable the os.Worker API. IT relies on POSIX threads */
- quickjspp/quickjs.h:465 /* should be called when changing thread to update the stack top value
- quickjspp/libregexp.c:1854            thread execution will be possible in an optimized
- quickjspp/storage/dybase/doc/dybase.html:385 Lock persistent object in shared mode. Other threads will be able to set their

https://github.com/Xilinx/dma_ip_drivers
- XDMA/linux-kernel/xdma/xdma_thread.h:24  * @brief This file contains the declarations for xdma kernel threads
- QDMA/windows/sys/libqdma/source/thread.h:36 struct qdma_thread {
- XDMA/linux-kernel/xdma/xdma_thread.c:22 #include "xdma_thread.h"
- QDMA/windows/sys/libqdma/source/thread.cpp:17 #include "thread.h"
- QDMA/linux-kernel/driver/libqdma/thread.c:22 #include "thread.h"

https://github.com/jakibaki/In-Home-Switching
- source/main.c:90     threadCreate(&inputHandlerThread, inputHandlerLoop, NULL, 0x1000, 0x2b, 0);
- README.md:60   * More efficient threading
- Windows/In-Home-Switching-Win/In-Home-Switching/Properties/Resources.Designer.cs:50         ///   Overrides the current thread's CurrentUICulture property for all

https://github.com/mareksuscak/cs50
- pset5/speller/trie/texts/revenant.txt:1060           Pig digs out a thick needle and spool of black thread...
- pset5/speller/trie/texts/mansfield.txt:357  The tide was out; the beach was deserted; lazily flopped the warm sea. The sun beat down, beat down hot and fiery on the fine sand, baking the grey and blue and black and white-veined pebbles. It sucked up the little drop of water that lay in the hollow of the curved shells; it bleached the pink convolvulus that threaded through and through the sand-hills. Nothing seemed to move but the small sand-hoppers. Pit-pit-pit! They were never still.
- pset5/speller/trie/keys/shakespeare.txt:14311 threaden
- pset5/speller/hashtable/texts/revenant.txt:1060           Pig digs out a thick needle and spool of black thread...
- pset5/speller/bloom_filter/texts/revenant.txt:1060           Pig digs out a thick needle and spool of black thread...

https://github.com/mobizt/Firebase-ESP32
- src/json/extras/print/fb_json_print.h:28 //        These routines are thread safe and reentrant.
- src/json/extras/print/fb_json_print.c:26 //        embedded systems with a very limited resources. These routines are thread
- src/client/WiFiClientImpl.h:6  * The WiFiClient in ESP32 cannot be used in multithreading environment as in FreeRTOS task

https://github.com/kubo/injector
- README.md:20   of memory, which may be referred by other threads. This writes it
- cmd/main.c:185     int cloned_thread = 0;
- include/injector.h:231  * This calls `dlopen()` in a thread created by \c [clone()](https://man7.org/linux/man-pages/man2/clone.2.html). Note that no wonder there are unexpected
- src/macos/ptrace.c:77 int injector__ptrace_update(const injector_t *injector, long thread_port)
- src/macos/mach_exc.h:126 	mach_port_t thread,

https://github.com/Manistein/dummylua-tutorial
- linux/part11/vm/luagc.c:120     markobject(L, g->mainthread); 
- tools/protodump/lua-src/lua.h:46 /* thread status */
- tools/protodump/lua-src/ldblib.c:24 ** The hook table at registry[&HOOKKEY] maps threads to their current
- linux/part04/tags:341 mainthread	common/luastate.h	/^    struct lua_State* mainthread;$/;"	m	struct:global_State	typeref:struct:global_State::lua_State
- tools/protodump/lua-src/ldo.c:111   if (L->errorJmp) {  /* thread has an error handler? */

https://github.com/madushadhanushka/simple-sqlite
- core/os.c:72 ** competing threads of the same process.  POSIX locks will work fine
- core/sqlite.h:221 ** currently locked by another process or thread.  If the busy callback
- core/random.c:44     /* All threads share a single random number generator.
- core/pager.c:46 **                       threads can be reading or writing while one

https://github.com/Serasidis/STM32_HID_Bootloader
- bootloader/F1/CMSIS/Documentation/RTOS/html/structos_thread_def__t.js:1 var structos_thread_def__t =
- bootloader/F1/CMSIS/Documentation/RTOS/html/structos_thread_def__t.html:75 $(document).ready(function(){initNavTree('structos_thread_def__t.html','');});
- bootloader/F1/CMSIS/Documentation/RTOS/html/group___c_m_s_i_s___r_t_o_s___thread_mgmt.js:1 var group___c_m_s_i_s___r_t_o_s___thread_mgmt =
- bootloader/F1/CMSIS/Documentation/RTOS/html/group___c_m_s_i_s___r_t_o_s___thread_mgmt.html:68 $(document).ready(function(){initNavTree('group___c_m_s_i_s___r_t_o_s___thread_mgmt.html','');});
- cli/hid-mac.c:31 #include <pthread.h>

https://github.com/compsec-snu/razzer
- tools/qemu-2.5.0/thread-pool.c:2  * QEMU block layer thread pool
- tools/qemu-2.5.0/docs/multi-thread-compression.txt:1 Use multiple thread (de)compression in live migration
- tools/qemu-2.5.0/include/qemu/thread.h:15 #include "qemu/thread-win32.h"
- tools/qemu-2.5.0/util/qemu-thread-posix.c:2  * Wrappers around mutex/cond/thread functions
- tools/qemu-2.5.0/util/qemu-thread-win32.c:2  * Win32 implementation for mutex/cond/thread functions

https://github.com/Konstantin8105/c4go
- scripts/gtk.sh:59 	$C4GO ast		-clang-flag="-pthread -I/usr/include/gtk-3.0 -I/usr/include/at-spi2-atk/2.0 -I/usr/include/at-spi-2.0 -I/usr/include/dbus-1.0 -I/usr/lib/x86_64-linux-gnu/dbus-1.0/include -I/usr/include/gtk-3.0 -I/usr/include/gio-unix-2.0/ -I/usr/include/cairo -I/usr/include/pango-1.0 -I/usr/include/harfbuzz -I/usr/include/pango-1.0 -I/usr/include/atk-1.0 -I/usr/include/cairo -I/usr/include/pixman-1 -I/usr/include/freetype2 -I/usr/include/libpng16 -I/usr/include/freetype2 -I/usr/include/libpng16 -I/usr/include/gdk-pixbuf-2.0 -I/usr/include/libpng16 -I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include -lgtk-3 -lgdk-3 -lpangocairo-1.0 -lpango-1.0 -latk-1.0 -lcairo-gobject -lcairo -lgdk_pixbuf-2.0 -lgio-2.0 -lgobject-2.0 -lglib-2.0"  \
- tests/raylib/external/glfw/src/win32_thread.h:33 // Win32-specific thread local storage data
- tests/raylib/external/glfw/src/posix_thread.c:44     if (pthread_key_create(&tls->posix.key, NULL) != 0)
- tests/raylib/rglfw.c:76     #include "external/glfw/src/win32_thread.c"
- tests/raylib/external/glfw/include/GLFW/glfw3native.h:174  *  @thread_safety This function may be called from any thread.  Access is not

https://github.com/Stellarium/stellarium-web-engine
- ext_src/webp/src/utils/thread_utils.c:10 // Multi-threaded worker
- ext_src/webp/src/utils/thread_utils.h:10 // Multi-threaded worker
- src/utils/worker.h:12  * Some basic threading functions.
- ext_src/webp/src/utils/Makefile.am:34 COMMON_SOURCES += thread_utils.c
- SConstruct:83     'ext_src/webp/src/utils/thread_utils.c',

https://github.com/ionescu007/winipt
- libipt/win32.c:485         // Send a request to pause tracing for the given thread
- README.md:21 Likely in response, in Windows 10 Spring Update (Version 1803 / Redstone 4), Microsoft added an `Ipt.sys` driver that enables Intel PT support for certain classes of ETW tracing operations. The support was incomplete, and mainly to handle this specific use case. In Windows 10 October Update (Version 1809 / Redstone 5), however, Microsoft has enhanced this driver to support non-ETW-based usage of Intel PT, and to configure both per-process (per-thread) tracing as well as full per-core tracing, exposing many (but not all) of the Intel PT controls that normally get written into the appropriate MSR (such as allowing callers to enable MTC/TSC timing packets, or by configuring either Ring 0 or Ring 3 tracing).
- ipttool/ipttool.c:663         // Pausing thread trace needs 3 arguments
- libiptnt/native.c:551         // Send a request to pause tracing for the given thread

https://github.com/jonasblixt/ufsm
- doc/examples/10_linux_async.rst:13  * De-coupling the state machine with a thread safe queue
- examples/linux/queue.c:20     if (pthread_mutex_lock(&q->lock) != 0) {
- examples/linux/queue.h:7 #include <pthread.h>
- examples/dhcpclient/src/Makefile:7 LDFLAGS = -lpthread
- examples/dhcpclient/src/dhcpclient.c:11 #include <pthread.h>

https://github.com/ehsahil/recon-my-way
- masscan/src/pixie-threads.c:2 #include "pixie-threads.h"
- masscan/src/pixie-threads.h:12  * On a dual socket, dual-core per socket, hyperthreaded system, the
- aquatone/README.md:39 aquatone-discover will use 5 threads as default for concurrently performing DNS lookups. This provides reasonable performance but can be tuned to be more or less aggressive with the `--threads` option:
- altdns/altdns.py:6 import threading
- aquatone/lib/aquatone.rb:15 require "aquatone/thread_pool"

https://github.com/lsof-org/lsof
- lib/dialects/hpux/kmem/hpux11/proc.h:116     int p_created_threads;
- lib/dialects/hpux/kmem/hpux11/vnode.h:27     KA_T ll_kthreadp; /* thread structure address */
- docs/manpage.md:622        -K k     selects the listing of tasks (threads) of  processes,  on  di‐
- lib/dialects/darwin/dproc.c:100 static void process_threads(struct lsof_context *ctx, int pid, uint32_t n);
- 00DIST:4694 		Added thread support to those FreeBSD versions that have

https://github.com/jiejieTop/ButtonDrive
- README.md:15 Button_drive是一个小巧的按键驱动，支持单击、双击、长按、连续触发等（后续可以在按键控制块中添加触发事件），理论上可无限量扩展Button，Button_drive采用按键触发事件回调方式处理业务逻辑，支持在RTOS中使用，我目前仅在[RT-Thread](https://github.com/RT-Thread/rt-thread)上测试过。

https://github.com/stolk/imcat
- stb_image.h:834 // this is not threadsafe

https://github.com/switchbrew/nx-hbloader
- source/main.c:248     rc = threadCreate(&t, &procHandleReceiveThread, (void*)(uintptr_t)server_handle, NULL, 0x1000, 0x20, 0);
- hbl.json:6     "main_thread_stack_size": "0x100000",

https://github.com/anshuman23/tensorflex
- c_src/c_api.h:336 // Graphs are thread-safe when used as directed below.

https://github.com/onlyfang/VBoxVmService
- src/VBoxVmService.cpp:873     unsigned threadID;

https://github.com/bebbo/amiga-gcc
- sys-include/threads.h:30 #include <machine/_threads.h>
- sys-include/sys/_pthreadtypes.h:30 typedef unsigned int pthread_t;          /* identify a thread */
- sys-include/time.h:247 /* values for the pthread cputime_clock_allowed attribute */
- sys-include/errno.h:8 #ifdef __posix_threads__
- sys-include/reent.h:49    contains data that is thread-specific.  For example, the errno value is

https://github.com/keith-packard/snek
- snekde/snekde.py:25 import threading
- chips/samd21/snek-samd21.ld:135 	 * thread_local.
- ports/snekboard/snek-board-test.py:19 import threading
- ports/esp32/loadable_elf_example_test.py:5 import threading

https://github.com/nasa/nos3
- fsw/nos3_defs/cpu1_platform_cfg.h:1698 **      The CFE "main" thread starts individual tasks for each of the core applications
- fsw/nos3_defs/native_osconfig.cmake:32 # would not have permission to create realtime priority threads or FIFO

https://github.com/piconomix/px-fwlib
- libs/STM32Cube/G0/Drivers/CMSIS/Include/tz_context.h:60 /// Load secure context (called on RTOS thread context switch)
- libs/ChaN_FatFs/00history.txt:239   Fixed wrong media change can lead a deadlock at thread-safe configuration.
- libs/ChaN_FatFs/ffconf_template.h:105 /   1: Enable LFN with static working buffer on the BSS. Always NOT thread-safe.
- libs/FreeRTOS/tasks.c:383  * For tracking the state of remote threads, OpenOCD uses uxTopUsedPriority
- libs/ChaN_FatFs/ff.c:215 #error Static LFN work area cannot be used at thread-safe configuration

https://github.com/ofajardo/pyreadr
- pyreadr/libs/lzma/lzma/hardware.h:11  * will be also a function to detect how many concurrent threads the system
- pyreadr/libs/lzma/lzma/base.h:315 		 * LZMA_FULL_BARRIER is useful with a threaded encoder if
- pyreadr/libs/lzma/lzma/container.h:64  * \brief       Multithreading options
- pyreadr/libs/lzma/lzma/index.h:28  * Notes about thread safety: Only one thread may modify lzma_index at
- pyreadr/zlib.h:144    If zlib is used in a multi-threaded application, zalloc and zfree must be

https://github.com/handshake-org/hnsd
- uv/src/win/thread.c:91 /* Verify that uv_thread_t can be stored in a TLS slot. */
- uv/docs/code/thread-create/main.c:28     uv_thread_t hare_id;
- uv/docs/src/threading.rst:2 .. _threading:
- uv/docs/src/threadpool.rst:2 .. _threadpool:
- uv/docs/src/guide/threads.rst:4 Wait a minute? Why are we on threads? Aren't event loops supposed to be **the

https://github.com/DroneBridge/ESP32
- sdkconfig.old:985 CONFIG_PTHREAD_TASK_NAME_DEFAULT="pthread"
- sdkconfig:1127 CONFIG_PTHREAD_TASK_NAME_DEFAULT="pthread"

https://github.com/catid/Zpng
- zstd/threading.h:23  * Windows minimalist Pthread Wrapper, based on :
- zstd/threading.c:14  * This file will hold wrapper for systems, which do not support pthreads
- zstd/pool.h:26  *  Create a thread pool with at most `numThreads` threads.
- zstd/pool.c:25 #include "threading.h"   /* pthread adaptation */
- zstd/zdict.h:42  *  Redirect towards ZDICT_optimizeTrainFromBuffer_cover() single-threaded, with d=8 and steps=4.

https://github.com/seaswalker/tiny-os
- chapter11/kernel/thread/thread.c:1 # include "thread.h"
- chapter11/kernel/thread/thread.h:11 typedef void thread_func(void*);
- chapter9/thread_start/makefile:12 	   $(BUILD_DIR)/bitmap.o $(BUILD_DIR)/memory.o $(BUILD_DIR)/string.o $(BUILD_DIR)/debug.o $(BUILD_DIR)/thread.o
- chapter9/thread_start/kernel/main.c:3 # include "thread.h"
- chapter9/thread_schedule/kernel/init.c:5 # include "thread.h"

https://github.com/tobozo/ESP32-BLECollector
- ESP32-BLECollector/BLE.h:725       // detach from this thread before it's destroyed

https://github.com/GreenteaOS/Tofita
- kernel/multitasking/thread.hexa:18 	/// Owner of the thread
- kernel/multitasking/guiThread.hexa:24 	serialPrintln("<Tofita> [guiThread] thread started")
- kernel/multitasking/kernelThread.hexa:28 	serialPrintln("<Tofita> [kernelThread] thread started")
- kernel/tofita.hexa:170 	// GUI thread
- kernel/gui/window.hexa:21 	// TODO tid - thread id

https://github.com/ARM-software/Tool-Solutions
- docker/tensorflow-aarch64/patches/onednn_acl_thread_local_scheduler.patch:17 diff --git a/src/cpu/aarch64/acl_thread.cpp b/src/cpu/aarch64/acl_thread.cpp
- docker/tensorflow-aarch64/CHANGELOG.md:41  - Tensorflow patch to limit Eigen ThreadPool threads.
- docker/tensorflow-aarch64/patches/tf_threadpool_threadcap.patch:17 diff --git a/tensorflow/tsl/platform/threadpool.cc b/tensorflow/tsl/platform/threadpool.cc
- docker/tensorflow-aarch64/Dockerfile:286 COPY patches/tf_threadpool_threadcap.patch $PACKAGE_DIR/.
- docker/pytorch-aarch64/cpu_info.sh:80 #   blas_ncores = max thread count for OpenBLAS build.

https://github.com/droe/xnumon
- log.c:113 static pthread_t log_thr;
- queue.c:16  * Single producer, single consumer queue, thread-safe.
- policy.h:17 int policy_thread_sched_priority(int);
- kext/xnumon_cdev.c:222 	 * went very wrong and a thread is still stuck in the cdev.
- kext/xnumon_kauth.c:22 #include <kern/thread.h>

https://github.com/graalvm/graalvm-ten-things
- extendc.c:8   poly_thread thread = NULL;
- Distance.java:16     public static double distance(IsolateThread thread, double aLat, double aLong, double bLat, double bLong) {
- distance.c:8   graal_isolatethread_t *thread = NULL;
- README.md:629 using memory and threads.

https://github.com/liu-jianhao/CMU-15-445
- Lab/src/CMakeLists.txt:68 # Multi-thread.
- Lab/src/logging/log_manager.cpp:10  * Start a separate thread to execute flush to disk operation periodically
- Lab/src/include/logging/log_manager.h:3  * log manager maintain a separate thread that is awaken when the log buffer is
- Lab/src/include/concurrency/transaction.h:10 #include <thread>
- Lab/src/concurrency/transaction_manager.cpp:48       std::this_thread::sleep_for(std::chrono::milliseconds(10));

https://github.com/floooh/sokol-zig
- src/sokol/c/sokol_audio.h:67        this function is called from a separate thread.
- src/sokol/c/sokol_log.h:74     - must be re-entrant because it might be called from different threads
- src/sokol/c/sokol_gl.h:654     different threads).
- src/sokol/c/sokol_debugtext.h:475     different threads).

https://github.com/moehriegitt/hob3l
- src/hob3l/main.c:79  * This can theoretically be run in multiple threads: each thread

https://github.com/saaramar/execve_exploit
- exploit.c:168 		// Just kill the thread.

https://github.com/liumengdeqq/CustomLinker
- README.md:1 https://bbs.pediy.com/thread-226667.htm
- CustomSoLoader/app/src/main/cpp/linker4_4.h:15 #include <pthread.h>
- CustomSoLoader/app/src/main/cpp/linker7_0.h:15 #include <pthread.h>

https://github.com/intel/lmbench
- doc/lat_proc.8:20 The purposes is to measure the time that it takes to create a basic thread
- doc/parallel.ms:156 parallelism, even for traditional single-threaded
- doc/usenix96.ms:1141 such as databases, software development environments, and threading libraries
- doc/userguide.ms:1889 such as databases, software development environments, and threading libraries
- src/lmhttp.c:59 		   		 break;		/* # of threads */

https://github.com/CatxFish/motion-effect
- external/FindLibObs.cmake:80 	find_obs_lib(W32_PTHREADS deps/w32-pthreads w32-pthreads)

https://github.com/Pfzuo/Level-Hashing
- concurrent_level_hashing/ycsb.c:9     int thread_num = atoi(argv[1]);             // INPUT: the number of threads
- concurrent_level_hashing/level_hashing.c:483 void ycsb_thread_run(void* arg){
- README.md:13 * **level_hashing:** The code for single-threaded level hashing, run in DRAM platform.
- concurrent_level_hashing/level_hashing.h:8 #include <pthread.h>
- concurrent_level_hashing/makefile:2 	cc -o clevel ycsb.o level_hashing.o hash.o -lm -lpthread

https://github.com/osrf/ovc
- ovc5/firmware/sandbox/README.md:7 [This forum thread](https://forums.xilinx.com/t5/Installation-and-Licensing/Xilinx-Unified-Installer-2020-1-Exception-in-thread-quot-SPLASH/td-p/1114416) describes the issue and what to (temporarily) stuff in `/etc/os-release` so that the installer doesn't crash.
- ovc1/software/ros/ovc/ovc_node.cpp:5 #include <thread>
- ovc4/firmware/lpc_fw/CMSIS/tz_context.h:60 /// Load secure context (called on RTOS thread context switch)
- ovc5/software/libovc/src/server.cpp:16     threads.push_back(std::thread(&Server::receiveThread, this, i));
- ovc5/software/libovc/include/libovc/ovc.hpp:6 #include <thread>

https://github.com/grimm-co/killerbeez
- docs/DynamoRIO.md:65 * `-no_thread_coverage` - With this option enabled, all threads of the target
- winafl/modules.c:53 /* Maintains LRU order in thread-private caches. A new/recent entry is moved to
- fuzzer/CMakeLists.txt:10 # Utils requires -ldl (on UNIX) and -lpthread
- jansson/strconv.c:35   - If setlocale() is called by another thread between the call to
- utils/global_types.h:18  * This flag signifies that the mutations should be done in a thread safe way.

https://github.com/os-fpga/1st-CLaaS
- framework/host/sim_kernel.c:52 #include <thread>
- framework/build/Makefile:406 SIM_CFLAGS=$(SW_CFLAGS) -std=c++11 -lpthread -DVL_THREADED=1 -D KERNEL_AVAIL -D KERNEL=$(KERNEL_NAME) -D VERILATOR_KERNEL=V$(KERNEL_NAME)_kernel
- framework/webserver/server.py:42 # The process is single threaded and all the requests are served synchronously and in order.
- apps/mandelbrot/webserver/mandelbrot_server.py:43 # TODO: I have no idea how threading works with this server. If requests are processed serially, we have performance issues.
- framework/webserver/server_api.py:95             # To do. Be more graceful about large packets by using sock.send (once multithreading is gracefully supported).

https://github.com/liva/minimal-linux
- fs/proc/thread_self.c:8  * /proc/thread_self:
- include/linux/thread_info.h:2 /* thread_info.h: common low-level thread information accessors
- include/linux/kthread.h:4 /* Simple interface for creating and stopping kernel threads without mess. */
- lib/is_single_threaded.c:1 /* Function to determine if a thread group is single threaded or not
- kernel/kthread.c:1 /* Kernel thread helper functions.

https://github.com/mrpre/atls
- ngx_stream_a_tls_module.c:111     NULL,                                  /* init thread */
- Makefile:20 cmd = gcc $(CFLAGS)  -o $(BINSRC) ./daemon/$(BINSRC).c $(TARGET).a $(acryptofile) -ldl -lpthread
- README.md:4 1.Not supporting multiplethreading.  

https://github.com/sowson/darknet
- src/demo.c:92 void *detect_in_thread(void *ptr)
- CMakeLists.txt:49     hunter_add_package(Boost COMPONENTS system filesystem thread)
- src/opencl.h:38 extern __declspec(thread) int opencl_device_id_t;
- src/compare.c:29     pthread_t load_thread;
- examples/cgan.c:68     args.threads = 32;

https://github.com/tuxalin/CommandBuffer
- example/GraphicsSamples/extensions/include/NvAppBase/NvThread.h:42 /// Cross-platform threading wrapper API
- example/ThreadedRenderingGL/ThreadedRenderingGL.h:82     /// IDs for threads based on the work that they do and the
- example/GraphicsSamples/extensions/include/NsFoundation/NsThread.h:123 	Construct (but do not start) the thread object. The OS thread object will not be created
- example/Readme.md:13 The example is composed of several worker theads that all issue GL commands, there are n-1 animation threads that issue vbo update commands for the fish animation and also draw commands. And also an additional thread for issuing defferred commands 
- example/GraphicsSamples/extensions/src/NsFoundation/unix/NsUnixThread.cpp:41 #include <pthread.h>

https://github.com/ImageMagick/ImageMagick6
- magick/thread.c:43 #include "magick/thread_.h"
- magick/thread_.h:16   MagickCore private methods for internal threading.
- Magick++/lib/Thread.cpp:6 // Implementation of thread support
- magick/thread-private.h:16   MagickCore private methods for internal threading.
- Magick++/lib/Magick++/Thread.h:5 // Definition of types and classes to support threads

https://github.com/joel16/CMFileManager-PSP
- app/source/main.cpp:85         int thread = 0;
- app/include/pspaudiolib_cm.h:7  *                 multiple thread usage and callbacks.
- app/source/pspaudiolib_cm.cpp:7  *                 multiple thread usage and callbacks.
- app/source/gui/texteditor.cpp:5 #include <pspthreadman.h>
- app/source/ftppsp.cpp:853 static void client_list_thread_end(void) {

https://github.com/versity/scoutfs-kmod-dev
- src/trans.c:314  * Each thread reserves space in the segment for their dirty items while
- src/inode.c:1569  * this work off to a thread.
- src/lock.c:1541  * Internal fs threads can be using locking, and locking can have async

https://github.com/sensepost/wpa_sycophant
- wpa_supplicant/main_winsvc.c:134 static int wpa_supplicant_thread(void)
- src/l2_packet/l2_packet_ndis.c:13  * WinXP version of the code uses overlapped I/O and a single threaded design
- wpa_supplicant/examples/p2p/p2p_find.py:11 import threading
- src/l2_packet/l2_packet_winpcap.c:2  * WPA Supplicant - Layer2 packet handling with WinPcap RX thread
- wpa_supplicant/examples/wps-nfc.py:13 import threading

https://github.com/btnkij/qsv2flv
- ffmpeg/include/libavutil/threadmessage.h:42  *          lavu was built without thread support
- ffmpeg/lib/avutil-56.def:485     av_thread_message_flush
- ffmpeg/include/libavcodec/codec.h:106  * Codec supports frame-level multithreading.
- ffmpeg/include/libavutil/buffer.h:64  * @note Referencing and unreferencing the buffers is thread-safe and thus
- ffmpeg/include/libavutil/log.h:314  * @note The callback must be thread safe, even if the application does not use

https://github.com/Streampunk/grandiose
- src/grandiose.cc:71   // threads, as well as multiple instances of itself running in different
- README.md:6 This module will allow a Node.JS program to find, receive and send NDI(tm) video, audio and metadata streams over IP networks. All calls a asynchronous and use Javascript promises with all of the underlying work of NDI running on separate threads from the event loop.
- include/Processing.NDI.Send.h:45 	// for audio. In general if you are submitting video and audio off a single thread then you should only
- include/Processing.NDI.Recv.h:191 // separate threads, so it is entirely possible to receive audio, video, metadata all on separate threads.
- include/Processing.NDI.deprecated.h:166 // separate threads, so it is entirely possible to receive audio, video, metadata all on separate threads.

https://github.com/Glorf/lear
- src/logger.c:19         //POSIX claims fprintf is thread safe, added no mutex though
- src/connection.c:223         if(process_http_request(cli_socket->currentRequest, &response) < 0) { //Main request processing thread

https://github.com/phonegapX/AirPlay
- AirplaySdkExample/include/SDL/SDL_thread.h:23 #ifndef _SDL_thread_h
- AirplaySdkExample/utils/threads.h:24 typedef HANDLE thread_handle_t;
- AirplaySdkExample/videosource.h:10 #include "threads.h"
- AirplaySdkExample/include/SDL/SDL.h:41 #include "SDL_thread.h"
- AirplayLibrary/AirPlay/lib/raop_rtp.c:64 	thread_handle_t thread;

https://github.com/mackron/vkbind
- examples/01_Fundamentals/01_Fundamentals.c:1448     specified multithreading support. Command buffers are where this really starts to become apparent. With Vulkan, you
- source/external/tinyxml2.h:630 	// Be careful: static, global, & not thread safe.

https://github.com/Decawave/dwm1001-examples
- examples/twi_accel/TWI/TWI.c:5 * Single threaded version blocks with CPU in
- nRF5_SDK_14.2.0/components/drivers_nrf/nrf_soc_nosd/nrf_soc.h:54  * this function will wait in thread mode, then the execution will return in the application's
- nRF5_SDK_14.2.0/documentation/release_notes.txt:369  - The LESC example now generates the DH key in the main thread so as not to hold up the
- nRF5_SDK_14.2.0/components/experimental_802_15_4/api/HAL/hal_mutex.h:49  * to make it thread aware.
- nRF5_SDK_14.2.0/components/iot/iot_dfu/bootloader/bootloader.c:112  *          (thread/handler) and if in thread mode it will reset into other application.

https://github.com/touchlab/SQLiter
- sqliter-driver/src/nativeCommonMain/kotlin/co/touchlab/sqliter/DatabaseManager.kt:28      * if you are absolutely sure you're only accessing from one thread. It will proactively fail
- sqliter-driver/src/nativeCommonTest/kotlin/co/touchlab/sqliter/concurrency/ConcurrentDatabaseConnectionTest.kt:29         println("single thread ${connTimer(true)}")
- sqliter-driver/src/nativeInterop/cinterop/sqlite3.def:5 linkerOpts.linux_x64 = -lpthread -ldl
- sqliter-driver/src/nativeCommonTest/kotlin/co/touchlab/sqliter/MultithreadedTest.kt:27 class MultithreadedTest {
- sqliter-driver/src/nativeCommonTest/kotlin/co/touchlab/sqliter/Helper.kt:105  * For connections where we don't care about threading, randomize(ish)

https://github.com/MaJerle/stm32-ws2811-ws2812-ws2812b-ws281x-tim-pwm-dma-timer
- projects/stm32g0b1_nucleo/Drivers/CMSIS/Include/tz_context.h:60 /// Load secure context (called on RTOS thread context switch)
- projects/stm32g0b1_nucleo/cmake/gcc-arm-none-eabi.cmake:8 set(CPP_FLAGS                       "-fno-rtti -fno-exceptions -fno-threadsafe-statics")

https://github.com/soedinglab/metaeuk
- lib/mmseqs/lib/ips4o/ips4o/thread_pool.hpp:2  * ips4o/thread_pool.hpp
- lib/mmseqs/lib/zstd/lib/common/threading.h:23  * Windows minimalist Pthread Wrapper, based on :
- lib/mmseqs/lib/zstd/lib/common/threading.c:14  * This file will hold wrapper for systems, which do not support pthreads
- lib/mmseqs/lib/ips4o/README.md:26 // sort in parallel (uses OpenMP if available, std::thread otherwise)
- lib/mmseqs/lib/nedmalloc/Readme.txt:7 threads without lock contention based on dlmalloc v2.8.4. It is more

https://github.com/Zhenye-Na/CSAPP-Labs
- codes/code/conc/race.c:9 void *thread(void *vargp);
- codes/code/conc/hello.c:2  * hello.c - Pthreads "hello, world" program 
- codes/code-all/error/fragments.c:3 void *thread(void *vptr) 
- codes/code-all/conc/goodcnt.s:3 	.globl	thread
- codes/code/conc/psum-local.c:2  * psuml.c - A simple parallel sum program where each thread sums into

https://github.com/monome/crow
- lib/clock.c:27 } clock_thread_HD_t;
- lib/clock_ll.c:6 // clock_thread as a linked list node
- lua/metro.lua:109 -- metro has already gone to sleep when lua main thread gets
- readme-development.md:23 I always add the `-j` flag to `make` so it runs multi-threaded (as the compile time is over 10s on my machine). So run `make -j` for fastest build time.
- lua/clock.lua:4 local clock = { threads = {}

https://github.com/libretro/mame2003-plus-libretro
- src/libretro-common/rthreads/gx_pthread.h:4  * The following license statement only applies to this file (gx_pthread.h).
- src/libretro-common/rthreads/ctr_pthread.h:4  * The following license statement only applies to this file (gx_pthread.h).
- src/libretro-common/rthreads/psp_pthread.h:4  * The following license statement only applies to this file (psp_pthread.h).
- src/libretro-common/rthreads/wiiu_pthread.h:4  * The following license statement only applies to this file (wiiu_pthread.h).
- src/libretro-common/rthreads/xenon_sdl_threads.c:4  * The following license statement only applies to this file (xenon_sdl_threads.c).

https://github.com/pjreddie/vision-hw0
- src/stb_image.h:865 // this is not threadsafe
- Makefile:18 LDFLAGS= -lm -pthread 

https://github.com/facebookincubator/oculus-linux-kernel
- fs/proc/thread_self.c:8  * /proc/thread_self:
- include/linux/thread_info.h:1 /* thread_info.h: common low-level thread information accessors
- tools/perf/util/thread_map.c:11 #include "thread_map.h"
- tools/perf/util/thread_map.h:7 struct thread_map {
- fs/btrfs/async-thread.c:20 #include <linux/kthread.h>

https://github.com/sifive/freedom-metal
- configure:2193 { $as_echo "$as_me:${as_lineno-$LINENO}: checking for a thread-safe mkdir -p" >&5

https://github.com/yrm006/miniscript
- readme.c:121         Thread thread;

https://github.com/chentyjpm/DarknetDemoInAndroid
- ReadMe.md:41 set(CMAKE_LD_FLAGS "${CMAKE_LD_FLAGS} -lm -pthread -fopenmp")
- app/src/main/cpp/darknet/src/demo.c:86 void *detect_in_thread(void *ptr)
- app/src/main/cpp/darknet/examples/tag.c:18     pthread_t load_thread;
- app/src/main/cpp/darknet/examples/writing.c:36     pthread_t load_thread = load_data_in_thread(args);
- app/src/main/cpp/darknet/examples/super.c:32     pthread_t load_thread = load_data_in_thread(args);

https://github.com/dimkr/nss-tls
- README.md:28 * libnss_tls.so is a tiny client library, which delegates the resolving work to nss-tlsd through the Unix socket and passes the results back to the application, without dependencies other than libc. This way, applications that resolve through nss-tls are not affected by the complexity and resource consumption of runtime libraries (e.g. libstdc++) and dependency libraries used by nss-tlsd, or the constraints they impose on applications that load them (like signal or thread safety issues).
- nss-tls.c:31 #include <pthread.h>
- meson.build:71                             dependencies: [dependency('threads')],

https://github.com/ShadowsocksR-Live/ssrWin
- src/run_ssr_client.c:49     DWORD threadId = 0;
- src/win_cmd_wrapper.c:95     // Close process and thread handles.
- src/net_change_monitor.c:17 static DWORD WINAPI net_monitor_thread_proc(LPVOID lpParam)
- src/routeService/pipe_service.c:18 DWORD _thread_id;
- src/ssrWin/main.c:1191     // https://forums.codeguru.com/showthread.php?256128-CListCtrl-LVN_ITEMCHANGING

https://github.com/kiteretro/Circuit-Sword
- cs-hud/src/Makefile:30 INCLUDES+=-I/opt/vc/include/ -I/opt/vc/include/interface/vcos/pthreads -I/opt/vc/include/interface/vmcs_host/linux -Ianalog_read/ -Idisplay/ -Idisplay/common/ -Igpio/ -Igpio_in/ -Ikeyboard/ -Ishift_in/ -Iserialport/ -Ibatt_mon/
- cs-hud/src/gpio/Makefile:9 INCLUDES+=-I/opt/vc/include/ -I/opt/vc/include/interface/vcos/pthreads -I/opt/vc/include/interface/vmcs_host/linux
- cs-hud/src/display/png_converter/Makefile:13 INCLUDES+=-I/opt/vc/include/ -I/opt/vc/include/interface/vcos/pthreads -I/opt/vc/include/interface/vmcs_host/linux -I../ -I../common/
- cs-hud/src/analog_read/Makefile:9 INCLUDES+=-I/opt/vc/include/ -I/opt/vc/include/interface/vcos/pthreads -I/opt/vc/include/interface/vmcs_host/linux
- cs-hud/src/serialport/Makefile:9 INCLUDES+=-I/opt/vc/include/ -I/opt/vc/include/interface/vcos/pthreads -I/opt/vc/include/interface/vmcs_host/linux

https://github.com/MatrixAINetwork/MATRIX_AI
- ParallelShapelet/src/prunedtw.cu:60 when w < threadhold and N < threadhold;
- iNaturalist_resnet/tensorpack/dataflow/base.py:23 import threading
- iNaturalist_resnet/tensorpack/tfutils/common.py:52     conf.intra_op_parallelism_threads = 1
- FastLanes/ThreadController.v:49 	reg [`SIZE_CORE-1:0] threadSync [`NUM_WARP-1:0];
- iNaturalist_resnet/tensorpack/utils/concurrency.py:23 import threading

https://github.com/sakjain92/Fractional-GPUs
- framework/caffe/include/caffe/internal_thread.hpp:7  Forward declare boost::thread instead of including boost/thread.hpp
- framework/caffe/src/caffe/internal_thread.cpp:1 #include <boost/thread.hpp>
- driver/NVIDIA-Linux-x86_64-390.48/kernel/nvidia-uvm/uvm8_thread_context.c:25 #include "uvm8_thread_context.h"
- driver/NVIDIA-Linux-x86_64-390.48/kernel/nvidia-uvm/uvm8_thread_context.h:28 // UVM thread contexts
- driver/NVIDIA-Linux-x86_64-390.48/kernel/nvidia/nv-kthread-q.c:24 #include "nv-kthread-q.h"

https://github.com/scaleway/natasha
- test/func/utils.py:8 from threading import Thread
- test/func/tests.py:199             sleep(2) # let the thread start and start sniffing, very important

https://github.com/FedeDP/libmodule
- TODO.md:25 - [ ] Improve multithread support
- docs/core/ctx.md:6 > NOTE: there is no context handler visible to user, because the handler is basically the thread itself.
- Lib/core/mod.h:78     CONST m_ctx_t *ctx;                     // Module's ctx -> even if ctx is threadspecific data, we need to know the context a module was registered into, to avoid user passing modules around to another thread/context
- docs/thpool/thpool.md:3 Thpool API denotes symbols exposed by `libmodule_thpool.so`, that refer to the thread pool library.  
- Lib/thpool/thpool.c:3  * See: https://github.com/mbrossard/threadpool

https://github.com/Geeetech3D/Prusa_I3_3Dprinter
- A10_marlin1.1.8/Marlin/ultralcd.cpp:4672  * No worries. This function is only called from the main thread.
- A10_marlin1.1.8/Marlin/Makefile:393 CEXTRA = -fno-use-cxa-atexit -fno-threadsafe-statics
- MeCreator2_marlin1.1.8/Marlin/ultralcd.cpp:4658  * No worries. This function is only called from the main thread.
- A10Pro_HW4.1B_FW2.3/Marlin/ultralcd.cpp:5433  * No worries. This function is only called from the main thread.
- A10T_HW4.1B_FW2.3/Marlin/Makefile:393 CEXTRA = -fno-use-cxa-atexit -fno-threadsafe-statics

https://github.com/projectacrn/acrn-kernel
- tools/perf/scripts/python/exported-sql-viewer.py:41 #	The next level is a thread (pid:tid)
- tools/testing/selftests/ptrace/vmaccess.c:7  * when de_thread is blocked with ->cred_guard_mutex held.
- tools/perf/util/thread-stack.h:3  * thread-stack.h: Synthesize a thread's stack using call / return events
- arch/arm/include/asm/thread_notify.h:3  *  arch/arm/include/asm/thread_notify.h
- drivers/accessibility/speakup/thread.c:2 #include <linux/kthread.h>

https://github.com/espressif/esp-lwip
- src/apps/snmp/snmp_threadsync.c:3  * SNMP thread synchronization implementation.
- src/include/lwip/apps/snmp_threadsync.h:3  * SNMP server MIB API to implement thread synchronization
- doc/ppp.txt:52 for NO_SYS=1 systems or called inside lwIP core thread for NO_SYS=0 systems.
- UPGRADING:40   * Added debug helper asserts to ensure threading/locking requirements are met (define
- src/api/tcpip.c:3  * Sequential API Main thread module

https://github.com/openwrt/archive
- include/prereq-build.mk:79 $(eval $(call TestHostCommand,perl-thread-queue, \
- package/libs/gettext/src/m4/intl.m4:141   dnl in the *.la files - makes it impossible to create multithreaded programs,
- package/devel/valgrind/Makefile:33   DEPENDS:=@mips||mipsel||i386||x86_64||powerpc||arm_v7 +libpthread +librt
- scripts/flashing/jungo-image.py:35 import thread
- target/linux/generic/files/fs/yaffs2/yaffs_linux.h:25 	struct task_struct *bg_thread;	/* Background thread for this device */

https://github.com/tock/libtock-c
- lua53/include/lua.h:46 /* thread status */
- lua53/include/lfunc.h:21 /* test whether thread is in 'twups' list */
- lua53/include/lstate.h:38 ** is thread safe
- lua53/include/llimits.h:222 #if !defined(luai_threadyield)
- lua53/include/ltests.h:84 #define luai_userstatethread(l,l1) \

https://github.com/signalapp/Signal-Pods
- libwebp/src/utils/thread_utils.c:10 // Multi-threaded worker
- libwebp/src/utils/thread_utils.h:10 // Multi-threaded worker
- SignalCoreKit/SignalCoreKit/src/Threading.m:6 #import <pthread.h>
- SignalCoreKit/SignalCoreKit/src/Threading.h:8 // main thread; otherwise it is dispatched async to the
- Reachability/README.md:27 This sample uses blocks to notify when the interface state has changed. The blocks will be called on a **BACKGROUND THREAD**, so you need to dispatch UI updates onto the main thread.

https://github.com/tianocore/edk2-test
- uefi-sct/EMS/Src/Include/EmsThread.h:96   Reset the current EMS thread's Tcl Interp. All of the EMS 
- uefi-sct/EMS/Bin/Script/ThreadInit.tcl:20 #     script for EMS run test case thread initialization
- uefi-sct/EMS/Src/EmsThread/EmsThread.c:458   The routine for EMS thread hash table initialization
- uefi-sct/EMS/Src/EmsEftp/EmsEftp.c:284   The thread routine for Eftp receiving packet
- uefi-sct/EMS/Src/EmsRpc/EmsRpcMain.c:41 //pthread_mutex_t     MutexSentFlag;

https://github.com/openebs/istgt
- src/mock_client.c:38 	pthread_mutex_t *mtx;
- src/istgt_iscsi.h:48 #include <pthread.h>
- src/replication.h:25 #include <pthread.h>
- src/data_conn.c:91 		 * cleanup_deadlist thread performs cleanup of 		\
- CHANGELOG.md:288 * fix(crash): cleanup mempool related thread while destroying a volume ([#303](https://github.com/openebs/istgt/pull/303),

https://github.com/Fyyre/kerneldetective
- Thread.h:10  *		This module defines various routines used to scan for threads .
- Thread.cpp:10  *		This module implements various routines used to scan for threads .
- wdbgexts.h:100     // The address of the thread structure is provided in the
- process.cpp:28 #include "thread.h"
- KeDetective.h:798     LIST_ENTRY    ThreadListHead;     // Active threads inside this callback

https://github.com/weiyanwei412/SQLaudit
- unittest/gunit/thread_utils.h:20 #include <my_pthread.h>
- include/mysql/thread_pool_priv.h:22   The thread pool requires access to some MySQL server error codes, this is
- include/mysql/service_thread_scheduler.h:27 extern struct my_thread_scheduler_service {
- unittest/gunit/thread_utils-t.cc:20 #include "thread_utils.h"
- include/mysql/psi/mysql_thread.h:20   @file mysql/psi/mysql_thread.h

https://github.com/rakion99/Axon
- Axon/V3rm/Bridge.h:32 	int resumea(DWORD thread);
- Axon/V3rm/Lua/lgc.c:131   GCObject **p = &g->mainthread->next;
- Axon/V3rm/Lua/ltm.c:25   "string", "table", "function", "userdata", "thread",
- Axon/V3rm/Lua/lua.h:42 /* thread status; 0 is OK */
- Axon/V3rm/Lua/lstate.c:33 ** Main thread combines a thread state and the global state

https://github.com/libhal/SJSU-Dev2
- tools/osx/clang+llvm-9.0.0-x86_64-darwin-apple/include/c++/v1/thread:2 //===--------------------------- thread -----------------------------------===//
- tools/osx/clang+llvm-9.0.0-x86_64-darwin-apple/include/c++/v1/__threading_support:23 # include <__external_threading>
- library/peripherals/can.hpp:199   /// contains methods for updating and retreiving can messages in a thread-safe
- library/testing/testing_frameworks.hpp:7 #include <thread>
- library/platforms/targets/linux/freertos_posix/port.c:9  *  + Updated code that works with pthreads to

https://github.com/starrtc/starrtc-rpi-demo
- rpi-live-raspbian/third/curl/include/curl/easy.h:57  * be transferred. It is useful in multithreaded applications when you can run
- rpi-live-raspbian/third/curl/include/curl/multi.h:32   o Enable multiple simultaneous transfers in the same thread without making it
- rpi-live-raspbian/third/curl/include/curl/curl.h:1230      timeouts. This option is useful for multi-threaded applications.
- rpi-live-raspbian/rpi/makefile:4 		   -D_GNU_SOURCE -Wno-deprecated -fpermissive -lpthread -lstarRTC -lstarRTCCore -lcurl -lstdc++ -lmmal -lbcm_host
- rpi-live-raspbian/third/curl/lib/libcurl.la:17 inherited_linker_flags=' -pthread'

https://github.com/RHIT-CSSE/csse332
- labs/lab07/max.c:2 #include <pthread.h>
- sample_exams/exam3-201930/solution/order.c:2 #include <pthread.h>
- activities/22_scoreboard/2criticalsection_solution.c:1 #include <pthread.h>
- labs/lab08/priority.c:2 #include <pthread.h>
- notes/session22/thread_ABC.c:4 #include <pthread.h>

https://github.com/weizai118/mongols
- inc/mongols/thread_pool.hpp:4 #include <thread>
- src/zstd/common/threading.h:23  * Windows minimalist Pthread Wrapper, based on :
- src/zstd/common/threading.c:14  * This file will hold wrapper for systems, which do not support pthreads
- src/tcp_threading_server.cpp:15 #include <thread>
- inc/mongols/tcp_threading_server.hpp:5 #include "thread_pool.hpp"

https://github.com/noah-/d2bs
- Matrix.h:12 #define USE_MULTI_THREAD // uncomment this line if used in multi-thread application
- Script.cpp:17       threadHandle(INVALID_HANDLE_VALUE), threadId(0), argc(argc), argv(argv) {
- Helpers.cpp:452     std::vector<DWORD> threadIds;
- doc/D2BSScript.h:1 /** Represents a script (a thread), created by either loading a file, or typing
- README.md:17 `public `[`int`](#group__handlers_1gad45ee50356f6b4f157faf0c8e44217ac)` `[`getThreadPriority`](#group__globalFunctions_1ga6ab5869695c97ce6e4fbc6899e16a75d)`()`            | Get the priority of the current thread.

https://github.com/GuaiYiHu/android_kernel_xiaomi_whyred
- tools/perf/util/thread.c:6 #include "thread.h"
- include/linux/thread_info.h:1 /* thread_info.h: common low-level thread information accessors
- tools/perf/util/thread_map.c:13 #include "thread_map.h"
- fs/btrfs/async-thread.c:20 #include <linux/kthread.h>
- kernel/kthread.c:1 /* Kernel thread helper functions.

https://github.com/w600/sdk
- src/network/lwip2.0.3/apps/snmp/snmp_threadsync.c:3  * SNMP thread synchronization implementation.
- src/network/lwip2.0.3/include/lwip/apps/snmp_threadsync.h:3  * SNMP server MIB API to implement thread synchronization
- src/network/lwip2.0.3/apps/snmp/README:21     SNMP runs in a worker thread when netconn API is used.
- src/network/lwip2.0.3/sys_arch.c:94  * \brief Blocks the thread while waiting for the semaphore to be signaled.
- src/network/lwip2.0.3/api/tcpip.c:3  * Sequential API Main thread module

https://github.com/cheetz/ceylogger
- version2/version_2.c:15 // Define thread handle
- version1/version_1.c:17 // Define thread handle
- version3/version_3.c:13 // Define thread handle

https://github.com/johnyHV/MTK2503-DOCUMENTATION
- WZ-203CS/开发工具/paho/workspace/.metadata/.log:9 !MESSAGE Invalid thread access
- WZ-203CS/开发工具/paho/eclipse-paho-mqtt-c-windows-1.2.0/include/MQTTClient.h:30  * However in mobile devices and other windowing environments, blocking on the GUI thread is a bad
- WZ-203CS/开发工具/paho/eclipse-paho-mqtt-c-windows-1.2.0/include/MQTTAsync.h:298  * a separate thread to the one on which the client application is running.

https://github.com/bogdanadnan/ariominer
- common/common.h:24 #include <thread>
- http/http_parser/README.md:142 An example of such a case is when using threads to handle a socket connection,
- hash/argon2/argon2.h:26     void set_threads(int threads);
- hash/cpu/cpu_hasher.h:28     int __threads_count;
- hash/gpu/amdgcn/CLRX/doc/GcnSdwaDpp.md:6 threads).

https://github.com/pwn20wndstuff/noncereboot1131UI
- noncereboot1131UI/post-exploit/utilities/kexecute.c:1 #include <pthread.h>
- noncereboot1131UI/exploit/README:86 I use the thread exception port trick from extra_recipe to get messages sent to the prealloced ipc_kmsg buffer. Each time we check each
- noncereboot1131UI/exploit/multi_path_sploit.c:13 #include <pthread.h>
- noncereboot1131UI/post-exploit/patchfinder64.c:346             } *thread = (void *)(ptr + 2);
- noncereboot1131UI/exploit/vfs_sploit.c:10 #include <pthread.h>

https://github.com/alpha1ab/Win2016LPE
- ALPC-TaskSched-LPE/ALPC-TaskSched-LPE/dllmain.cpp:92 	HANDLE transfer_thread = NULL;

https://github.com/awslabs/aws-c-io
- source/posix/pipe.c:219     if (!aws_event_loop_thread_is_callers_thread(read_impl->event_loop)) {
- docs/epoll_event_loop_proof.md:11   - *Thread safety*: threads only update objects that they own.
- source/event_loop.c:11 #include <aws/common/thread.h>
- README.md:165 The threading model for a channel (see below) is pinned to the thread of the event-loop. Each event-loop implementation
- include/aws/io/pipe.h:31  * This callback is always invoked on the read-end's event-loop thread.

https://github.com/9176324/WRK
- base/ntos/ke/i386/threadbg.asm:12 ;    threadbg.asm
- base/ntos/inc/kx.h:49     This function disables special kernel APC's for the current thread.
- base/ntos/inc/mac386.inc:80         mov     [LockAddress], edi      ; remember current thread
- base/inc/ntdlltrc.h:34 #define IN_TRACING    0x00000001      // Flag to see if this thread is tracing.
- base/ntos/ke/i386/zero.asm:127 ;     Note: The XMMI register set belongs to this thread.  It is neither

https://github.com/VirtualPlanetaryLaboratory/vplanet
- src/evolve.c:419 #pragma omp parallel for num_threads(NUM_THREADS) private(iNumVars, iNumEqns,  \
- docs/authors.rst:26 He also added OpenMP functionality for multithreading.

https://github.com/seL4/docs
- Tutorials/threads.md:4 tutorial: threads
- projects/capdl/index.md:54   // Specify root cnode and root paging structure of thread.
- projects/camkes/internals.md:105 components may have several threads), and removes any caps to any TCBs
- content_collections/_releases/sel4/2.0.0.md:25 before, esp. in scheduling threads.
- content_collections/_releases/sel4/6.0.0.md:30 - Reschedule IPIs are sent when migrating a thread.

https://github.com/Yubico/yubihsm-shell
- CHANGELOG:103 lib: Make the backend more thread-safe on Windows
- lib/yubihsm_curl.c:77     CURL_GLOBAL_DEFAULT); // NOTE(adma): this funciton is not thread safe
- pkcs11/util_pkcs11.c:31 #include <pthread.h>
- pkcs11/yubihsm_pkcs11.c:121       // NOTE(adma): no threading required

https://github.com/labplus-cn/mpython
- port/boards/mpython/main.c:63 #include "mpthreadport.h"
- port/lib/utils/pyexec.c:48 extern void mpython_stop_thread(void);
- port/drivers/codec/codec_lib/libmad/ltmain.sh:903     thread_safe=no
- port/Makefile:188 INC_ESPCOMP += -I$(ESPCOMP)/pthread/include
- port/drivers/codec/codec_lib/helix/Makefile-bak:172 INC_ESPCOMP += -I$(ESPCOMP)/pthread/include

https://github.com/asrlora/alios-asr-lora
- build/cmd/win32/Python27/Lib/imaplib.py:746     def thread(self, threading_algorithm, charset, *search_criteria):
- platform/mcu/xr871/include/kernel/os/os_thread.h:34 #include "kernel/os/YunOS/os_thread.h"
- platform/mcu/esp32/bsp/include/esp32/include/xtensa/xos_thread.h:3 // xos_thread.h - XOS Thread API interface and data structures.
- build/cmd/win32/Python27/Lib/dummy_threading.py:1 """Faux ``threading`` version using ``dummy_thread`` instead of ``thread``.
- security/mbedtls/include/mbedtls/threading.h:2  * \file threading.h

https://github.com/MSFTserver/RavenCoin-Wallet-With-Miners
- Wallet/Wallet-Source/src/checkqueue.h:14 #include <boost/thread/condition_variable.hpp>
- Wallet/Wallet-Source/build-aux/m4/ax_boost_thread.m4:2 #      http://www.gnu.org/software/autoconf-archive/ax_boost_thread.html
- Wallet/Wallet-Source/src/leveldb/port/thread_annotations.h:8 // Some environments provide custom macros to aid in static thread-safety
- Wallet/Wallet-Source/src/threadsafety.h:14 // See http://clang.llvm.org/docs/LanguageExtensions.html#threadsafety
- Wallet/Wallet-Source/build-aux/m4/ax_pthread.m4:2 #        http://www.gnu.org/software/autoconf-archive/ax_pthread.html

https://github.com/RT-Thread-packages/gui_engine
- libraries/freetype-2.6.2/builds/rt-thread/ftsystem.c:21   /* low-level, i.e. memory management, i/o access as well as thread       */
- src/server.c:81     /* re-init to server thread */
- touch/gui_touch.c:80 static rt_thread_t  touch_thread;
- libraries/freetype-2.6.2/ChangeLog.24:4840 	[truetype] Better multi-threading support.
- libraries/freetype-2.6.2/include/freetype/freetype.h:397   /*    In multi-threaded applications it is easiest to use one            */

https://github.com/cod3gen/sgminer-baikal
- submodules/libusb-bk/examples/dpfp_threaded.c:26 #include <pthread.h>
- submodules/libusb-bk/libusb/os/threads_windows.h:59 // We *were* getting timespec from pthread.h:
- doc/MINING.md:89 performance is required. Using --thread-concurrency is recommended
- events.c:43 static void *cmd_thread(void *cmdp)
- doc/kernel.md:12 such as (but not necessarily limited to) `thread-concurrency`, `intensity`,

https://github.com/undertheseanlp/chatbot
- engine/chatscript/SRC/mysql/include/my_thread.h:16 /* Defines to make different thread packages compatible */
- engine/chatscript/SRC/mysql/include/my_thread_local.h:20 #include <pthread.h>
- engine/chatscript/SRC/mongo/bson/bson-thread-private.h:36 #  include <pthread.h>
- engine/chatscript/SRC/mysql/include/mysql/thread_type.h:16 /* Defines to make different thread packages compatible */
- engine/chatscript/SRC/curl/curl-7.56.1/lib/asyn-thread.c:26  * Only for threaded name resolves builds

https://github.com/ArrowOS/android_hardware_qcom_audio
- hal/audio_hw.h:158     OFFLOAD_CMD_EXIT,               /* exit compress offload thread loop*/
- post_proc/bundle.c:20 #include <pthread.h>
- hal/audio_extn/sndmonitor.c:27    A thread is spawned to poll() on sound card state files in /proc.
- legacy/alsa_sound/AudioUsbALSA.cpp:251         pthread_join(mPlaybackUsb,NULL);
- hal/audio_extn/cirrus_playback.c:34 #include <pthread.h>

https://github.com/signalwire/libks
- src/ks_thread.c:25 #include "libks/internal/ks_thread.h"
- KSTest/cases/thread.cpp:23 #include "libks/internal/ks_thread.h"
- src/ks_thread_pool.c:30 } ks_thread_pool_state_t;
- src/include/libks/ks_thread_pool.h:25 KS_DECLARE(ks_status_t) ks_thread_pool_create(ks_thread_pool_t **tp, uint32_t min, uint32_t max, size_t stack_size,
- src/include/libks/internal/ks_thread.h:27 struct ks_thread {

https://github.com/kks1234/STM32
- 25.RT移植模板/rtthread/3.0.3/src/thread.c:2  * File      : thread.c
- 25.RT移植模板/rtthread/3.0.3/rt-thread.rtthread.pdsc:4   <vendor>rt-thread</vendor>
- 25.RT移植模板/rtthread/3.0.3/include/rtthread.h:2  * File      : rtthread.h
- 25.RT移植模板/rtthread/3.0.3/README.md:3 [![Build Status](https://travis-ci.org/RT-Thread/rt-thread.svg)](https://travis-ci.org/RT-Thread/rt-thread)
- 25.RT移植模板/rtthread/3.0.3/src/irq.c:28 #include <rtthread.h>

https://github.com/grackle-project/grackle
- CHANGELOG:50 	``omp_nthreads`` is always a field
- doc/source/Integration.rst:336 been compiled with OpenMP enabled, the number of threads used can be controlled
- src/example/cxx_omp_example.C:52 // Note        :  Test different routines in Grackle using single and multiple OpenMP threads
- doc/source/Reference.rst:14    arguments. These are explicity thread-safe as they use no global data.
- doc/source/Conduct.rst:40   discussion threads resulting from code contributions.

https://github.com/harvestsure/licode-windows
- Src/Common/ThreadPool.cpp:90 	UInt32 thread_idx = rand() % m_worker_size;
- Include/OSSupport/IsThread.h:4 // Interfaces to the cIsThread class representing an OS-independent wrapper for a class that implements a thread.
- Src/Common/OSSupport/IsThread.cpp:4 // Implements the cIsThread class representing an OS-independent wrapper for a class that implements a thread.
- Include/OSSupport/StackTrace.h:10 /** Prints the stacktrace for the current thread. */
- Src/Server/Root.h:6 #include <thread>

https://github.com/BOT-Man-JL/WFP-Traffic-Redirection-Driver
- sys/utils.h:8    functions and worker thread of the Network Inspect sample.
- sys/tl_drv.c:862     HANDLE threadHandle;
- sys/inspect.c:8    In addition the system worker thread
- sys/utils.c:8    functions and worker thread of the Network Inspect sample.

https://github.com/VFPX/Win32API
- libraries/kernel32/GetCurrentThread.md:8 #### The GetCurrentThread function retrieves a <Strong>pseudo</Strong> handle for the current thread.
- samples/sample_567.md:81 System information obtained through call to GetPerformanceInfo, includes counts for running processes and threads, handles, amount of available and allocated memory.  
- samples/sample_361.md:57 To shut down the local computer, the calling thread must have the SE_SHUTDOWN_NAME privilege.  
- samples/sample_176.md:55 		* the allocation and release of heap memory by other threads
- samples/sample_218.md:3 # Reading and setting the priority class values for the current process and thread

https://github.com/huuuuusy/YOLOV3-on-Android
- app/src/main/cpp/darknet/src/demo.c:86 void *detect_in_thread(void *ptr)
- app/src/main/cpp/darknet/examples/tag.c:18     pthread_t load_thread;
- app/src/main/cpp/darknet/examples/writing.c:36     pthread_t load_thread = load_data_in_thread(args);
- app/src/main/cpp/darknet/examples/swag.c:43     pthread_t load_thread = load_data_in_thread(args);
- app/src/main/assets/data/imagenet.shortnames.list:7110 screw thread

https://github.com/Trietptm-on-Coding-Algorithms/ZeroBank-ring0-bundle
- ZeroBank!kit/thread.c:13 PROOTKIT_PROCESS_LIST_HEAD kernel_get_process_threads(IN UINT32 ProcessId, IN PROOTKIT_API_HASH Hash)
- ZeroBank!kit/thread.h:12 	ULONG_PTR Ethread;
- ZeroBank!server/server_thread.c:3 BOOL rootkit_get_process_ethread(IN SOCKET sock, IN BYTE PacketType)
- ZeroBank!server/server_thread.h:5 	ULONG_PTR Ethread;
- ZeroBank!kit/net.h:63 	PETHREAD Ethread;

https://github.com/mit-pdos/xv6-riscv
- kernel/riscv.h:298 // read and write tp, the thread pointer, which xv6 uses to hold
- kernel/proc.c:477 // kernel thread, not this CPU. It should

https://github.com/sqlite/sqlite
- src/threads.c:13 ** This file presents a simple cross-platform threading interface for
- autoconf/README.txt:27   --enable-threadsafe         build a thread-safe library  [default=yes]
- doc/vdbesort-memory.md:9   * whether or not worker threads are enabled.
- src/mutex.c:161         "illegal multi-threaded access to database connection"
- ext/wasm/api/README.md:66   A Worker-thread-based API which uses OO API #1 to provide an

https://github.com/FreeRTOS/FreeRTOS
- FreeRTOS/Demo/RISC-V-spike-htif_GCC/README.md:105 (gdb) info threads
- FreeRTOS/Demo/WIN32-MSVC/main.c:39  * NOTE: Windows will not be running the FreeRTOS demo threads continuously, so
- FreeRTOS/Demo/lwIP_AVR32_UC3/conf_eth.h:78 /*! Number of threads that can be started with sys_thread_new() */
- History.txt:289 	  functionality in a more user friendly way - previously the generic thread
- FreeRTOS/Demo/Common/ethernet/lwip-1.4.0/doc/rawapi.txt:16 contexts (threads).

https://github.com/CloverHackyColor/CloverBootloader
- CloverApp/libimagequant-2.12.6/rust-api/src/lib.rs:266     /// It will be called multiple times per row. May be called in any order from any thread.
- BaseTools/Source/C/LzmaCompress/Sdk/C/Threads.h:1 /* Threads.h -- multithreading library
- BaseTools/Source/C/LzmaCompress/Sdk/C/Threads.c:1 /* Threads.c -- multithreading library
- Library/OpensslLib/openssl-1.0.1e/crypto/threads/netware.bat:2 rem batch file to build multi-thread test ( mttest.nlm )
- Library/OpensslLib/openssl-1.0.1e/crypto/threads/th-lock.c:1 /* crypto/threads/th-lock.c */

https://github.com/bytecodealliance/wasm-micro-runtime
- samples/multi-thread/wasm-apps/main_thread_exception.c:7 #include <pthread.h>
- samples/multi-thread/wasm-apps/main.c:7 #include <pthread.h>
- samples/multi-thread/wasm-apps/main_global_atomic.c:7 #include <pthread.h>
- samples/wasi-threads/wasm-apps/wasi_thread_start.S:4 	.functype	__wasi_thread_start_C (i32, i32) -> ()
- core/shared/platform/riot/riot_thread.c:25 struct os_thread_data;

https://github.com/AFLplusplus/AFLplusplus
- docs/features.md:26 A. Default is not thread-safe coverage counter updates for better performance,
- src/afl-gotcpu.c:58     #include <pthread.h>
- instrumentation/README.llvm.md:29 - The instrumentation can cope a bit better with multi-threaded targets.
- frida_mode/src/js/js.c:117   gum_script_scheduler_disable_background_thread(scheduler);
- qemu_mode/libqasan/malloc.c:31 #include <pthread.h>

https://github.com/zpoint/CPython-Internals
- Interpreter/thread/thread.md:1 # thread![image title](http://www.zpoint.xyz:8080/count/tag.svg?url=github%2FCPython-Internals/thread)
- Interpreter/thread/thread_cn.md:1 # thread![image title](http://www.zpoint.xyz:8080/count/tag.svg?url=github%2FCPython-Internals/thread_cn)
- README.md:74  - [x] [thread](https://github.com/zpoint/CPython-Internals/blob/master/Interpreter/thread/thread.md)
- README_CN.md:76  - [x] [thread(线程)](https://github.com/zpoint/CPython-Internals/blob/master/Interpreter/thread/thread_cn.md)
- Extension/CPP/cpp.md:113 I want to seperate these tasks to several different threads, and let os schedule them to work together

https://github.com/koute/bytehound
- jemallocator/jemalloc-ctl/src/thread.rs:7     allocatedp[ str: b"thread.allocatedp\0", non_str: 2 ] => *mut u64 |
- preload/src/processing_thread.rs:489             thread: allocation.tid,
- jemallocator/jemalloc-sys/jemalloc/src/background_thread.c:15 bool opt_background_thread = BACKGROUND_THREAD_DEFAULT;
- jemallocator/jemalloc-sys/jemalloc/include/jemalloc/internal/background_thread_inlines.h:5 background_thread_enabled(void) {
- jemallocator/jemalloc-sys/jemalloc/include/jemalloc/internal/background_thread_structs.h:15 	background_thread_stopped,

https://github.com/jeremycw/httpserver.h
- Doxyfile:455 # The NUM_PROC_THREADS specifies the number threads doxygen is allowed to use
- test/unit/munit.c:124 #  define MUNIT_THREAD_LOCAL __thread

https://github.com/unikraft/unikraft
- lib/uksched/thread.c:32  * Some thread definitions were derived from Mini-OS
- plat/common/arm/thread_start64.S:39  * |    thread main function     | In init_sp, we have pushed thread main
- lib/uksched/include/uk/thread.h:50 typedef void (*uk_thread_dtor_t)(struct uk_thread *);
- lib/uksignal/README:6 working with the new scheduling and thread APIs. A new implementation will be
- lib/ukmpi/Config.uk:7 		Provide inter-thread communication primitives

https://github.com/inspektor-gadget/inspektor-gadget
- docs/gadgets/audit/seccomp.md:82 default          mypod            unshare          kill_thread
- pkg/gadgets/audit/seccomp/tracer/syscalls.go:52 		return "kill_thread"
- pkg/container-hook/bpf/execruntime.bpf.c:72 	// and not the thread id.
- gadgets/trace_dns/program.bpf.c:327 	// A garbage collection thread running in userspace periodically scans for keys with old timestamps
- pkg/utils/syscalls/syscalls_amd64.go:103 	"get_thread_area":         211,

https://github.com/ProtonVPN/android-app
- openvpn/src/main/cpp/asio/asio/include/asio/thread.hpp:2 // thread.hpp
- openvpn/src/main/cpp/asio/asio/include/asio/detail/thread.hpp:2 // detail/thread.hpp
- openvpn/src/main/cpp/mbedtls/configs/config-thread.h:2  * \file config-thread.h
- openvpn/src/main/cpp/asio/asio/include/asio/impl/thread_pool.hpp:2 // impl/thread_pool.hpp
- openvpn/src/main/cpp/asio/asio/include/asio/impl/thread_pool.ipp:2 // impl/thread_pool.ipp

https://github.com/taviso/ctftool
- README.md:50 sendinput       - Send keystrokes to thread.
- payload.c:49             // attach to thread
- command.h:8 // We remember stub data so user only has to remember ID and thread.
- messages.h:4 // The last thread message received.
- messages.c:31 // for other threads. This thread just loops and reads messages.

https://github.com/google/XNNPACK
- src/operators/prelu-nc.c:186     pthreadpool_t threadpool)
- src/operators/reduce-nd.c:153     pthreadpool_t threadpool)
- bench/utils.cc:158   // Disabled thread pool (execution on the caller thread only).
- src/xnnpack/common.h:265 #if XNN_COMPILER_HAS_FEATURE(thread_sanitizer)
- src/xnnpack/compute.h:21   xnn_parallelization_type_1d_with_thread,

https://github.com/momotech/MLN
- MLN-Android/scan/src/main/java/com/google/zxing/client/android/DecodeThread.java:36  * This thread does all the heavy lifting of decoding the images.
- MLN-iOS/MLN/Classes/LuaLib/ltm.c:25   "string", "table", "function", "userdata", "thread",
- MLN-iOS/MLN/Classes/LuaLib/lgc.c:131   GCObject **p = &g->mainthread->next;
- MLN-iOS/MLN/Classes/Core/Proto/MLNBlock.m:53     NSAssert([NSThread isMainThread], @"This method to be executed in the main thread!");
- MLN-iOS/MLN/Classes/LuaLib/lstate.c:33 ** Main thread combines a thread state and the global state

https://github.com/termux/termux-x11
- app/src/main/cpp/lorie/shm/shmem.c:5 #include <pthread.h>
- app/src/main/cpp/recipes/pixman.cmake:58         "-DTLS=__thread"
- app/src/main/java/com/termux/x11/CmdEntryPoint.java:128         new Thread(() -> { // New thread is needed to avoid android.os.NetworkOnMainThreadException
- app/src/main/java/com/termux/x11/input/InputStub.java:11  * implementations of this interface are not required to be thread-safe. All these functions should
- app/src/main/cpp/lorie/InitOutput.c:169     pthread_t t;

https://github.com/chineseocr/darknet-ocr
- darknet/src/demo.c:85 void *detect_in_thread(void *ptr)
- darknet/src/compare.c:28     pthread_t load_thread;
- darknet/examples/writing.c:36     pthread_t load_thread = load_data_in_thread(args);
- darknet/examples/swag.c:43     pthread_t load_thread = load_data_in_thread(args);
- darknet/src/dropout_layer_kernels.cu:13     int id = (blockIdx.x + blockIdx.y*gridDim.x) * blockDim.x + threadIdx.x;

https://github.com/mohuihui/antispy
- src/Antispy/SpyHunterDrv/SpyHunterDrv/WorkerThread.c:272 					KdPrint(("thread: 0x%08X\n", (ULONG)Entry - QueueListEntryOffset));
- README.md:54 * Display system process and thread basic informations.
- doc/Readme.txt:62 	Display system process and thread basic informations.
- src/Antispy/SpyHunter/SpyHunter/mhook-lib/mhook.cpp:357 			// If a thread has some of our trampoline code on its stack
- src/Antispy/SpyHunter/SpyHunter/String.cpp:4402 	L"Are you sure you want to kill the thread?",

https://github.com/vroland/epdiy
- src/render.c:160 static void IRAM_ATTR render_thread(void* arg) {
- src/output_i2s/render_i2s.c:172         // transmission is started in renderer threads, now wait util it's done
- src/output_i2s/render_i2s.h:27 void i2s_fetch_frame_data(RenderContext_t *ctx, int thread_id);
- src/output_lcd/render_lcd.c:40     int thread = ctx->line_threads[ctx->lines_consumed];
- src/output_lcd/render_lcd.h:16  * Worker thread for output calculation.

https://github.com/darthcloud/BlueRetro
- main/system/startup.c:64 #include "esp_pthread.h"

https://github.com/forthespada/MyPoorWebServer
- httpd.c:11 #include <pthread.h>
- Makefile:4 	gcc -W -Wall -o myhttp httpd.c -lpthread

https://github.com/WireGuard/wireguard-linux
- net/rxrpc/io_thread.c:50 	rxrpc_wake_up_io_thread(local);
- include/linux/thread_info.h:2 /* thread_info.h: common low-level thread information accessors
- tools/perf/util/thread_map.h:7 #include <perf/threadmap.h>
- arch/sh/include/asm/thread_info.h:27 struct thread_info {
- lib/Kconfig.kcsan:7 	def_bool (CC_IS_CLANG && $(cc-option,-fsanitize=thread -mllvm -tsan-distinguish-volatile=1)) || \

https://github.com/tmewett/BrogueCE
- test/run_regression_tests.py:27             # Use executor.submit to run the command in a separate thread

https://github.com/Xinyuan-LilyGO/TTGO_TWatch_Library
- src/lvgl/src/lv_misc/lv_printf.h:28 //        These routines are thread safe and reentrant.
- src/lvgl/src/lv_misc/lv_printf.c:26 //        embedded systems with a very limited resources. These routines are thread
- examples/TFT_eSPI/Sprite/Orrery/astronomy.c:3213 /* FIXFIXFIX - Using a global is not thread-safe. Either add thread-locks or change API to accept a cache pointer. */

https://github.com/Matheus-Garbelini/esp32_esp8266_attacks
- hostapd-2.8_source/src/l2_packet/l2_packet_ndis.c:13  * WinXP version of the code uses overlapped I/O and a single threaded design
- hostapd-2.8_source/src/l2_packet/l2_packet_winpcap.c:2  * WPA Supplicant - Layer2 packet handling with WinPcap RX thread
- hostapd-2.8_source/src/eap_server/tncs.c:20 /* TODO: TNCS must be thread-safe; review the code and add locking etc. if
- hostapd-2.8_source/src/crypto/tls_openssl.c:1129 		ERR_remove_thread_state(NULL);
- hostapd-2.8_source/src/wps/wps_upnp.c:23  * -- It uses multiple threads, making debugging more difficult

https://github.com/nickmqb/muon
- docs/reference.md:71 The static field is a thread-local. Each thread will get its own value.
- docs/getting_started.md:56 * If your program crashes, make sure that you have set `::currentAllocator` for the current thread, and that the allocator has not run out of memory.
- language_server/crashhandler_windows.mu:15 	threadId := GetCurrentThreadId()
- docs/muon_by_example.md:46 * The `::` operator is used to access a member of the global namespace. `::currentAllocator` refers to the allocator for the current thread, which is defined in [`lib/core.mu`](../lib/core.mu).
- compiler/c_generator.mu:65 		c.out.writeLine("#define _Thread_local __declspec(thread)")

https://github.com/lqian/light-LPR
- include/HalideRuntime.h:40  * implementation. E.g. halide_shutdown_thread_pool.
- include/stb_image.h:875 // this is not threadsafe
- include/Matrix.h:45     improve performance. Matrix is not thread safe unless getType() is called first.
- include/mlpdr/MLPDR.h:53 	int threads_num = 2;
- src/mlpdr/MLPDR.cpp:131 #pragma omp parallel for num_threads(threads_num)

https://github.com/septag/rizz
- src/sx/src/threads.c:9 #include "sx/threads.h"
- include/sx/threads.h:9 // threads.h - v1.0 - Common portable multi-threading primitives
- src/2dtools/README.md:42 #### Multi-threading
- include/sx/jobs.h:8 // Job dispatcher is a multi-threaded task scheduler, that uses lightweight fibers to switch
- src/rizz/android.c:7 #    include <pthread.h>

https://github.com/zodiacon/SystemExplorer
- SystemExplorer/ThreadInfoEx.h:19 	mutable std::unique_ptr<WinSys::Thread> _thread;
- SystemExplorer/ThreadInfoEx.cpp:24 	if (_thread == nullptr) {
- phnt/ntkeapi.h:16 #define LOW_PRIORITY 0 // Lowest thread priority level
- ObjExpCore/ProcessInfo.h:59 		void AddThread(std::shared_ptr<ThreadInfo> thread);
- SystemExplorer/SystemExplorer.rc:425 IDI_THREAD              ICON                    "res\\thread.ico"

https://github.com/SuperIlu/DOjS
- plugins/neural.dxelib/README.md:17 - Fast and thread-safe.
- plugins/cpuid.dxelib/libcpuid.h:282 	 * If you're writing a multithreaded program and you want to run it on
- plugins/ibxm.dxelib/ibxm-ac/sdlplayer.c:101 		/* Notify the main thread to stop playback.*/
- plugins/jpeg.dxelib/stb_image.h:54       2.24  (2020-02-02) fix warnings; thread-local failure_reason and flip_vertically
- plugins/vorbis.dxelib/stb_vorbis.c:91 // Individual stb_vorbis* handles are not thread-safe; you cannot decode from

https://github.com/naasking/async.h
- async/example-buffer.c:29  * This file is part of the protothreads library.
- async/example-codelock.c:124  * is local to this file. The name of the function is codelock_thread
- async/async-sem.h:3  * Counting semaphores implemented on async, copied from protothreads.
- README.md:3 Taking inspiration from protothreads and async/await as found in C#, Rust and JS,
- async/async.h:43  * Taking inspiration from protothreads and async/await as found in C#, Rust and JS,

https://github.com/pms67/HadesFCS
- Firmware/F4/HadesF4Testbed_RTOS/Core/Src/main.c:696   * @brief  Function implementing the defaultTask thread.
- Firmware/F4Quad/Drivers/CMSIS/Include/tz_context.h:60 /// Load secure context (called on RTOS thread context switch)
- Flight Simulator/UAVSim/Library/PackageCache/com.unity.multiplayer-hlapi@1.0.2/Editor/NetworkManagerEditor.cs:117             m_MinUpdateTimeoutLabel = TextUtility.TextContent("Min Update Timeout", "Minimum time network thread waits for events");
- Flight Simulator/UAVSim/Library/PackageCache/com.unity.textmeshpro@2.0.1/Scripts/Editor/TMPro_FontAssetCreatorWindow.cs:722                         // Worker thread to pack glyphs in the given texture space.
- Flight Simulator/UAVSim3DOF/ProjectSettings/Physics2DSettings.asset:24     useMultithreading: 0

https://github.com/microsoft/SymCrypt
- lib/FatalIntercept.c:10 // Rather, it can kill the current thread and not take down the machine.
- unittest/lib/rndDriver.cpp:130     CHECK( 0 < nThreads && nThreads <= 1, "?" );    // Currently only 1 thread supported
- unittest/inc/ioctlDefs.h:26     ULONG   mainThreadError;                // 0 if no error, or an NTSTATUS if the main thread had an error
- unittest/lib/main_sys_common.cpp:35 BOOLEAN g_fExitMultithreadTest = FALSE;
- lib/aes-key.c:323 // It is safe to call this function on two separate threads for the same table.

https://github.com/45clouds/WirelessCarPlay
- source/AccessorySDK/Support/ThreadUtils.h:61 	#include <pthread_np.h>
- source/AccessorySDK/Support/ThreadUtils.c:71 	DWORD		dwThreadID;	// Thread ID (-1=caller thread).
- mDNSResponder/mDNSPosix/Makefile:68 LINKOPTS_PTHREAD = -lpthread
- source/Support/AudioUtils.h:89 	increases the likelihood of the hardware running dry and dropping audio if there are thread scheduling delays that
- mDNSResponder/mDNSPosix/ReadMe.txt:195 not multi-threaded.  I do everything from a main loop that calls

https://github.com/michaelforney/cproc
- token.c:50 	[TTHREAD_LOCAL] = "thread_local",
- pp.c:560 		{"__thread",       TTHREAD_LOCAL},
- decl.c:907 			error(&tok.loc, "block scope declaration containing 'thread_local' must contain 'static' or 'extern'");
- doc/software.md:39 - Remove usage of `__thread`, only necessary when linking libctf
- cproc.1:115 .It Fl pthread

https://github.com/googleprojectzero/ktrw
- README.md:138 You can use `thread list` to list the code running on each physical CPU core. (Note that one core
- ktrw_kext_loader/ktrr/ktrr_bypass.c:25 #include <pthread.h>
- ktrw_gdb_stub/kernel_symbols/iPhone10,1_17F75.txt:12 _kernel_thread_start	0xFFFFFFF007C33608
- ktrw_gdb_stub/kernel_symbols/iPhone10,1_17C54.txt:12 _kernel_thread_start	0xFFFFFFF007C02C8C
- ktrw_gdb_stub/kernel_symbols/iPhone10,1_17B102.txt:12 _kernel_thread_start	0xFFFFFFF007BFAC54

https://github.com/mudita/MuditaOS
- module-os/RTOSWrapper/include/thread.hpp:69  *  To use this, you need to subclass it. All of your threads should
- module-os/RTOSWrapper/include/condition_variable.hpp:69  *  of threads.
- module-os/RTOSWrapper/cthread.cpp:41 #include "thread.hpp"
- module-vfs/board/linux/purefs/src/fs/thread_local_cwd.cpp:5 #include <purefs/fs/thread_local_cwd.hpp>
- module-vfs/include/internal/purefs/fs/thread_local_cwd.hpp:9     auto get_thread_local_cwd_path() noexcept -> std::string_view;

https://github.com/fogleman/hmm
- src/stb_image.h:876 // this is not threadsafe

https://github.com/ldarren/QuickJS
- doc/quickjs.texi:562 @item workers (threads)
- quickjs-libc.c:61 /* enable the os.Worker API. IT relies on POSIX threads */
- libregexp.c:1846            thread execution will be possible in an optimized
- Makefile:173 HOST_LIBS=-lm -ldl -lpthread
- qjsc.c:454     *arg++ = "-lpthread";

https://github.com/bsauce/kernel-security-learning
- README.md:97 31. 2020-USENIX：[Muzz: Thread-aware Grey-box Fuzzing for Effective Bug Hunting in Multithreaded Programs](https://www.usenix.org/system/files/sec20-chen-hongxu.pdf) — 【[note](https://securitygossip.com/blog/2020/09/18/muzz-thread-aware-grey-box-fuzzing-for-effective-bug-hunting-in-multithreaded-programs/)】
- debug_technique/SystemTap使用技巧.md:410 thread_indent(n): 补充空格。
- debug_technique/trace/00-code/trace-events-sample/trace-events-sample.c:2 #include <linux/kthread.h>
- debug_technique/systemtap/code/00-code/language_reference/hello-world.stp:10     #printf("indent = %d\n", thread_indent( ));
- debug_technique/kprobe/kprobes/kretprobe_example.c:44 		return 1;	/* Skip kernel threads */

https://github.com/threatland/TL-BOTS
- TL.EXPLOIT_SCAN/2SORT.Various/exploits2.14c869/redis/source/thpool.c:4  * Description:  Library providing a threading pool where you can add
- TL.P2P/P2P.Demon/3f.0ba5b2.py:3 import threading, paramiko, random, socket, time, sys, re, os
- TL.P2P/P2P.Demon/ZoZo.ff702d.c:12 #include <pthread.h>
- TL.EXPLOIT_SCAN/SCANNER.SSH/unix.py:2 import threading, paramiko, random, socket, time, sys
- TL.P2P/P2P.Venom/venom.93a229.c:12 #include <pthread.h>

https://github.com/bluez/bluez
- configure.ac:52 AC_ARG_ENABLE(threads, AS_HELP_STRING([--enable-threads],
- android/hal.h:42 void bt_thread_associate(void);
- android/hal-ipc.c:7 #include <pthread.h>
- android/client/if-sco.c:8 #include <pthread.h>
- TODO:50   http://thread.gmane.org/gmane.linux.bluez.kernel/30175/focus=30190.

https://github.com/Velocidex/WinPmem
- site/content/docs/files.md:58 ## Enabling multiple threads
- site/content/docs/memory.md:51 * By default WinPmem uses 2 threads to compress the image, however
- docs/docs/files/index.html:164 <h2 id="enabling-multiple-threads">Enabling multiple threads</h2>
- kernel/read.c:59 // This method is thread-safe and does not need protection of a mutex.
- CHANGELOG.md:84 * Possible unknown behavior fix: reading from physical memory device is passive level file I/O (ZwMapViewOfSection or ZwReadFile requires PASSIVEL LEVEL). However, acquiring a fast mutex will raise IRQL on thread to APC_LEVEL. In particular, the I/O manager will indicate when a ZwMapViewOfSection or ZwReadFile has finished, and this would be blocked if on APC_LEVEL already (because it is an APC). In any case, this has been resolved. (Though wondering how nobody ever complained.) Reading from the high level physical memory device will now be done on passive, as normal file I/O, no mutex is needed for that. Spontaneous method switching has been disabled.

https://github.com/aide/aide
- NEWS:10     * Require pthread (remove --without-pthread configure option)
- src/log.c:27 #include <pthread.h>
- src/queue.c:25 #include <pthread.h>
- src/db_disk.c:44 #include <pthread.h>
- src/progress.c:23 #include <pthread.h>

https://github.com/LeoVen/C-Macro-Collections
- src/cmc/utl/thread.h:26  * utl_thread.h
- src/cmc/utl/mutex.h:69 #include <pthread.h>
- src/cmc/cor/flags.h:56     CMC_FLAG_THREAD    =  8, // Generic error regarding threads
- README.md:134 |   TSC   | Thread-Safe Collections          | Collections that allow multiple operations from multiple threads                            |
- CHANGELOG:38     Added ./utl/thread.h

https://github.com/krakjoe/tombs
- README.md:7 have their tombs vacated. When the programmer connects to the Tombs socket, a background thread will send populated tombs without interrupting the execution of your application.
- zend_tombs_io.c:26 #include <pthread.h>
- zend_tombs_strings.c:79     __atomic_thread_fence(__ATOMIC_ACQUIRE);
- config.m4:10   PHP_ADD_LIBRARY(pthread,, TOMBS_SHARED_LIBADD)

https://github.com/ChimeHQ/Impact
- Impact/ImpactThread.h:23     thread_act_array_t threads;
- Impact/ImpactThread.c:18 #include <mach/thread_act.h>
- Impact/Utility/ImpactCPU.h:64 static const thread_state_flavor_t ImpactCPUThreadStateFlavor = x86_THREAD_STATE64;
- Impact/Utility/ImpactCPU.c:38 static uintptr_t ImpactCPURegisterARM64GetFP(_STRUCT_ARM_THREAD_STATE64 threadState) {
- Impact/ImpactState.h:26     thread_state_flavor_t flavors[EXC_TYPES_COUNT];

https://github.com/espressif/esp-skainet
- components/sr_ringbuf/ringbuf.c:204             //no data to read, release thread block to allow other threads to write data
- examples/usb_mic_recorder/main/src/usb_mic_recorder.c:96 // This top level thread process all usb events and invoke callbacks

https://github.com/RTimothyEdwards/magic
- graphics/grX11thread.c:1 /* grX11thread.c -
- doc/textfiles/locking.txt:63    than 10s are stale. Ideally, a simple thread would do this, but...
- graphics/grOGL1.c:310  *	Helper process/thread killed.
- graphics/X11Helper.c:6  *   parallel.  Xlib is not thread-safe, so running this as a thread
- INSTALL:46 	--disable-threads

https://github.com/rtlabs-com/p-net
- doc/linuxtiming.rst:26    To show all threads, with scheduling mechanism::
- CHANGELOG.md:18 - Set thread priority and stack size via configuration
- src/common/pf_bg_worker.c:45    os_thread_create (
- src/ports/linux/pnal_eth.c:40    os_thread_t * thread;
- src/ports/linux/pnal_config.h:37 typedef struct pnal_thread_cfg

https://github.com/alibaba/cloud-kernel
- fs/proc/thread_self.c:9  * /proc/thread_self:
- tools/perf/util/thread.c:9 #include "thread.h"
- arch/x86/include/asm/thread_info.h:2 /* thread_info.h: low-level thread information
- tools/testing/selftests/proc/thread-self.c:16 // Test that /proc/thread-self gives correct TGID/PID.
- include/linux/kthread.h:4 /* Simple interface for creating and stopping kernel threads without mess. */

https://github.com/STMicroelectronics/STM32CubeH7
- Drivers/CMSIS/docs/RTOS2/html/group__rtx__evr__thread.js:1 var group__rtx__evr__thread =
- Drivers/CMSIS/docs/RTOS2/html/group__rtx__evr__thread__flags.js:1 var group__rtx__evr__thread__flags =
- Drivers/CMSIS/docs/RTOS2/html/group__rtx__evr__thread__flags.html:92 $(document).ready(function(){initNavTree('group__rtx__evr__thread__flags.html','');});
- Drivers/CMSIS/docs/RTOS2/html/group__rtx__evr__thread.html:92 $(document).ready(function(){initNavTree('group__rtx__evr__thread.html','');});
- Drivers/CMSIS/docs/RTOS/html/threadConfig.html:92 $(document).ready(function(){initNavTree('threadConfig.html','');});

https://github.com/adafruit/Adafruit_TinyUSB_Arduino
- src/osal/osal_rtthread.h:31 #include "rtthread.h"
- src/common/tusb_fifo.h:39 // process (thread or ISR) interferes.
- src/arduino/ports/nrf/Adafruit_TinyUSB_nrf.cpp:63 // This top level thread process all usb events and invoke callbacks
- src/common/tusb_fifo.c:574     reentrant and thus thread and ISR save without any mutexes. In case an
- src/arduino/Adafruit_USBH_Host.cpp:127   // Create an task for executing interrupt handler in thread mode

https://github.com/hackerhouse-opensource/exploits
- jdwp-exploit.txt:46 It is often necessary to set the JDB context to be within a suspended thread or
- vncscan.py:18 import threading
- winnuke2011.sh:11 * echo packets. This exploit creates 250 threads and 
- hpwhytry.py:7 import threading
- gns3super-osx.sh:32 # Source NIO listener thread for prdelka has started

https://github.com/maximkulkin/esp32-homekit-camera
- components/x264/x264-snapshot-20181221-2245-stable/input/thread.c:2  * thread.c: threaded input
- components/x264/x264-snapshot-20181221-2245-stable/doc/threads.txt:2 Slice-based threads was the original threading model of x264.  It was replaced with frame-based threads in r607.  This document was originally written at that time.  Slice-based threading was brought back (as an optional mode) in r1364 for low-latency encoding.  Furthermore, frame-based threading was modified significantly in r1246, with the addition of threaded lookahead.
- components/x264/x264-snapshot-20181221-2245-stable/common/threadpool.c:2  * threadpool.c: thread pooling
- components/x264/x264-snapshot-20181221-2245-stable/common/win32thread.c:2  * win32thread.c: windows threading
- components/x264/x264-snapshot-20181221-2245-stable/common/win32thread.h:2  * win32thread.h: windows threading

https://github.com/404name/winter
- 漂流瓶/C语言+mysql版/Mysql/include/my_command.h:87     These threads won't be killed by `KILL`
- 漂流瓶/C语言+mysql版/Mysql/include/mysql.h:306   unsigned long thread_id; /* Id for connection in server */
- 漂流瓶/C语言+mysql版/Mysql/include/mysql_com.h:211 #define REFRESH_THREADS 32 /**< Flush thread cache */

https://github.com/vusec/ridl
- pocs/Makefile:23 	# should leak 89 (TAA -> cross-thread write leak)
- pocs/taa_read.c:2 Leak a cross-thread read using TSX cache-conflict aborts.
- pocs/rdrand/leak_rdrand.c:2 Run cpuid on one thread, and then leak the results on another.
- tool/source/linux/topology.c:116 get_thread_siblings(struct bitmap *cpu_mask, size_t cpu_no)
- pocs/may10leak/may10leak.c:25 // to leak from another SMT thread *using mfence*:

https://github.com/wiidev/usbloadergx
- source/utils/ThreadedTask.hpp:50 		//! Start the threaded task thread and execute one callback after another - FIFO style
- source/mload/mload.c:82 // to get the thread id of mload
- source/mload/mload.h:120 // to get the thread id of mload
- source/menu.cpp:52 static lwp_t guithread = LWP_THREAD_NULL;
- source/mload/mload_modules.c:76 static int my_thread_id = 0;

https://github.com/wsbblyy/wechat-pc-hook-api
- WechatDllCpp/mongoose.h:399 #include <pthread.h>

https://github.com/freetype/freetype
- builds/unix/ax_pthread.m4:2 #        https://www.gnu.org/software/autoconf-archive/ax_pthread.html
- src/gzip/crc32.c:17   one thread to use crc32().
- docs/CHANGES:1431     - Behdad  Esfahbod contributed  code  for improved  thread-safety,
- src/base/ftsystem.c:21    * low-level, i.e. memory management, i/o access as well as thread
- src/gzip/zlib.h:146    If zlib is used in a multi-threaded application, zalloc and zfree must be

https://github.com/getsentry/sentry-native
- src/sentry_sync.c:18     DWORD dwThreadID; // Thread ID (-1=caller thread).
- CMakeLists.txt:61 option(SENTRY_LINK_PTHREAD "Link platform threads library" ON)
- CHANGELOG.md:127 - Fix sporadic crash on Windows due to race condition when initializing background-worker thread-id. ([#785](https://github.com/getsentry/sentry-native/pull/785))
- src/sentry_sync.h:22 // pthreads use `void *` return types, whereas windows uses `DWORD`
- src/sentry_options.c:27     opts->transport_thread_name = sentry__string_clone("sentry-http");

https://github.com/PS3Xploit/PS3HEN
- lv2/src/thread.S:4 LV2_FUNCTION(ppu_thread_create, ppu_thread_create_symbol)
- lv2/src/thread_c.c:4 #include <lv2/thread.h>
- lv2/include/lv2/thread.h:23 } *thread_t;
- README.md:36   - Updated and cleaned up downloadPKG_thread2 function<br>
- stage0_file/Makefile_481C:21 OBJS = start.o unregister_services.o main.o ../lv2/src/libc.o ../lv2/src/memory.o  ../lv2/src/io.o ../lv2/src/thread.o ../lv1/src/hvcall.o

https://github.com/zodiacon/PEExplorerV2
- PEExplorerV2/Capstone/xcore.h:49 	// internal thread registers

https://github.com/alipay/mPaaS
- mpaas_nebula_demo/mpaas_nebula_demo_ios/MPaaS/Frameworks/APMCache.framework/Headers/APMCache.h:17    `APMCache` is a thread safe key-value cache.
- mpaas_nebula_demo/mpaas_nebula_demo_ios/MPaaS/Frameworks/APOpenSSL.framework/Headers/crypto.h:284 /* Adds thread number to the memory checking information */
- mpaas_nebula_demo/mpaas_nebula_demo_ios/MPaaS/Frameworks/APMCache.framework/Headers/APMMemoryCache.h:16    The API and performance is similar to `NSCache`, all methods are thread-safe.
- mpaas_nebula_demo/mpaas_nebula_demo_ios/MPaaS/Frameworks/APCrashReporter.framework/Headers/PLCrashReportThreadInfo.h:36     /** The thread number. Should be unique within a given crash log. */
- mpaas_nebula_demo/mpaas_nebula_demo_ios/MPaaS/Frameworks/APMobileNetwork.framework/Headers/DTRpcClient.h:95  * @param thread 当前运行operation的线程。

https://github.com/Nextomics/NextDenovo
- util/thpool.c:13 #include <pthread.h>
- lib/htslib/htslib/thread_pool.h:1 /// @file htslib/thread_pool.h
- lib/htslib/thread_pool_internal.h:1 /*  thread_pool_internal.h -- Internal API for the thread pool.
- lib/htslib/thread_pool.c:1 /*  thread_pool.c -- A pool of generic worker threads
- lib/htslib/NEWS:37   - Reduce the number of unnecessary wake-ups in the thread pool. (#703)

https://github.com/prabirshrestha/dwm-win32
- src/dwm-win32.c:1044 wineventproc(HWINEVENTHOOK heventhook, DWORD event, HWND hwnd, LONG object, LONG child, DWORD eventthread, DWORD eventtime_ms) {
- extern/sdl2/include/SDL_thread.h:22 #ifndef SDL_thread_h_
- extern/sdl2/src/thread/SDL_thread.c:23 /* System independent thread management routines for SDL */
- extern/sdl2/src/thread/SDL_thread_c.h:23 #ifndef SDL_thread_c_h_
- extern/sdl2/src/thread/SDL_systhread.h:25 #ifndef SDL_systhread_h_

https://github.com/bacnet-stack/bacnet-stack
- apps/router/portthread.h:34 #include <pthread.h>
- ports/win32/rx_fsm.c:336     hThread = _beginthread(milliseconds_task, 4096, &arg_value);
- apps/router/ipmodule.h:35 #include "portthread.h"
- ports/win32/dlmstp.c:626     hThread = _beginthread(dlmstp_receive_fsm_task, 4096, &arg_value);
- ports/win32/dlmstp-mm.c:651     /* start the threads */

https://github.com/STJr/Kart-Public
- src/sdl/i_threads.c:9 /// \file  i_threads.c
- libs/SDL2/include/SDL_thread.h:22 #ifndef SDL_thread_h_
- src/i_threads.h:9 /// \file  i_threads.h
- android/src/org/srb2/GameThread.java:22 		Log.d(TAG, "Starting thread!");
- libs/SDL2/i686-w64-mingw32/include/SDL2/SDL_thread.h:22 #ifndef SDL_thread_h_

https://github.com/ericsink/wasm2cil
- wasi/Wasi.cs:327                 throw new NotImplementedException("thread cputime");
- bt/opcode.def:401 /* Thread opcodes (--enable-threads) */
- todo.txt:3 to make it compatible with wasi.  no threads.
- sqlite3/to_wasm.sh:2 clang --sysroot=/mnt/c/Users/eric/dev/wasi-sysroot/sysroot --target=wasm32-unknown-wasi -O2 vfs.c os.c wrap.c sqlite3.c -DNDEBUG -DSQLITE_OS_OTHER -Wl,--allow-undefined -Wl,--no-threads -o sqlite3.wasm
- sqlite3/non_wasi.sh:2 clang --target=wasm32 -O2 sqlite3.c -DNDEBUG -DSQLITE_OS_UNIX -DSQLITE_THREADSAFE=0 -nostdlib -Wl,--export-all -Wl,--no-entry -Wl,--allow-undefined -Wl,--no-threads -o sqlite3.wasm

https://github.com/msm8916-mainline/lk2nd
- include/kernel/thread.h:30 #include <arch/thread.h>
- arch/x86/thread.c:27 #include <kernel/thread.h>
- arch/x86/include/arch/arch_thread.h:26 struct arch_thread {
- include/arch/thread.h:26 // give the arch code a chance to declare the arch_thread struct
- kernel/thread.c:26  * @brief  Kernel threading

https://github.com/Embedfire/embed_linux_tutorial
- documentation/system_programing/thread.rst:7 从很多Linux的书籍我们都可以这样子描述进程（process）和线程（thread）的：
- base_code/system_programing/thread/sources/thread.c:23  * 函数原型 int pthread_create ((pthread_t *thread, pthread_attr_t *attr,void *(*start_routine)(void *), void *arg))
- base_code/system_programing/thread_attr/sources/thread_attr.c:1 /** thread_attr.c */
- base_code/system_programing/thread/Makefile:3 Target = thread_demo
- base_code/system_programing/README.md:29 thread      线程控制实验

https://github.com/ropalma/ICMC-USP
- Comandos Linux/README.md:3450 gconfd-2 15606 user mem DEL 254,2 864955 /usr/lib/libgthread-2.0.so.0.400.0

https://github.com/rokups/virtual-reality
- src/vr/main.cpp:33 void icmp_thread(context& ctx);
- src/shared/win32.h:32 extern "C" void free_module_exit_thread(HMODULE hModule, int exit_code);
- src/gts/gts.cpp:193 DWORD WINAPI lock_thread(LPVOID is_locked_void)
- src/shared/free_exit.asm:25 ; that contains currently executing code) and exits current thread without
- src/shared/LoadLibraryR.c:228             // create a remote thread in the host process to call the ReflectiveLoader!

https://github.com/Electry/PSVshell
- README.md:11 - Shows per-core CPU usage in %, including peak single-thread load
- src/main.c:25 static SceUID g_thread_uid = -1;
- src/perf.h:14         SceUInt32         threadSwitchCount;

https://github.com/Shreeyak/cleargrasp
- live_demo/realsense/realsense.cpp:34         void * listener_thread();
- api/modeling/sync_batchnorm/comm.py:13 import threading
- api/depth2depth/gaps/pkgs/png/crc32.c:19   one thread to use crc32().
- api/depth2depth/gaps/pkgs/png/ZLIB_README.txt:4 thread safe.  The data format used by the zlib library is described by RFCs
- api/depth2depth/gaps/pkgs/png/infback.c:70    used for threaded applications, since the rewriting of the tables and virgin

https://github.com/liulab-dfci/MAESTRO
- refpkg/giggle/lib/htslib/htslib/thread_pool.h:1 /// @file htslib/thread_pool.h
- refpkg/giggle/lib/htslib/thread_pool_internal.h:1 /*  thread_pool_internal.h -- Internal API for the thread pool.
- refpkg/giggle/lib/htslib/thread_pool.c:1 /*  thread_pool.c -- A pool of generic worker threads
- refpkg/giggle/lib/htslib/NEWS:44 * Added a thread pool interface and replaced the bgzf multi-threading
- MAESTRO/R/scRNAseq_pipe.R:34   make_option(c("--thread"), type = "integer", default = 1,

https://github.com/opentoonz/kumoworks
- sources/renderpopup.h:7 #include "renderworkerthread.h"
- sources/CMakeLists.txt:19     renderworkerthread.h
- sources/cloud.cpp:1308       *m_threadMaxLuminance = std::max(*m_threadMaxLuminance, luminance);

https://github.com/PHZ76/rtmp
- src/net/Timestamp.h:11 #include <thread>
- src/3rdpart/mongoose/mongoose.h:405 #include <pthread.h>
- src/xop/HttpServer.cpp:7 	, poll_thread_(nullptr)
- src/net/Timer.h:15 #include <thread>
- src/net/Logger.h:9 #include <thread>

https://github.com/leech001/MPU6050
- examples/STM32F401CCU6_MPU6050/Drivers/CMSIS/Include/tz_context.h:60 /// Load secure context (called on RTOS thread context switch)

https://github.com/liulab-dfci/TRUST4
- FastqExtractor.cpp:6 #include <pthread.h>
- samtools-0.1.19/bgzf.h:52 	void *mt; // only used for multi-threading
- samtools-0.1.19/bgzf.c:30 #include <pthread.h>
- BamExtractor.cpp:6 #include <pthread.h>
- samtools-0.1.19/bam_sort.c:90   function is NOT thread safe.

https://github.com/christian-kramer/JieLi-AC690X-Familiarization
- README.md:51 I found [this](https://radioskot.ru/forum/11-14227-38) Russian radio forum thread about the AC6905a, and saw that yes, in fact, there was a dedicated programmer for these chips.
- JieLi AC690X SDK/apps_soundbox/download/ac690x/post_build/map.txt:543 ../include_lib/common_lib.a(thread.o)

https://github.com/walmis/blackmagic-espidf
- main/gdb_main.cpp:226 						gdb_putnotifpacket_f("Stop:T%02Xthread:1;core:0;", GDB_SIGINT);
- sdkconfig:436 CONFIG_PTHREAD_TASK_NAME_DEFAULT="pthread"

https://github.com/Atrix256/SampleZoo
- src/stb/stb_image.h:871 // this is not threadsafe
- contributing.md:66 * look into multithreading the tests & sample generation. data cache would need to be made safe for this.

https://github.com/jstrosch/learning-reverse-engineering
- Assembly/learning_assembly_series/windbg01.out:30 Allocated processors:32, running threads:1.

https://github.com/embench/embench-iot
- benchmark_speed.py:26 import threading
- src/picojpeg/picojpeg.h:135 // Not thread safe.
- config/riscv32/boards/rv32wallyverilog/startup/crt0.S:14   // set the thread pointer

https://github.com/gmtsar/gmtsar
- gmtsar/sbas_parallel.c:448     //Get max number of threads on this system
- snaphu/src/snaphu.h:124 #define SECONDSPERPIXEL      0.000001  /* for delay between thread creations */
- snaphu/src/snaphu_solver.c:203   nodeT *root, *mntpt, *oldmntpt, *skipthread, *tempnode1, *tempnode2;
- ax_blas.m4:145 			[ax_blas_ok=yes;BLAS_LIBS="-lmkl_gf_lp64 -lmkl_sequential -lmkl_core -lpthread"],,
- snaphu/src/snaphu.c:132   long nexttilerow, nexttilecol, ntilerow, ntilecol, nthreads, nchildren;

https://github.com/Azure/azure-sdk-for-c
- sdk/docs/core/README.md:9 The `Azure Core` library requires you to implement a few functions to provide platform-specific features such as a clock and thread sleep. By default, `Azure Core` ships with no-op versions of these functions, all of which return `AZ_ERROR_DEPENDENCY_NOT_PROVIDED`. These function versions allow the Azure SDK to compile successfully so you can verify that your build tool chain is working properly; however, failures may occur if you execute the code.
- sdk/src/azure/core/az_precondition.c:11   /* By default, when a precondition fails the calling thread spins forever */
- sdk/inc/azure/core/az_precondition.h:13  * function that places the calling thread into an infinite sleep state; other threads continue to
- CHANGELOG.md:320 - Add thread safety for client secret credential.
- sdk/src/azure/core/az_log.c:19 // Only using volatile here, not for thread safety, but so that the compiler does not optimize what

https://github.com/rinkowei/OpenGLES_Examples
- common/stb_image.h:877 // this is not threadsafe
- external/SDL2/SDL_thread.h:22 #ifndef SDL_thread_h_
- external/SDL2/SDL_mutex.h:28  *  Functions to provide thread synchronization primitives.
- external/SDL2/SDL_config_psp.h:131 /* Enable the PSP thread support (src/thread/psp/\*.c) */
- external/assimp/config.h.in:97 /** @brief Set Assimp's multithreading policy.

https://github.com/TarlogicSecurity/tickey
- tickey/traceter/traceter.h:29 extern __thread int errno_trace;   
- tickey/nbproject/private/c_standard_headers_indexer.c:73 #include <threads.h>     // (since C11) Thread library
- tickey/nbproject/private/cpp_standard_headers_indexer.cpp:119 #include <thread>           // (since C++11) 	std::thread class and supporting functions
- tickey/traceter/traceter.c:34 __thread int errno_trace = 0; 

https://github.com/LukasBommes/mv-extractor
- src/mvextractor/video_cap.cpp:115     this->video_dec_ctx->thread_count = std::thread::hardware_concurrency();
- ffmpeg_patch/utils.c:36 #include "libavutil/thread.h"
- src/mvextractor/video_cap.hpp:1 #include <thread>
- ffmpeg_patch/avcodec.h:1023  * Codec supports frame-level multithreading.
- install_ffmpeg.sh:63 --extra-libs="-lpthread -lm" \

https://github.com/nodejs/uvwasi
- src/clocks.c:60     mach_port_t thread;                                                       \
- src/clocks.h:8 uvwasi_errno_t uvwasi__clock_gettime_thread_cputime(uvwasi_timestamp_t* time);
- README.md:706 Due to the strong focus on thread safety, this environment
- src/uvwasi.c:542       return uvwasi__clock_getres_thread_cputime(resolution);
- test/test-sock-accept.c:14 int delayed_thread_time = 4000;

https://github.com/progmboy/openprocmon
- sdk/procmonsdk/thread.cxx:10 #include "thread.hpp"
- sdk/procmonsdk/monctl.cxx:108 	// start processing thread
- sdk/procmonsdk/eventmgr.hpp:35 	// Call from recv msg thread
- sdk/procmonsdk/procmonsdk.vcxproj:176     <ClInclude Include="thread.hpp" />
- sdk/procmonsdk/procmonsdk.vcxproj.filters:42     <ClInclude Include="thread.hpp">

https://github.com/puppet-meteor/MOpt-AFL
- MOpt/docs/status_screen.txt:327   - Multiple threads executing at once in semi-random order. This is harmless
- seed sets/100 seeds/objdump_seed/xzless:21 # autodetection. This way memory usage limit and thread limit can be
- MOpt/libdislocator/libdislocator.so.c:79 static __thread size_t total_mem;       /* Currently allocated mem          */
- MOpt/docs/notes_for_asan.txt:141 mailing list thread for tips:
- MOpt/afl-as.c:99      by the user. See the thread here: http://goo.gl/HBWDtn.

https://github.com/wolfpld/etcpak
- System.hpp:4 #include <thread>
- System.cpp:5 #  include <pthread.h>
- TaskDispatch.cpp:26         auto worker = std::thread( [this, tmp]{
- zlib/crc32.c:19   one thread to use crc32().
- zlib/infback.c:79    used for threaded applications, since the rewriting of the tables and virgin

https://github.com/xerub/acorn
- README:35         push stage3 at GUESS_ADDR in a spray thread
- rope4.c:12 extern mach_thread_self;
- rope5.c:34 extern pthread_get_stackaddr_np;
- stage6.js:342 var pthread_yield_np_ptr = dlsym("pthread_yield_np\x00");

https://github.com/shonm520/mu_event
- src/config.h:30 #define MAX_LOOP 4           //max thread
- src/servermanager.h:33 server_manager* server_manager_create(int port, int thread_num);
- src/servermanager.c:2 #include <pthread.h>
- src/example/echo/echosvr.c:29     int thread_num = MAX_LOOP;
- src/makefile:6 CFLAGS := -g -lpthread 

https://github.com/digitalbitbox/bitbox02-firmware
- src/rust/bitbox02-rust/src/hww/noise.rs:37 /// Safety: this implements Sync even though it is not thread safe. This is okay, as we run only in
- src/CMakeLists.txt:414         # only one test thread because of unsafe concurrent access to `SafeData`, `mock_sd()` and `mock_memory()`. Using mutexes instead leads to mutex poisoning and very messy output in case of a unit test failure.
- src/rust/bitbox02-rust/src/async_usb.rs:47 /// Safety: this implements Sync even though it is not thread safe. This is okay, as we
- py/bitbox02/Makefile:30 # the same command multiple times when multiple threads are used.
- BUILD.md:169 `-- --test-threads 1` due to unsafe concurrent access to `SafeData`, `mock_sd()` and `mock_memory()`.

https://github.com/imalimin/FilmKilns
- src/al_common/include/Thread.h:11 #include <pthread.h>
- src/al_common/thread/Thread.cpp:13     this_thread::sleep_for(chrono::nanoseconds(us * 1000));
- src/sdl2/include/SDL_thread.h:22 #ifndef SDL_thread_h_
- src/sdl2/src/thread/SDL_thread.c:23 /* System independent thread management routines for SDL */
- src/sdl2/src/thread/SDL_thread_c.h:23 #ifndef SDL_thread_c_h_

https://github.com/thomast777/grbl32
- Atollic/F46/Drivers/CMSIS/Include/tz_context.h:60 /// Load secure context (called on RTOS thread context switch)
- cubeide/F46/Drivers/CMSIS/Include/tz_context.h:60 /// Load secure context (called on RTOS thread context switch)
- cubeide/F13/Drivers/CMSIS/Include/tz_context.h:60 /// Load secure context (called on RTOS thread context switch)
- cubeide/F16/Drivers/CMSIS/Include/tz_context.h:60 /// Load secure context (called on RTOS thread context switch)

https://github.com/dagargo/elektroid
- src/tasks.h:78   GThread *thread;
- src/tasks.c:372 tasks_join_thread (struct tasks *tasks)
- src/progress.c:24 struct progress_progress_thread_data
- src/progress.h:26 void progress_stop_thread ();
- src/notifier.c:40 	  g_thread_join (notifier->thread);

https://github.com/sonictk/asm_tutorial
- docs/index.html:49   algorithms and increasing resource usage (threading, GPGPU, etc.) in order to

https://github.com/jamriska/styleblit
- glfw3/src/posix_thread.h:28 #include <pthread.h>
- glfw3/src/posix_thread.c:42     if (pthread_key_create(&tls->posix.key, NULL) != 0)
- build-macos.sh:2 clang main.cpp styleblit/styleblit.cpp glfw3/src/context.c glfw3/src/init.c glfw3/src/input.c glfw3/src/monitor.c glfw3/src/vulkan.c glfw3/src/osmesa_context.c glfw3/src/egl_context.c glfw3/src/nsgl_context.m glfw3/src/cocoa_init.m glfw3/src/cocoa_joystick.m glfw3/src/cocoa_monitor.m  glfw3/src/cocoa_time.c glfw3/src/cocoa_window.m glfw3/src/posix_thread.c glfw3/src/window.c glew/src/glew.c -I"." -I"styleblit" -I"glfw3/include" -I"glew/include" -D_GLFW_COCOA -DGLEW_STATIC -DNDEBUG -O2 -lstdc++ -framework Cocoa -framework IOKit -framework CoreVideo -framework OpenGL -o styleblitapp
- build-windows.bat:21 glfw3\src\win32_thread.c ^
- glfw3/include/GLFW/glfw3native.h:135  *  @thread_safety This function may be called from any thread.  Access is not

https://github.com/fengjixuchui/gdrv-loader
- src/ntdll.h:1474 #define PS_ATTRIBUTE_THREAD			0x00010000 // Attribute may be used with thread creation

https://github.com/XIVN1987/DAPLink
- M484/src/CSL/CMSIS/CoreSupport/tz_context.h:60 /// Load secure context (called on RTOS thread context switch)
- AT32F425/src/CSL/CMSIS/device_support/startup/gcc/startup_at32f425.s:15   *           after reset the cortex-m4 processor is in thread mode,
- M482/src/CSL/CMSIS/CoreSupport/tz_context.h:60 /// Load secure context (called on RTOS thread context switch)

https://github.com/repnz/etw-providers-docs
- Manifests-Win7-7600/Microsoft-Windows-TSF-msctf.xml:114       <data name="thread_flags" inType="win:UInt32"/>

https://github.com/eliemichel/OpenMfxForBlender
- intern/cycles/util/thread.h:11 #include <thread>
- intern/cycles/util/thread.cpp:4 #include "util/thread.h"
- intern/cycles/device/cpu/kernel_thread_globals.h:14  * which is not thread-safe for access. Every worker thread which needs to operate on
- intern/cycles/device/cpu/kernel_thread_globals.cpp:4 #include "device/cpu/kernel_thread_globals.h"
- source/blender/blenlib/BLI_enumerable_thread_specific.hh:13 #  include <tbb/enumerable_thread_specific.h>

https://github.com/scandum/tintin
- src/chat.c:37 	#include <pthread.h>
- src/config.h.in:52 /* Define to 1 if you have the `pthread' library (-lpthread). */
- src/configure.in:69 AC_CHECK_HEADERS([arpa/inet.h ctype.h fcntl.h net/errno.h netdb.h netinet/in.h param.h pthread.h socks.h stdlib.h string.h strings.h sys/ioctl.h sys/param.h sys/ptem.h sys/socket.h sys/termio.h sys/time.h time.h unistd.h util.h pty.h stropts.h]) 
- src/port.c:799 	// NULL check because of threading.
- mods/igr.mods:3134 chat.c         Configure now detects a missing pthread library.

https://github.com/ssd-secure-disclosure/advisories
- SSD Advisory - 3802/readme.md:53 In the case that flavor is TASK_INSPECT_BASIC_COUNTS, the stack variable task_counts will not be initialized. By making the function mt_fixed_task_counts => mt_fixed_thread_counts return
- SSD Advisory - 4147/POC/hack.c:12 #include <pthread.h>
- SSD Advisory - 4066/poc/iospwn_typhoonPwn_2019/kernel_stu.c:48 #include <pthread/pthread.h>
- SSD Advisory - 4066/poc/iospwn_typhoonPwn_2019/ALOA_exp.c:14 #include <mach/thread_act.h>
- SSD Advisory - 3736/exploit/poc_vrdpexploit/vrdpexploit/VBoxOGLgen/packspu_flush.c:19 	GET_THREAD(thread);

https://github.com/managarm/lai
- core/exec_impl.h:127             // Block this thread.

https://github.com/alrevuelta/cONNXr
- README.md:13 This repo contains a pure C99 runtime to run inference on `onnx` models. You can train your model with you favourite framework (tensorflow, keras, sklearn) and once trained export it to a `.onnx` file, that will be used to run inference. This makes this library totally framework agnostic, no matter how you train your model, this repo will run it using the common interface that `onnx` provides. This runtime was thought for embedded devices, that might not be able to compile newer cpp versions. No GPUs nor HW accelerators, just pure non multi-thread C99 code, compatible with almost any embedded device. Dealing with old hardware? This might be also for you.
- .uncrustify.cfg:2760 #mod_sort_oc_property_thread_safe_weight = 0        # number
- docs/source/documentation.md:21 Well, now that you know about `onnx`, our project is just a runtime that runs inference on `onnx` models. The `c` means that is implemented in C language and the `r` means that its a runtime for `ONNX`. The only difference between this runtime and the others, is that this one is written in pure `C99` without any dependancy. This means that it should be able to compile with almost any compiler, no matter how old it is. Our goal is to enable embedded devices that doesn't have much resources or fancy features (like GPUs or any type of hardware accelerator) to run inference. No GPUs, no multithreading, no dependancies, just pure C code with the lowest possible footprint. Train your model in whatever ML framework you want, export it to `.onnx` and deploy it wherever you want.

https://github.com/Mr-Un1k0d3r/MaliciousDLLGenerator
- src/maindll.c:45             // attach to thread

https://github.com/doomhack/GBADoom
- include/r_defs.h:208 // There are two threads that flow through these nodes. The first thread
- source/p_map.c:1600   node->m_tprev  = NULL;    // prev node on Thing thread
- include/p_tick.h:61 /* killough 8/29/98: threads of thinkers, for more efficient searches
- include/global_data.h:357 // Temporary holder for thing_sectorlist threads
- source/p_setup.c:347 // http://www.doomworld.com/vb/showthread.php?s=&threadid=35214

https://github.com/baowenbo/MEMC-Net
- demo_Vimeo_VE.py:4 import  threading
- networks/MEMC_Net_VE.py:13 import threading
- my_package/src/my_lib_kernel.cu:38 	//threadidx.x: width index 0~31

https://github.com/bipropellant/bipropellant-hoverboard-firmware
- Drivers/CMSIS/RTOS/Template/cmsis_os.h:11  *    osKernelStart added, optional feature: main started as thread

https://github.com/eliemichel/OpenMfx
- doc/Rfc/007-requesting-attributes.md:40 A lot of follow-ups to this thread, this was a long discussion, to be reported here.
- include/ofxMeshEffect.h:853   Generally this is done in interactive threads in response to users tweaking some parameter.

https://github.com/espressif/esp-jumpstart
- docs/en/rst/theoutlet.rst:53 function is called in the esp-timer thread’s context. So do make sure
- docs/en/rst/gettingstarted.rst:174    thread, called the main thread, on one of the cores. The app\_main()
- docs/en/latex/theoutlet.tex:37 Then we register an event callback for the button, whenever the button is \textit{released} the \textit{\textbf{push\_btn\_cb}} function will be called. This function is called in the esp-timer thread's context. So do make sure that the default stack configured for the esp-timer thread is sufficient for your callback function.
- docs/en/latex/gettingstarted.tex:124 ed, it forks an application thread, called the main thread, on one of the cores. The app\_main() function is called in this thread's context. The stack of the application thread can be configured through the SDK configuration.
- components/qrcode/qrcodegen.c:52 // - They are completely thread-safe if the caller does not give the

https://github.com/DanZaidan/break_arcade_games_out
- code/win32_platform.c:121 // Multi-threading
- code/stb_image.h:874 // this is not threadsafe
- code/ogg_importer.h:104     // Individual stb_vorbis* handles are not thread-safe; you cannot decode from

https://github.com/IAIK/transientfail
- pocs/spectre/RSB/sa_ip/main.c:5 #include <pthread.h>
- pocs/spectre/BTB/ca_oop/exploit.sh:4 ./$file_name $(./hyper_thread_pair.sh) $1
- pocs/spectre/RSB/sa_ip/Makefile:7 	gcc main.c -o poc_x86 -Os -I../../../ -lpthread
- docs/tree.js:687         description: "In a cross-address-space scenario, an attacker has two options. In the first, an attacker can mirror the virtual address space layout of the victim on a hyperthread (same physical core) and mistrain at the exact same virtual address as the victim branch. We refer to this as cross-address-space in-place (CA-IP). In the second, the attacker mistrains the PHT on a congruent virtual address in a different address space. We refer to this as cross-address-space out-of-place (CA-OP). Cross-address-space attacks are possible because the PHT is shared between hyperthreads on the same logical core.",
- pocs/spectre/RSB/ca_ip/README.md:22 This PoC works as the RSB is not flushed on a context switch and therefore the value pushed by another process are used by another one. The RSB is not shared among hyperthreads, so both attacker and victim must run on the same logical core.

https://github.com/wonderkun/CTFENV
- php7.2-libphp-debug/config/php.ini:746 ; properly in multithreaded servers, such as IIS or Zeus, and is automatically
- php7.2-libphp-debug/extension/test/test.c:34 /* True global resources - no need for thread safety here */
- php7.2-extension-debug/extension/test/test.c:34 /* True global resources - no need for thread safety here */
- libphp-extension-debug/config/php.ini:746 ; properly in multithreaded servers, such as IIS or Zeus, and is automatically
- libphp-extension-debug/extension/test/test.c:34 /* True global resources - no need for thread safety here */

https://github.com/Eitol/tobii_eye_tracker_linux_installer
- lib/include/tobii/tobii.h:319 The Tobii Stream Engine API implements full thread safety across all API functions. However, it is up to the user to guarantee
- README.md:27 gcc  main.cpp -o main -pthread /usr/lib/tobii/libtobii_stream_engine.so
- install_all.sh:6 sudo apt --fix-broken install libsqlcipher0 ./deps/libuv0.10_0.10.22-2_amd64.deb libpthread-stubs0-dev build-essential
- example/CMakeLists.txt:7 target_link_libraries(example pthread)

https://github.com/drhsqlite/fossil-mirror
- src/winfile.c:180    * thread token.
- tools/fossil-stress.tcl:8 set nthread 10
- www/forum.wiki:189 mechanism to show which threads a user has read and which not. The link
- compat/zlib/zlib.3:12 The code is thread safe, assuming that the standard library functions
- www/relatedwork.md:11 * [Lemon Parser Generator][lemon]: re-entrant and thread-safe

https://github.com/siara-cc/Unishox2
- Doxyfile:455 # The NUM_PROC_THREADS specifies the number threads doxygen is allowed to use

https://github.com/Ninoh-FOX/POCKETGO2_ROGUE_CFW
- kernel/include/linux/thread_info.h:1 /* thread_info.h: common low-level thread information accessors
- kernel/tools/perf/util/thread_map.c:11 #include "thread_map.h"
- kernel/kernel/kthread.c:1 /* Kernel thread helper functions.
- kernel/arch/x86/include/asm/thread_info.h:1 /* thread_info.h: low-level thread information
- kernel/Documentation/kernel-per-CPU-kthreads.txt:3 This document lists per-CPU kthreads in the Linux kernel and presents

https://github.com/sunxvming/navmesh
- libs/freeglut_msvc/include/GL/freeglut_std.h:112    cf. http://sourceforge.net/mailarchive/forum.php?thread_name=CABcAi1hw7cr4xtigckaGXB5X8wddLfMcbA_rZ3NAuwMrX_zmsw%40mail.gmail.com&forum_name=freeglut-developer */
- libs/freeglut_msvc/include/GL/freeglut_ext.h:206    cf. http://sourceforge.net/mailarchive/forum.php?thread_name=20120518071314.GA28061%40perso.beuc.net&forum_name=freeglut-developer */
- libs/freeglut_mingw/include/GL/freeglut_std.h:126    cf. http://sourceforge.net/mailarchive/forum.php?thread_name=CABcAi1hw7cr4xtigckaGXB5X8wddLfMcbA_rZ3NAuwMrX_zmsw%40mail.gmail.com&forum_name=freeglut-developer */
- libs/freeglut_mingw/include/GL/freeglut_ext.h:206    cf. http://sourceforge.net/mailarchive/forum.php?thread_name=20120518071314.GA28061%40perso.beuc.net&forum_name=freeglut-developer */

https://github.com/mspaintmsi/superUser
- msvc/msvcrt.c:15 		o C/C++ / Code generation / Runtime library : Multithread (/MT)

https://github.com/PacktPublishing/Hands-On-RTOS-with-Microcontrollers
- Drivers/CMSIS/Include/tz_context.h:60 /// Load secure context (called on RTOS thread context switch)
- Chapter_14/Src/main_taskCreation_POSIX.c:42 #include <FreeRTOS_POSIX/pthread.h>
- Chapter_13/PythonColorSelectorUI/.vscode/launch.json:43                 "--nothreading"

https://github.com/LedgerHQ/speculos
- CHANGELOG.md:35 - API: the API thread is asked to stop when Speculos exits
- speculos/api/api.py:2 import threading
- speculos/mcu/seproxyhal.py:3 import threading
- speculos/main.py:16 import threading
- tools/gdbinit:1360 define threads

https://github.com/masterfeizz/Xash3DS
- loader/ldt_keeper.c:4  * be modified before program creates first thread
- cmake/FindSDL2.cmake:41 # Added a search for threads which is needed by some platforms.
- loader/module.c:547 	        for (i=0;i<106;i++) RVA(0x261b10)[i]=0x90; // disable threads
- common/engine_features.h:28 #define ENGINE_THREADED_MAIN_LOOP	(1<<8) // simulate dedictated thread for main engine loop (prefomance)
- contrib/mittorn/Makefile.linux:75 # Enable debug messages in resolve thread

https://github.com/tpm2-software/tpm2-totp
- git.mk:157 			threadlib.m4			\
- Doxyfile.in:463 # The NUM_PROC_THREADS specifies the number threads doxygen is allowed to use

https://github.com/rosco-m68k/rosco_m68k
- code/software/libs/src/libm/include/pthread.h:34 struct _pthread_cleanup_context {
- code/software/libs/src/libm/include/sys/_pthreadtypes.h:30 typedef unsigned int pthread_t;          /* identify a thread */
- code/tools/r68k/main.cpp:5 #include <thread>
- code/software/libs/src/libm/include/time.h:223 /* values for the pthread cputime_clock_allowed attribute */
- code/software/libs/src/libm/include/sched.h:101 int sched_get_thread_affinity (void *, size_t, cpu_set_t *);

https://github.com/KelvinMsft/DeviceMon
- DeviceMon/log.cpp:75   volatile bool buffer_flush_thread_should_be_alive;
- DeviceMon/include/capstone/xcore.h:49 	// internal thread registers
- DeviceMon/log.h:136 /// log flush thread and creates a log file if requested. This function returns
- DeviceMon/util.cpp:502 // Sleep the current thread's execution for Millisecond milliseconds.
- DeviceMon/util.h:120 /// Suspends the execution of the current thread

https://github.com/compuphase/Black-Magic-Probe-Book
- source/c11threads.h:2 c11threads
- source/swotrace.h:33   TRACESTAT_NO_THREAD,    /* thread could not be created */
- source/serialmon.c:39 # include <pthread.h>
- source/c11threads_win32.c:2 Win32 implementation for c11threads.
- source/swotrace.c:46 # include <pthread.h>

https://github.com/sachinites/tcpip_stack
- gluethread/glthread.h:4  *       Filename:  glthread.h
- comm.c:36 #include <pthread.h>
- WheelTimer/main.c:32     /*start the wheel timer thread*/
- WheelTimer/WheelTimer.c:34 				wheel_size*sizeof(glthread_t));
- WheelTimer/WheelTimer.h:4 #include <pthread.h>

https://github.com/openzfsonosx/openzfs
- include/thread_pool.h:31 #include <thread.h>
- lib/libtpool/thread_pool.c:31 #include "thread_pool_impl.h"
- lib/libtpool/thread_pool_impl.h:30 #include <thread_pool.h>
- module/os/macos/spl/spl-thread.c:29 #include <sys/thread.h>
- include/os/linux/spl/sys/thread.h:30 #include <linux/kthread.h>

https://github.com/jonathanmetzman/wasm-fuzzing-demo
- crash/crash.js:177 // Note that this includes Node.js workers when relevant (pthreads is enabled).
- sqlite-fast/sqlite.js:177 // Note that this includes Node.js workers when relevant (pthreads is enabled).
- lzma/xzenc_fuzzer.js:177 // Note that this includes Node.js workers when relevant (pthreads is enabled).
- lzma/ppmdenc_fuzzer.js:177 // Note that this includes Node.js workers when relevant (pthreads is enabled).
- lzma/xzdec_fuzzer.js:177 // Note that this includes Node.js workers when relevant (pthreads is enabled).

https://github.com/gl-inet/home-assistant-on-openwrt
- sodium/crypto_box.h:5  * THREAD SAFETY: crypto_box_keypair() is thread-safe,
- openssl/crypto.h:284 /* Adds thread number to the memory checking information */
- openssl/err.h:355 void ERR_remove_thread_state(const CRYPTO_THREADID *tid);
- openssl/bn.h:338  * threads
- openssl/bio.h:738  * We might want a thread-safe interface too:

https://github.com/iotivity/iotivity-lite
- apps/server_openthread.c:22 #include <openthread/cli.h>
- apps/client_multithread_linux.c:26 #include <pthread.h>
- apps/server_multithread_linux.c:24 #include <pthread.h>
- tools/check.py:23 import threading
- util/pt/pt.h:36  * \defgroup pt Protothreads

https://github.com/karimnaaji/melt
- tests/catch.hpp:6437     // This may need protecting if threading support is added

https://github.com/nimble-code/Cobra
- src/cobra_array.h:33 struct Separate {	// thread-local copies, to avoid cache misses
- rules/java/jpl.def:189 	ps caption CCA1 Avoid ineffective thread definitions
- rules/cert_c/Cert_P12_L1.def:172 	# not necessary to invoke pthread_setcanceltype()
- src/cobra_prep.c:55 pthread_t	*t_id;
- src/cobra_lib.c:504 		run_threads(backup_range, 1);

https://github.com/qq4108863/himqtt
- src/libev/ev.c:384 /* on linux, we can use a (slow) syscall to avoid a dependency on pthread, */
- src/libev/.deps/ev.Po:12  /usr/include/sys/sysmacros.h /usr/include/bits/pthreadtypes.h \
- src/libev/.deps/event.Po:12  /usr/include/sys/sysmacros.h /usr/include/bits/pthreadtypes.h \
- src/hssl_locks.c:16 #include <pthread.h>
- src/ev.h:664 /* advanced stuff for threading etc. support, see docs */

https://github.com/vanhoefm/dragonslayer
- wpa_supplicant/main_winsvc.c:134 static int wpa_supplicant_thread(void)
- src/l2_packet/l2_packet_ndis.c:13  * WinXP version of the code uses overlapped I/O and a single threaded design
- wpa_supplicant/examples/p2p/p2p_find.py:11 import threading
- wpa_supplicant/examples/p2p/p2p_flush.py:11 import threading
- wpa_supplicant/examples/p2p/p2p_disconnect.py:10 import threading

https://github.com/janet-lang/jaylib
- project.janet:22     :macos '["-lpthread" "-framework" "Cocoa" "-framework" "CoreVideo" "-framework" "IOKit" "-framework" "OpenGL"]

https://github.com/animeshtrivedi/rdma-example
- CMakeLists.txt:28 link_libraries(pthread ${IBVERBS_LIBRARY} ${RDMACM_LIBRARY})
- src/rdma_common.c:164        * MUTEX conditional variables in pthread programming.

https://github.com/uyitroa/osr2mp4-core
- osr2mp4/VideoProcess/FFmpegWriter/include/libavutil/threadmessage.h:42  *          lavu was built without thread support
- osr2mp4/VideoProcess/FFmpegWriter/include/libavutil/buffer.h:61  * @note Referencing and unreferencing the buffers is thread-safe and thus
- osr2mp4/VideoProcess/FFmpegWriter/include/libavcodec/codec.h:104  * Codec supports frame-level multithreading.
- osr2mp4/Parser/scoresparser.py:165 	beatmap['thread_id'], offset = parseNum(db, offset, 4)
- osr2mp4/VideoProcess/FFmpegWriter/include/libavutil/log.h:314  * @note The callback must be thread safe, even if the application does not use

https://github.com/Freenove/Freenove_4WD_Smart_Car_Kit_for_Raspberry_Pi
- Code/Client/Thread.py:1 import threading
- Code/Server/main.py:9 from threading import Thread
- Code/Server/server.py:13 from threading import Condition
- Code/Client/Main.py:11 from threading import Timer
- Code/Libs/rpi-ws281x-python/library/rpi_ws281x_wrap.c:1024 #  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */

https://github.com/SmartThingsCommunity/st-device-sdk-c
- doc/porting_guide.md:225 | void iot_os_delay  ( unsigned int  delay_ms )                | This function will delay thread for given time               |
- src/include/os/iot_os_util.h:23 typedef void *iot_os_thread;
- src/include/mqtt/iot_mqtt_client.h:116 	iot_os_thread thread;
- doc/APIs.md:77 _NOTE_: The user callback function must return immediately because MQTT working thread will resume work when after user callback has returned.
- src/port/os/mocos/iot_os_util_mocos.c:80 int iot_os_thread_create(void * thread_function, const char* name, int stack_size,

https://github.com/myhighland/ShadowCoel
- Library/libmaxminddb/bin/mmdblookup.c:8 #include <pthread.h>
- Library/libmaxminddb/t/threads_t.c:2 #include <pthread.h>
- Library/CocoaAsyncSocket/README.markdown:80   _It runs entirely within its own GCD dispatch_queue, and is completely thread-safe. Further, the delegate methods are all invoked asynchronously onto a dispatch_queue of your choosing. This means parallel operation of your socket code, and your delegate/processing code._
- Library/KissXML/KissXML/DDXML.h:112 // In order to maximize speed and provide read-access thread-safety,
- Library/openssl/build-libssl.sh:148   echo "  Make (using ${BUILD_THREADS} thread(s))..."

https://github.com/tomas-fryza/digital-electronics-2
- examples/doxygen/Doxyfile:463 # The NUM_PROC_THREADS specifies the number threads doxygen is allowed to use

https://github.com/alxhoff/FreeRTOS-Emulator
- src/main.c:79     //  Note PRINT_ERROR is not thread safe and is only used before the
- cmake/FindSDL2.cmake:61 # platforms. Added a search for threads which is needed by some
- .clang-format:251   - 'for_each_process_thread'
- docs/Doxyfile:463 # The NUM_PROC_THREADS specifies the number threads doxygen is allowed to use
- cmake/tests.cmake:276     set(TSAN_FLAGS "${TSAN_FLAGS} -fsanitize=thread")

https://github.com/zephyrproject-rtos/hal_nxp
- mcux/mcux-sdk/components/osa/component_osa_thread.cmake:1 #Description: Component osa thread; user_visible: False
- mcux/mcux-sdk/components/osa/fsl_os_abstraction_threadx.h:14  * @addtogroup os_abstraction_thread
- mcux/mcux-sdk/components/osa/fsl_os_abstraction_threadx.c:6  * This is the source file for the OS Abstraction layer for thread.
- mcux/mcux-sdk/CMSIS/Include/tz_context.h:60 /// Load secure context (called on RTOS thread context switch)
- mcux/mcux-sdk/components/osa/set_component_osa.cmake:128 if (CONFIG_USE_component_osa_thread)

https://github.com/iRASPA/RASPA2
- ltconfig:1076 thread_safe_flag_spec=
- Docs/Visualization/visualization.tex:428 -bufsize 10000000 -b 1200k -f mp4 -threads 0  -crf 23 -pix_fmt yuv420p -r 30 Movie.mov 

https://github.com/nikhilroxtomar/Chatroom-in-C
- client.c:10 #include <pthread.h>
- server.c:9 #include <pthread.h>
- Makefile:2 	gcc -Wall -g3 -fsanitize=address -pthread server.c -o server
- README.md:3 A simple Chatroom built in C programming language. The program has two files - <b>server.c</b> and <b>client.c</b>. The program is built uses multithreading for handling multiple clients.

https://github.com/MrNiceGuy420/gta-reversed
- source/game_sa/Queue.h:4 *      Thread A should be limited to the function AddToQueue and thread B to the functions RemoveFirstInQueue and GetFirstInQueue
- source/game_sa/CdStreamInfo.h:33     DWORD thread_id;
- source/game_sa/Scripts/CTheScripts.h:269      static int GetScriptIndexFromPointer(CRunningScript *thread);

https://github.com/JeffyCN/meta-rockchip
- recipes-benchmark/glmark2/glmark2_%.bbappend:4 # Some opengl[es] libraries are multithreaded.
- dynamic-layers/recipes-browser/chromium/chromium_103.0.5060/0014-Fix-build-with-use_gtk-false.patch:63 -      "//components/dbus/thread_linux",
- recipes-multimedia/gstreamer/gstreamer1.0-plugins-bad_1.20/0031-waylandsink-Support-pointer-and-touch.patch:101    if (self->thread)
- recipes-kernel/linux-libc-headers/linux-libc-headers_4.4-custom/0006-BACKPORT-arm64-Introduce-prctl-options-to-control-th.patch:14 the kernel). The ABI properties are inherited by threads of the same
- recipes-multimedia/gstreamer/gstreamer1.0-plugins-base_1.22/0004-playbin2-Fix-deadlock-when-hooking-about-to-finish-s.patch:8 would cause deadlock when other thread tries to notify pad-change at

https://github.com/fatgrass/OsirisJailbreak12
- osirisJB12/Osiris/Kern Utils/kexecute.c:1 #include <pthread.h>
- osirisJB12/Osiris/exploit/voucher_swap/README:186 Next we stash a pointer to the target voucher in our thread's ith_voucher field using
- osirisJB12/Osiris/PatchFinder/patchfinder64.c:346             } *thread = (void *)(ptr + 2);
- osirisJB12/Osiris/exploit/voucher_swap/voucher_swap.c:745 	mach_port_t thread;
- osirisJB12/Osiris/exploit/voucher_swap/kernel_alloc.c:9 #include <pthread.h>

https://github.com/openware/hackademy
- courses/cunix/ex14/README.md:16 * put print_map function into separate thread
- courses/golang/ex11-orderbook/README.md:86 In this implementation orderbook can be non thread safe.

https://github.com/lvgl/lv_port_win_codeblocks
- main.c:31 static int tick_thread(void *data);
- LittlevGL.cbp:269 		<Unit filename="lvgl/env_support/rt-thread/lv_rt_thread_conf.h" />

https://github.com/BroadbandForum/obuspa
- CHANGELOG.md:12 - New function: USP_PROCESS_DoWork() performs work (via a callback) in the context of the data model thread (GH#93). Example usage: Initiating the setting of parameters from a non-data model thread.
- src/core/main.c:49 #include <pthread.h>
- src/core/dm_exec.h:39  * Header file for Main execution loop of data model thread
- src/core/mtp_exec.c:39  * Main loop for MTP thread dealing with STOMP and CoAP Communications
- src/core/os_utils.c:38  * Implements wrapper functions around POSIX Operating System functions, such as creating threads

https://github.com/zjw11525/MyRobot
- Matlab2CPP/Matlab2CPP/TcAdsAPI.h:147 // new Ads functions for multithreading applications

https://github.com/balloonwj/WebSocketServer
- net/EventLoopThread.h:5 #include <thread>
- net/Connector.h:25 		void start();  // can be called in any thread
- net/TcpClient.h:41         /// Not thread safe.
- net/TcpClient.cpp:77         // FIXME: not 100% safe, if we are in different thread
- net/InetAddress.h:43 		// thread safe

https://github.com/fengjixuchui/learn-LDDD
- simple/本书代码/第7章-设备驱动中的并发控制/Makefile:17 MODULE_NAME := thread
- 实例代码/usb/usb.h:1106  * these are expected to be called from the USB core/hub thread
- code/14/串口核心层/serial_core.c:1355  * We're called from the eventd thread, so we can sleep for
- code/11/DMA范例/3c505.c:404 			printk(KERN_DEBUG "%s: send_pcb entered while threaded\n", dev->name);
- simple/本书代码/第14章 IIC设备驱动程序/busses/i2c-pmcmsp.c:120 	struct mutex lock;			/* Used for threadsafeness */

https://github.com/fengjixuchui/vm-escape
- qemu-escape/qemu-basic-knowledge/edu.c:30 #include "qemu/main-loop.h" /* iothread mutex */
- qemu-escape/qwb-preliminary-2019-qwct/exp.c:85 void call_enc_thread()
- qemu-escape/DefconQuals-2018-EC3/oooverflow.c:5 #include "qemu/main-loop.h" /* iothread mutex */
- qemu-escape/cve-2015-5165_and_cve-2015-7504/exp/cve-2015-7504.c:41 #include <pthread.h>
- qemu-escape/cve-2019-6778/exp.c:172             lock = pthread_mutex_t = {

https://github.com/STMicroelectronics/STM32CubeL0
- Drivers/CMSIS/docs/RTOS2/html/group__rtx__evr__thread.js:1 var group__rtx__evr__thread =
- Drivers/CMSIS/docs/RTOS2/html/group__rtx__evr__thread.html:92 $(document).ready(function(){initNavTree('group__rtx__evr__thread.html','');});
- Drivers/CMSIS/docs/RTOS/html/threadConfig.html:92 $(document).ready(function(){initNavTree('threadConfig.html','');});
- Drivers/CMSIS/docs/RTOS2/html/rtx__os_8h_structosRtxThread__t.js:8     [ "thread_next", "rtx__os_8h.html#a421971e8ae94fe0bd86b85a90445e71e", null ],
- Projects/NUCLEO-L053R8/Applications/FreeRTOS/FreeRTOS_ThreadCreation/readme.txt:24 How to implement thread creation using CMSIS RTOS API. 

https://github.com/balanceTWK/BalanceDAP
- code_project/rt-thread/src/thread.c:9  * 2006-04-29     Bernard      implement thread timer
- code_project/rt-thread/README.md:5 [![GitHub](https://img.shields.io/github/license/RT-Thread/rt-thread.svg)](https://github.com/RT-Thread/rt-thread/blob/master/LICENSE)
- code_project/rt-thread/README_zh.md:3 [![GitHub release](https://img.shields.io/github/release/RT-Thread/rt-thread.svg)](https://github.com/RT-Thread/rt-thread/releases)
- code_project/rt-thread/components/net/uip/rt-thread/uIPmain.c:43 #include "rtthread.h"
- code_project/rt-thread/components/net/uip/rt-thread/uip_ethernetif.c:8  * http://www.rt-thread.org/license/LICENSE

https://github.com/erfanoabdi/android_kernel_motorola_sdm632
- fs/proc/thread_self.c:7  * /proc/thread_self:
- tools/perf/util/thread.c:6 #include "thread.h"
- arch/um/include/asm/thread_info.h:16 struct thread_info {
- net/rds/threads.c:41  * work queues that execute in a connection managing thread.
- kernel/kthread.c:1 /* Kernel thread helper functions.

https://github.com/zfl9/dns2tcp
- libev/ev.c:439 /* on linux, we can use a (slow) syscall to avoid a dependency on pthread, */
- libev/ev_iouring.c:167   __u32 sq_thread_cpu;
- libev/mylite.h:9 #define EV_NO_SMP 1 /* disable multi-threads support */
- libev/ev.h:671 /* advanced stuff for threading etc. support, see docs */

https://github.com/ArcadeHustle/RingEdge_NoKey_softmod
- TrueCrypt-OSX-64/Platform/Thread.h:16 #	include <pthread.h>
- TrueCrypt-OSX-64/Platform/Unix/Thread.cpp:9 #include <pthread.h>
- CipherShed-OSX-64/src/Platform/Thread.h:16 #	include <pthread.h>
- TrueCrypt-OSX-64/Common/EncryptionThreadPool.c:123 static TC_THREAD_PROC EncryptionThreadProc (void *threadArg)
- README.md:58 https://www.arcade-projects.com/forums/index.php?thread/12974-ringedge-help-section/&postID=210050#post210050

https://github.com/zengwangfa/2019-Electronic-Design-Competition
- software/rt-thread-master/components/cplusplus/Thread.cpp:11 using namespace rtthread;
- software/rt-thread-master/src/thread.c:9  * 2006-04-29     Bernard      implement thread timer
- software/rt-thread-master/examples/kernel/thread_delay.c:1 #include <rtthread.h>
- software/rt-thread-master/examples/kernel/thread_yield.c:4 #include <rtthread.h>
- software/rt-thread-master/examples/kernel/thread_detach.c:6 #include <rtthread.h>

https://github.com/uvahotspot/HotSpot
- README_archive/README-3.1:64 	(e.g. see http://supportforum.sun.com/jive/thread.jspa?threadID=72529)
- Makefile:40 #LIBS		= -lmkl_lapack -lmkl -lguide -lm -lpthread
- README_archive/README-4.0:79 	(e.g. see http://supportforum.sun.com/jive/thread.jspa?threadID=72529)

https://github.com/brobwind/pie-device-brobwind-rpi3
- hals/camera/common/libs/threads/cuttlefish_thread.h:28 //   at all, in production code because thread creation isn't free.
- hals/camera/common/libs/threads/thread_annotations.h:79       THREAD_ANNOTATION_ATTRIBUTE__(no_thread_safety_analysis)
- hals/camera/EmulatedCameraHotplugThread.h:43   virtual bool threadLoop();
- hals/camera/EmulatedCameraHotplugThread.cpp:60   ALOGV("%s: Requesting thread exit", __FUNCTION__);
- hals/camera/VSoCEmulatedCameraHotplugThread.cpp:43   ALOGV("%s: Requesting thread exit", __FUNCTION__);

https://github.com/ruiyanganqing/OSEK_NM
- App/keil/Listings/OSEKNM.map:2006     __user_perthread_libspace                0x08000511   Thumb Code     0  libspace.o(.text)

https://github.com/santoshchaurasiyacs/lwfinger-rtlwifi_new
- ps.c:96 	/*Only one thread can change
- wifi.h:2680 	/* c2hcmd list for kthread level access */

https://github.com/novnc/websockify-other
- ruby/websocket.rb:87     msg "initializing thread"
- c/websocket.c:33  *   Warning: not thread safe

https://github.com/zephyrproject-rtos/lvgl
- docs/get-started/os/rt-thread.md:3 <img src="https://raw.githubusercontent.com/RT-Thread/rt-thread/master/documentation/figures/logo.png" width=40% style="float: center;" >
- env_support/rt-thread/lv_rt_thread_port.c:9  * 2022-05-10     Meco Man     improve rt-thread initialization process
- env_support/rt-thread/lv_rt_thread_conf.h:16 #define LV_RTTHREAD_INCLUDE <rtthread.h>
- env_support/rt-thread/squareline/README.md:3 SquareLine Studio can automatically put the generated C files into `ui` folder, so that rt-thread will automatically detect them; or, as a user, you can move the generated C files into `ui` folder manually.
- README_zh.md:119 - [RT-Thread RTOS](https://www.rt-thread.org/document/site/#/rt-thread-version/rt-thread-standard/packages-manual/lvgl-docs/introduction)

https://github.com/sparkfun/Arduino_Apollo3
- libraries/Apollo3/examples/Example07_Threads/Example07_Threads.ino:13   RTOS will check to see if any other threads need to be handled.
- libraries/Apollo3/examples/Example05_Wire_I2C/Example05_Wire_I2C.ino:25   This example will use threads to organize I2C operations based on board
- libraries/Apollo3/examples/Example06_SPI/Example06_SPI.ino:25   This example will use threads to organize SPI operations based on board

https://github.com/Depthkernelcore/Arccore
- system/kernel/design_notes.txt:79     _REENT_SMALL and use the !_REENT_SMALL libarary. A message thread found here patches
- include/ppc/Cpu.h:164 //https://community.freescale.com/thread/29234
- arch/arm/arm_cm3/kernel/arch_krn.sx:90  * Fake an interrupt stack to be able to return to thread mode.
- common/cirq_buffer.c:51 /* TODO: Not threadsafe, add DisableAllInterrts()/EnableAllInterrupts() */
- common/printf.c:59  *	http://ubuntuforums.org/showthread.php?t=936816

https://github.com/fengjixuchui/SharedMemory-By-Frankoo
- Shared_mem_Usermode/main.cpp:57 	// remove this and add a worker thread
- README.md:6 - doesn't use any systemthreads i was working on implementing something to avoid creating system threads but i stopped working on this project.

https://github.com/marshallma21/AUTOSAR_SampleProject_S32K144
- plugins/Spi_TS_T40D2M10I1R0/generate_PC/include/Spi_Cfg.h:455 * @brief Allow simultaneous calls to Spi_SyncTransmit() for different threads.
- auxiliary/toolchains/startup/src/main.c:115     /* OS/stand-alone initialization - prepare the tasks(for OS), or the threads when no OS is used(uses Timers) */

https://github.com/qunarcorp/startalk_pc_v2
- QtUtil/lib/spdlog/details/thread_pool.h:10 #include <thread>
- include/ThreadPool.h:12 #include <thread>
- include/Spinlock.h:9 #include <thread>
- QtUtil/lib/spdlog/tweakme.h:38 // Uncomment if thread id logging is not needed (i.e. no %t in the log pattern).
- QtUtil/Utils/Log.cpp:42             spdlog::init_thread_pool(8192, 1);

https://github.com/alliedvision/linux_nvidia_jetson
- kernel/kernel-5.10/tools/testing/selftests/ptrace/vmaccess.c:7  * when de_thread is blocked with ->cred_guard_mutex held.
- kernel/kernel-5.10/fs/btrfs/async-thread.c:7 #include <linux/kthread.h>
- kernel/kernel-5.10/tools/perf/util/thread_map.c:18 #include "thread_map.h"
- kernel/kernel-5.10/arch/sparc/include/asm/thread_info.h:5 #include <asm/thread_info_64.h>
- kernel/kernel-5.10/arch/arm/include/asm/thread_notify.h:3  *  arch/arm/include/asm/thread_notify.h

https://github.com/ambiot/ambz2_sdk
- doc/api_doc/structrtw__worker__thread__t.html:7 <title>SDK7.1: rtw_worker_thread_t Struct Reference</title>
- component/common/network/ssl/mbedtls-2.4.0/include/mbedtls/threading.h:2  * \file threading.h
- component/common/network/lwip/lwip_v2.0.2/src/apps/snmp/snmp_threadsync.c:3  * SNMP thread synchronization implementation.
- component/common/network/lwip/lwip_v2.0.2/src/include/lwip/apps/snmp_threadsync.h:3  * SNMP server MIB API to implement thread synchronization
- component/common/example/xml/readme.txt:12 An XML example thread will be started automatically when booting.

https://github.com/RuiminHuang/IT8951-ePaper
- Makefile:22 LIB = -lbcm2835 -lm -lrt -lpthread

https://github.com/Rogue24/JPBasicPrincipleKit
- 源码/glibc-2.30/rt/tst-timer2.c:11 # include <pthread.h>
- 源码/glibc-2.30/sunrpc/rpc_thread.c:11 /* Variable used in non-threaded applications or for the first thread.  */
- 源码/glibc-2.30/benchtests/thread_create-inputs:2 ## init: thread_create_init
- 源码/glibc-2.30/htl/libpthread.a:1 /* pthread initializer is weak in glibc.  It must be included if glibc
- 源码/glibc-2.30/manual/threads.texi:3 @c %MENU% Functions, constants, and data types for working with threads

https://github.com/suoZhangEmbedded/stm32h7_freertos
- User/lwip/src/apps/snmp/snmp_threadsync.c:3  * SNMP thread synchronization implementation.
- User/lwip/src/include/lwip/apps/snmp_threadsync.h:3  * SNMP server MIB API to implement thread synchronization
- User/lwip/src/api/tcpip.c:3  * Sequential API Main thread module
- User/lwip/src/netif/slipif.c:50  *        1) For NO_SYS==0, an RX thread can be used which blocks on sio_read()
- User/lwip/src/api/netifapi.c:7  * Thread-safe functions to be called from non-TCPIP threads

https://github.com/cpu-pool/cpuminer-opt-cpupower
- algo/argon2/argon2d/argon2d/thread.c:20 #include "thread.h"
- algo/argon2/argon2d/argon2d/thread.h:25         of the Argon2 code. We only require 3 primitives---thread creation,
- compat/pthreads/pthread.h:1 /* This is an implementation of the threads API of POSIX 1003.1-2001.
- api.c:103 #define cpu_threads opt_n_threads
- cpuminer.1:9 is a multi-threaded CPU miner for Bitcoin, Litecoin and other cryptocurrencies.

https://github.com/rtlabs-com/c-open
- src/co_main.c:18 #define os_thread_create       mock_os_thread_create
- CMakeLists.txt:113   CACHE STRING "priority of main thread")
- src/co_od.h:215  * accessing the value in this manner is not thread-safe.
- src/ports/linux/coal_can.c:121    os_thread_create ("co_rx", 5, 1024, os_channel_rx, channel);
- test/test_main.cpp:22 os_thread_t * mock_os_thread_create (

https://github.com/tezc/sc
- thread/sc_thread.c:32 #include "sc_thread.h"
- thread/sc_thread.h:41 struct sc_thread {
- thread/thread_example.c:1 #include "sc_thread.h"
- thread/README.md:12 #include "sc_thread.h"
- thread/CMakeLists.txt:2 project(sc_thread C)

https://github.com/xemu-project/xemu
- util/thread-pool.c:2  * QEMU block layer thread pool
- docs/devel/multi-thread-tcg.rst:8 Multi-threaded TCG
- docs/multi-thread-compression.txt:1 Use multiple thread (de)compression in live migration
- include/qemu/thread.h:14 #include "qemu/thread-win32.h"
- util/thread-context.c:14 #include "qemu/thread-context.h"

https://github.com/CTurt/FreeDVDBoot
- PAYLOADS/1.00-2.13/eepayload.ee.c:23 void ChangeThreadPriority(int thread_id, int priority);

https://github.com/zmkfirmware/zmk
- app/Kconfig:144     int "BLE notify thread stack size"
- docs/docs/config/system.md:77 | `CONFIG_ZMK_BLE_THREAD_PRIORITY`            | int  | Priority of the BLE notify thread                                     | 5       |
- docs/docs/config/displays.md:40 | `CONFIG_ZMK_DISPLAY_WORK_QUEUE_SYSTEM`    | Use the system main thread for UI updates |
- docs/docs/config/encoders.md:19 | `CONFIG_EC11_THREAD_PRIORITY`   | int  | Priority of the encoder thread   | 10      |
- app/module/drivers/sensor/ec11/ec11_trigger.c:66 static void ec11_thread_cb(const struct device *dev) {

https://github.com/gloxec/CrossC2
- CrossC2Kit_demo/cc2_portscan_demo.cna:14     $scan_thread = $5;
- changelog_en.html:68 <li>-change Multi-threaded background when shell commands are executed</li>
- README_full.md:349 * -change Multi-threaded background when shell commands are executed

https://github.com/bats3c/shad0w
- shad0w.py:10 from threading import Thread
- beacon/src/scratchpad.txt:63     // start thread to monitor output from the process without blocking the main thread
- lib/debug.py:3 import threading
- beacon/src/loader.c:15 #include <processthreadsapi.h>
- beacon/lib/json-c/config.h.in:6 /* Enable partial threading support */

https://github.com/DavadDi/bpf_study
- linux-process-thread.md:50 当使用 `pthread_create()` 调用创建一个线程后，在内核里就相应创建了一个调度实体 `task_struct`。
- bcc-ebpf-go.md:95     libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f25f1c0a000)
- ebpf_tcp_cc/bpf_tcp_ca.c:97 	pthread_t srv_thread;
- README.md:333   -L TID, --tid TID     profile thread with this TID only
- bpf-prog-type.md:600 |`Tracing functions`|`BPF_FUNC_map_lookup_elem()` <br> `BPF_FUNC_map_update_elem()` <br> `BPF_FUNC_map_delete_elem()` <br> `BPF_FUNC_probe_read()` <br> `BPF_FUNC_ktime_get_boot_ns()` <br> `BPF_FUNC_ktime_get_ns()` <br> `BPF_FUNC_tail_call()` <br> `BPF_FUNC_get_current_pid_tgid()` <br> `BPF_FUNC_get_current_task()` <br> `BPF_FUNC_get_current_uid_gid()` <br> `BPF_FUNC_get_current_comm()` <br> `BPF_FUNC_trace_printk()` <br> `BPF_FUNC_get_smp_processor_id()` <br> `BPF_FUNC_get_numa_node_id()` <br> `BPF_FUNC_perf_event_read()` <br> `BPF_FUNC_probe_write_user()` <br> `BPF_FUNC_current_task_under_cgroup()` <br> `BPF_FUNC_get_prandom_u32()` <br> `BPF_FUNC_probe_read_str()` <br> `BPF_FUNC_get_current_cgroup_id()` <br> `BPF_FUNC_send_signal()` <br> `BPF_FUNC_probe_read_kernel()` <br> `BPF_FUNC_probe_read_kernel_str()` <br> `BPF_FUNC_probe_read_user()` <br> `BPF_FUNC_probe_read_user_str()` <br> `BPF_FUNC_send_signal_thread()` <br> `BPF_FUNC_get_ns_current_pid_tgid()` <br> `BPF_FUNC_xdp_output()` <br> `BPF_FUNC_get_task_stack()`|

https://github.com/shiyanhui/libcsp
- benchmarks/sum_thread.c:21 #include <pthread.h>
- docs/content/api/sched.md:69 `csp_block(tasks)` is used to wrap tasks which will likely cause the thread to
- src/core.h:25 #include <pthread.h>
- benchmarks/Makefile:4 TARGETS := benchmark_sum_libcsp benchmark_sum_go benchmark_sum_thread
- src/rand.h:34  * thread-safe. */

https://github.com/hackerschoice/gsocket
- configure.ac:245 * ./Configure --prefix=\$HOME/usr no-dso no-threads no-shared linux-generic64 * 
- packaging/gsnc-deploy-bin/docker/arm-linux/Dockerfile:13 	./Configure --prefix=/root/usr no-tests no-dso no-threads no-shared ${OPENSSL_ARCH} && \
- packaging/gsnc-deploy-bin/docker/x86_64-alpine/Dockerfile:13 	./Configure --prefix=/root/usr no-tests no-dso no-threads no-shared ${OPENSSL_ARCH} && \
- packaging/gsnc-deploy-bin/docker/x86_64-debian/Dockerfile:13 	./Configure --prefix=/root/usr no-tests no-dso no-threads no-shared ${OPENSSL_ARCH} && \
- .github/workflows/static-release-push.yml:91             ./Configure --prefix=/opt no-tests no-dso no-threads no-shared BSD-generic64 && \

https://github.com/vanhoefm/fragattacks
- wpa_supplicant/main_winsvc.c:134 static int wpa_supplicant_thread(void)
- src/l2_packet/l2_packet_ndis.c:13  * WinXP version of the code uses overlapped I/O and a single threaded design
- wpa_supplicant/examples/p2p/p2p_find.py:11 import threading
- wpa_supplicant/examples/p2p/p2p_flush.py:11 import threading
- wpa_supplicant/examples/p2p/p2p_disconnect.py:10 import threading

https://github.com/cmacrae/spacebar
- src/event_loop.c:144     pthread_create(&event_loop->thread, NULL, &event_loop_run, event_loop);
- src/event_loop.h:29     pthread_t thread;
- src/misc/socket.c:148     pthread_create(&daemon->thread, NULL, &socket_connection_handler, daemon);
- src/misc/socket.h:15 #include <pthread.h>
- src/manifest.m:23 #include <pthread.h>

https://github.com/PortAudio/portaudio
- configure.in:276         THREAD_CFLAGS="-mthreads"
- include/pa_win_wmme.h:63 /* By default, the mme implementation drops the processing thread's priority
- include/pa_linux_alsa.h:66 /** Instruct whether to enable real-time priority when starting the audio thread.
- src/os/unix/pa_unix_util.h:50 #include <pthread.h>
- include/pa_win_wasapi.h:72     /* force custom thread priority setting, must be used if PaWasapiStreamInfo::threadPriority

https://github.com/Hansimov/csapp
- _codes/code/conc/race.c:9 void *thread(void *vargp);
- _codes/code/conc/hello.c:2  * hello.c - Pthreads "hello, world" program 
- _codes/code/error/fragments.c:3 void *thread(void *vptr) 
- SUMMARY.md:118   * [12.3 基于线程的并发编程](part3/ch12-concurrent-programming/12.3-concurrent-programming-with-threads.md)
- _codes/code/src/clock.c:2  * Retrofitted to use thread-specific timers

https://github.com/lwfinger/rtw89
- pci.c:803 static irqreturn_t rtw89_pci_interrupt_threadfn(int irq, void *dev)
- core.c:2154 	/* In low power mode, it does RX in thread context. */

https://github.com/yangminz/bcst_csapp
- src/process/syscall.c:44     // when run kernel thread, user registers should be useless
- src/mains/false_sharing.c:13 #include <pthread.h>
- src/hardware/cpu/interrupt.c:128     // tf is holding the user thread context
- src/process/schedule.c:25     pcb_t *current_pcb = ks->threadinfo.pcb;
- src/headers/process.h:29     } threadinfo;

https://github.com/rswinkle/PortableGL
- testing/single_thread_results.txt:65 4 threads and it can't even manage 2x speedup and this is under
- glcommon/c_utils.c:1073  *  not thread safe */
- glcommon/stb_image.h:55       2.24  (2020-02-02) fix warnings; thread-local failure_reason and flip_vertically
- glcommon/stb_vorbis.c:91 // Individual stb_vorbis* handles are not thread-safe; you cannot decode from
- glcommon/stb_rect_pack.h:101 // You should not try to access the 'rects' array from another thread

https://github.com/Tongsuo-Project/Tongsuo
- crypto/initthread.c:14 #include "internal/thread_once.h"
- crypto/threads_pthread.c:50     if ((lock = OPENSSL_zalloc(sizeof(pthread_rwlock_t))) == NULL) {
- Configurations/50-os390.conf:9         thread_scheme    => "(unknown)",
- include/openssl/crypto.h.in:71  * Old type for allocating dynamic locks. No longer used. Use the new thread
- Configurations/README.md:151         thread_scheme   => The type of threads is used on the

https://github.com/acidicoala/ScreamAPI
- include/sdk/eos_init.h:40  * Options for initializing defining thread affinity for use by Epic Online Services SDK.
- include/sdk/eos_anticheatserver_types.h:19  * This callback is always issued from within EOS_Platform_Tick on its calling thread.
- include/sdk/eos_titlestorage.h:69  * multiple frames. All callbacks for this function will come from the same thread that the SDK is ticked from. If specified, the FileTransferProgressCallback will always be called at
- include/sdk/eos_playerdatastorage.h:94  * multiple frames. All callbacks for this function will come from the same thread that the SDK is ticked from. If specified, the FileTransferProgressCallback will always be called at
- include/sdk/eos_anticheatclient_types.h:80  * This callback is always issued from within EOS_Platform_Tick on its calling thread.

https://github.com/shunf4/proxychains-windows
- doc/DEVNOTES.md:4 to force a remote suspended process to run a thread, loading the
- include/log_generic.h:22 // *_early are per-process instead of per-thread, which will cause race condition, and are only used at early stages of DLL loading and hook initializing
- src/dll/hookdll_main.c:171 		// Create remote thread in target process to execute the code
- include/hookdll_util_generic.h:29 // *_early are per-process instead of per-thread, which will cause race condition, and are only used at early stages of DLL loading and hook initializing
- include/log_win32.h:29 // *_early are per-process instead of per-thread, which will cause race condition, and are only used at early stages of DLL loading and hook initializing

https://github.com/Yutaka-Sawada/MultiPar
- alpha/Update_English.txt:3  par2j's "lc" option was changed to support more threads.
- source/par2j/reedsolomon.h:43 int calc_thread_num1(int max_num);
- source/par2j/rs_decode.c:38 typedef struct {	// RS threading control struct
- source/par2j/rs_encode.c:39 typedef struct {	// RS threading control struct
- source/par2j/create.c:470 				//printf("thread = %d, size = %I64d\n", i, files[num].size);

https://github.com/eafer/rdrview
- tests/firefox/bug-1255978/expected-metadata.txt:3 Excerpt: Most people go to hotels for the pleasure of sleeping in a giant bed with clean white sheets and waking up to fresh towels in the morning. But those towels and sheets might not be as clean as they look, according to the hotel bosses that responded to an online thread about the things hotel owners don’t want you to know.
- tests/firefox/bug-1255978/expected.txt:5    to the hotel bosses that responded to an online thread about the things
- tests/firefox/bug-1255978/expected.html:4         <p>But those towels and sheets might not be as clean as they look, according to the hotel bosses that responded to an online thread about the things hotel owners don’t want you to know.</p>
- tests/firefox/tmz-1/source.html:724                         <li class="comment-btn"> <a href="http://www.tmz.com/2015/02/26/lupita-nyongo-pearl-dress-stolen-oscars/#disqus_thread"
- tests/firefox/keep-images/expected.txt:112    during lactation. In all, Fernando’s thread received over 50,000 visits

https://github.com/bitdefender/bddisasm
- docs/source/index.rst:19 tables generation. It has no external dependencies, and it is thread safe
- README.md:3 The Bitdefender disassembler (bddisasm) is a lightweight, x86/x64 only instruction decoder. It is easy to integrate, easy to work with, it has no external dependencies, it is thread-safe, it allocates no memory at all, it works in virtually any environment (we use it inside user, kernel, hypervisor, on both Windows and Linux environments), and it provides lots of info regarding the decoded instructions, such as: operands (both explicit and implicit), access mode for each operand, CPUID feature flag, flags access, etc. More examples and info about the project can be found on the official documentation: [Bitdefender disassembler](http://bddisasm.readthedocs.io)
- inc/bdshemu.h:258 #define SHEMU_FLAG_KPCR_ACCESS                  0x00010000  // KPCR current thread access via gs:[0x188]/fs:[0x124].

https://github.com/lockedbyte/CVE-Exploits
- CVE-2020-9273/exploit.py:12 import threading
- CVE-2021-3156/nss_crashes/crash4.gdb:34 [Thread debugging using libthread_db enabled]
- CVE-2021-3156/nss_crashes/crash2.gdb:31 [Thread debugging using libthread_db enabled]
- CVE-2020-9273/proftpd-1.3.7rc2/contrib/mod_auth_otp/crypto.c:54     /* The ERR_remove_state(0) usage is deprecated due to thread ID
- CVE-2021-3156/sudo-1.8.31/libtool:7065     thread_safe=no

https://github.com/profi200/open_agb_firm
- arm9/arm9.ld:142 		/* Reserve space for the TLS segment of the main thread */
- arm11/arm11.ld:146 		/* Reserve space for the TLS segment of the main thread */

https://github.com/Ryuk17/SpeechAlgorithms
- WebRTC_AEC/src/ring_buffer.h:11 // A ring buffer to hold arbitrary data. Provides no thread safety. Unless
- WebRTC_VAD/src/dr_wav.h:3102     think of to do this is with wcsrtombs(). Note that wcstombs() is apparently not thread-safe because it uses a static global mbstate_t object for
- WebRTC_AEC/src/ring_buffer.c:11 // A ring buffer to hold arbitrary data. Provides no thread safety. Unless

https://github.com/webui-dev/webui
- src/webui.c:102 typedef pthread_mutex_t webui_mutex_t;
- src/civetweb/civetweb.h:114  * thread safe.
- examples/C/minimal/GNUmakefile:43 	STATIC_BUILD_FLAGS += -lpthread -lm -l$(WEBUI_LIB_NAME)-static
- include/webui.h:16 // Max windows, servers and threads
- examples/C++/minimal/GNUmakefile:36 	STATIC_BUILD_FLAGS += -lpthread -lm -l$(WEBUI_LIB_NAME)-static

https://github.com/xhawk18/s_task
- libuv/src/win/thread.c:77 /* Verify that uv_thread_t can be stored in a TLS slot. */
- libuv/docs/code/thread-create/main.c:28     uv_thread_t hare_id;
- libuv/docs/src/threading.rst:2 .. _threading:
- libuv/docs/src/threadpool.rst:2 .. _threadpool:
- libuv/docs/src/guide/threads.rst:4 Wait a minute? Why are we on threads? Aren't event loops supposed to be **the

https://github.com/Kiprey/Skr_Learning
- week9-19/uCore/os_kernel_lab-master_RAW/related_info/ostep/ostep11-threadintro/race.md:2 Welcome to this simulator. The idea is to gain familiarity with threads by
- week9-19/uCore/os_kernel_lab-master_RAW/related_info/ostep/ostep12-threadlock/peterson.s:19 # assume thread ID is in bx (0 or 1, scale by 4 to get proper flag address)
- week9-19/CSAPP-Lab/8. Proxy Lab/proxy.c:39 pthread_mutex_t thread_mutex;
- week9-19/uCore/doc/uCore-4.md:143 - 用户线程：在用户空间实现。(POSIX Pthread)
- week9-19/uCore/os_kernel_lab-master_RAW/related_info/ostep/ostep11-threadintro/x86.py:676         # and per thread

https://github.com/thanks4opensource/buck50
- build/Makefile:75 		  -fno-threadsafe-statics

https://github.com/espressif/esp-drone
- docs/en/rst/system.rst:49 - STABILIZER: self stabilize its thread, and control the process of flight control program
- components/core/crazyflie/modules/interface/msp.h:29  * For more details, see the official MSP documentation and support thread:
- components/core/crazyflie/utils/src/FreeRTOS-openocd.c:4  * OpenOCD's threads awareness.
- components/core/crazyflie/modules/src/msp.c:28  * For more details, see the official MSP documentation and support thread:

https://github.com/Rubberduckycooly/Sonic-Mania-Decompilation
- SonicMania/Objects/PGZ/Press.c:53     // threads
- SonicMania/Objects/PGZ/Press.h:27     uint32 threads;

https://github.com/picoruby/picoruby
- mrbgems/picoruby-filesystem-fat/lib/ff14b/source/00history.txt:239   Fixed wrong media change can lead a deadlock at thread-safe configuration.
- mrbgems/picoruby-filesystem-fat/lib/ff14b/source/ffconf.h:121 /   1: Enable LFN with static  working buffer on the BSS. Always NOT thread-safe.
- mrbgems/picoruby-filesystem-fat/lib/ff14b/documents/doc/rc.html:112 <dd>The function was canceled due to a timeout of <a href="appnote.html#reentrant">thread-safe control</a>. (Related option: <tt><a href="config.html#timeout">FF_TIMEOUT</a></tt>)</dd>
- mrbgems/picoruby-sqlite3/lib/sqlite-amalgamation-3410100/sqlite3ext.h:141   void  (*thread_cleanup)(void);
- mrbgems/picoruby-filesystem-fat/lib/ff14b/source/ff.c:240 #error Static LFN work area cannot be used in thread-safe configuration

https://github.com/weston-embedded/uC-OS2
- Ports/NiosII/GNU/os_cpu_c.c:88     * create and initialise the impure pointer used for Newlib thread local storage.
- TLS/IAR/os_tls.c:410         p_tls                           = (OS_TLS)__iar_dlib_perthread_allocate();
- Ports/Blackfin/VDSP++/os_cpu_a.asm:335 *                                                        RETS       (function return address of thread)
- TLS/IAR/os_tls_v8.c:456         __call_thread_dtors();
- Ports/ARM-Cortex-M/ARMv7-M/GNU/os_cpu_a.S:213 @              f) Get current ready thread TCB, OSTCBCur = OSTCBHighRdy;

https://github.com/rA9stuff/LeetDown
- LeetDown_M/DFUHelperViewController.mm:130             // send signal to wake up the main thread
- LeetDown_M/SSZipArchive/SSZipArchive.m:945         // use a local fileManager (queue/thread compatibility)

https://github.com/tandasat/MiniVisorPkg
- Sources/Platform/Windows/WinLogger.c:68     // The process and thread IDs which generated this message.
- Sources/MiniVisor.c:1260     // thread affinity and executing callback on each processor at PASSIVE_LEVEL.
- Tests/NmiTester/CpuidLoop/CpuidLoop.c:31     // Spawn threads that run CPUID in the infinite loop.

https://github.com/hzcx998/xbook2
- src/dwin/hal/kdevice/thread.c:8 static struct dwin_thread *start(void (*entry)(void *), void *arg)
- src/task/pthread.c:3 #include <xbook/pthread.h>
- src/include/xbook/pthread.h:4 #include <sys/pthread.h>
- src/net/httpd.c:24 /** Serve one HTTP connection accepted in the http thread */
- src/arch/x86/mach-i386/task/switch.asm:4 global thread_switch_to_next

https://github.com/floooh/pacman.c
- sokol/sokol_audio.h:67        this function is called from a separate thread.
- CMakeLists.txt:5 # Linux -pthread shenanigans
- sokol/sokol_log.h:74     - must be re-entrant because it might be called from different threads

https://github.com/ToshioCP/Gtk4-tutorial
- src/sec13.src.md:85 GFile is *not* thread safe.
- src/sec8.src.md:207 Note: GFile is *not* thread safe. Duplicating GFile avoids a trouble comes from the different thread.
- gfm/sec8.md:379 Note: GFile is *not* thread safe. Duplicating GFile avoids a trouble comes from the different thread.
- docs/sec13.html:258 to point it. GFile is <em>not</em> thread safe. The duplication makes
- gfm/sec27.md:65 The codes are not thread safe.

https://github.com/smallkirby/kernelpwn
- checklist/README.md:74     - As an execuse, I usually wrap all funcs/syscalls in `assert` in my exploit. However in the CTF, I abused a race condition and the thread have to do his business as quickly as possible. So I didn't wrap it and things went totally bad...  In addition, I couldn't doubt `setxattr` cuz the only reason of failure should've been related to race.   
- config/.config:506 # dvdrw-tools needs a toolchain w/ threads, C++, wchar
- test/test.c:6 #include <pthread.h>

https://github.com/Kevincoooool/KS_DAP_Wireless
- TeenyUSB/readme.md:40 - rt-thread双角色设备, 支持运行时切换设备类行，支持动态mount U盘，[更多说明][drd_readme]。Dual role device with rt-thread, [more info][drd_readme].
- TeenyUSB/demo/drd_rtt/Kconfig:14 # example : default "F:/git_repositories/rt-thread"
- TeenyUSB/demo/drd_rtt/SConstruct:8     RTT_ROOT = os.path.normpath(os.getcwd() + '/../../../rt-thread')
- TeenyUSB/demo/drd_rtt/start_env.bat:1 set RTT_ROOT=../../../rt-thread
- TeenyUSB/demo/drd_rtt/drivers/bsp.c:11 #include <rtthread.h>

https://github.com/aircrack-ng/rtl8814au
- include/osdep_intf.h:70 u32 rtw_start_drv_threads(_adapter *padapter);
- include/rtw_mi.h:162 u32 rtw_mi_start_drv_threads(_adapter *adapter);
- include/osdep_service_xp.h:58 	typedef PKTHREAD _thread_hdl_;
- include/osdep_service_ce.h:58 typedef HANDLE 	_thread_hdl_;
- include/rtw_recv.h:304 accesser of recv_priv: rtw_recv_entry(dispatch / passive level); recv_thread(passive) ; returnpkt(dispatch)

https://github.com/maiyao1988/elf-dump-fix
- app/jni/ElfFixSection/elf.h:518                                            thread local data.  */

https://github.com/openAUTOSAR/classic-platform
- communication/lwip-2.0.3/src/apps/snmp/snmp_threadsync.c:3  * SNMP thread synchronization implementation.
- communication/lwip-2.0.3/src/include/lwip/apps/snmp_threadsync.h:3  * SNMP server MIB API to implement thread synchronization
- communication/lwip-2.0.3/doc/ppp.txt:52 for NO_SYS=1 systems or called inside lwIP core thread for NO_SYS=0 systems.
- communication/lwip-2.0.3/UPGRADING:61     * Added LWIP_NETCONN_SEM_PER_THREAD to use one "op_completed" semaphore per thread
- communication/lwip-2.0.3/doc/sys_arch.txt:14 lwIP functionality, multiple threads support can be implemented in the

https://github.com/Adamkadaban/CTFs
- 3.Boxes/TryHackMe/Weasel/README.md:137 import os,socket,subprocess,threading;
- 3.Boxes/TryHackMe/BountyHacker/34900.py:3 from threading import Thread
- 3.Boxes/HackTheBox/Netmon/psexec.py:20 from threading import Thread, Lock
- 3.Boxes/HackTheBox/Optimum/39719.ps1:19       https://googleprojectzero.blogspot.co.uk/2016/03/exploiting-leaked-thread-handle.html
- 3.Boxes/TryHackMe/Overpass/linpeas.sh:66       $Y-t$B Threads to search files inside the system (by default it's the number of CPU threads).

https://github.com/alibaba/diagnose-tools
- documents/pupil.md:48 #~        0x7f28339f9965 __pthread_cond_wait ([symbol])
- documents/perf.md:16             pid thread id that monitored
- SOURCE/module/mm_tree.c:195 		if (!thread_group_leader(walker))
- documents/sched-delay.md:15           pid thread id that monitored
- SOURCE/module/kernel/load.c:146 		do_each_thread(g, p) {

https://github.com/alejoseb/Modbus-STM32-HAL-FreeRTOS
- Examples/ModbusF429TCP/LWIP/App/lwip.c:42 /* Ethernet link thread Argument */
- Examples/ModbusWB55DMA/Core/Src/main.c:159   /* Create the thread(s) */
- Examples/ModbusF429/Core/Src/freertos.c:94   /* Create the thread(s) */
- Examples/ModbusH743TCP/LWIP/Target/ethernetif.h:36 void ethernet_link_thread(void* argument );
- Examples/ModbusF429/Drivers/CMSIS/Include/tz_context.h:60 /// Load secure context (called on RTOS thread context switch)

https://github.com/raysan5/raylib-games
- repair/src/Makefile:243     # -s USE_PTHREADS=1          # multithreading support
- transmission/src/Makefile:243     # -s USE_PTHREADS=1          # multithreading support
- cat_vs_roomba/src/Makefile:213     INCLUDE_PATHS += -I$(RPI_TOOLCHAIN_SYSROOT)/opt/vc/include/interface/vcos/pthreads
- wave_collector/src/Makefile:243     # -s USE_PTHREADS=1          # multithreading support
- skully_escape/src/Makefile:243     # -s USE_PTHREADS=1          # multithreading support

https://github.com/heliosproj/HeliOS
- README.md:16 One important aspect of multitasking in HeliOS is it does not rely on context switching. This reduces the need for the user to manage access to shared resources in a “thread safe” way using mutexes and semaphores. This also eliminates the need for the “port” or portability code required to save the context during a context switch. As a result, the user can focus his or her development effort on their specific application without having to contend with concurrent access to shared resources. Like everything in life, there are drawbacks. While a conventional cooperative model spares the user from contending with concurrent access to shared resources, if a task does not relinquish control to the HeliOS scheduler, it will monopolize all available runtime. This also means that the HeliOS scheduler does not enforce hard-timing (i.e., real-time). The HeliOS scheduler enforces soft-timing so if a waiting task timer has elapsed, the scheduler will prioritize the task but may miss the "deadline".
- extras/uncrustify/defaults.cfg:3276 mod_sort_oc_property_thread_safe_weight = 0        # number
- extras/uncrustify/config.sh:799 mod_sort_oc_property_thread_safe_weight:0
- extras/uncrustify/helios.cfg:785 mod_sort_oc_property_thread_safe_weight = 0

https://github.com/circuitvalley/mipi_csi_receiver_FPGA
- Cypress FX3 USB3.0 Firmware/uvc.h:43 /* UVC application thread parameters. */
- Cypress FX3 USB3.0 Firmware/cyfxtx.c:67    area which is used by the application code as well as the drivers to allocate thread
- Cypress FX3 USB3.0 Firmware/uvc.c:23 static CyU3PThread   uvcAppThread;                      /* UVC video streaming thread. */

https://github.com/0e4ef622/wine-discord-ipc-bridge
- main.c:179 DWORD WINAPI winwrite_thread(LPVOID lpvParam);

https://github.com/ionescu007/minlzma
- README.md:67 Note that while these assumptions may seem overly restrictive, they correspond to the usual files produced by `xzutils`, `7-zip` when choosing XZ as the format, and the `Python` `LZMA` module. Most encoders do not support the vast majority of XZ/LZMA2's purported capabilities such as multiple blocks, streaming, or multi-threading.

https://github.com/Xinyuan-LilyGO/LilyGo-EPD47
- src/zlib/README:4 thread safe.  The data format used by the zlib library is described by RFCs
- src/zlib/crc32.c:19   one thread to use crc32().
- src/zlib/infback.c:79    used for threaded applications, since the rewriting of the tables and virgin
- src/zlib/zlib.h:146    If zlib is used in a multi-threaded application, zalloc and zfree must be
- src/zlib/ChangeLog:1100   completely thread safe (Mark)

https://github.com/dlktdr/HeadTracker
- firmware/src/src/defines.h:47 #define PAUSE_BEFORE_FLASH 60  // (ms) Time to pause all threads before Flash writing
- firmware/src/src/include/serial.h:12 // ONLY use these serial write methods, they are buffered & thread safe
- firmware/src/src/targets/nrf52/serial.cpp:128       /* Give CPU resources to low priority threads. */
- firmware/src/src/sense.cpp:630     //  If data thread has it locked just skip this reading
- gui/src/calibrate/quality.cpp:4 // https://forum.pjrc.com/threads/59277-Motion-Sensor-Calibration-Tool-Parameter-Understanding

https://github.com/zhuotong/Android_InlineHook
- myihk/src/main/jni/include/mhk64.h:14 #include <pthread.h>
- README.md:681 #include <pthread.h>
- myihk/src/main/jni/arm64/model/iModel.cpp:9 static pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
- myihk/src/main/jni/arm/model/iModel.cpp:6 static pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
- myihk/src/main/jni/arm/src/replace/lr.cpp:3 #include <pthread.h>

https://github.com/cccriscv/mini-riscv-os
- doc/ref/Threads.md:4 像是 07-thread 裏使用了 tcb_t 
- doc/tw/07-ExterInterrupt.md:40 實際上，會有多個中斷源(鍵盤、滑鼠、硬碟...)接上 PLIC ， PLIC 會判別這些中斷的優先級，再分配給處理器的 Hart (RISC-V 中 hardware thread 的最小單位) 進行中斷處理。

https://github.com/bucanero/apollo-ps3
- include/settings.h:50 void wait_save_thread(void);
- source/save_util.c:11 #include <sys/thread.h>
- source/draw.c:4 #include <sys/thread.h>
- source/main.c:185 	wait_save_thread();

https://github.com/bitbank2/JPEGDEC
- linux/makefile:2 LIBS = -lm -lpthread

https://github.com/ziglang/zig-bootstrap
- llvm/include/llvm/Support/thread.h:1 //===-- llvm/Support/thread.h - Wrapper for <thread> ------------*- C++ -*-===//
- llvm/include/llvm/BinaryFormat/Minidump.h:217 /// Describes a single thread in the minidump file. Part of the ThreadList
- zig/lib/libcxx/include/thread:15     thread synopsis
- zig/lib/libc/mingw/crt/cxa_thread_atexit.c:8 int __cxa_thread_atexit(dtor_fn dtor, void *obj, void *dso);
- zig/lib/libcxx/src/thread.cpp:1 //===------------------------- thread.cpp----------------------------------===//

https://github.com/hexhacking/xDL
- xdl/src/main/cpp/xdl_lzma.c:28 #include <pthread.h>
- xdl/src/main/cpp/xdl_linker.c:27 #include <pthread.h>
- xdl/src/main/cpp/xdl.c:31 #include <pthread.h>
- xdl/src/main/cpp/xdl_iterate.c:32 #include <pthread.h>

https://github.com/moonglow/pcan_cantact
- Drivers/CMSIS/Include/tz_context.h:60 /// Load secure context (called on RTOS thread context switch)

https://github.com/kdrag0n/proton-clang
- lib/cmake/llvm/CheckAtomic.cmake:1 # atomic builtins are required for threading support.
- lib/clang/13.0.0/include/stdatomic.h:61 void atomic_thread_fence(memory_order);
- lib/cmake/llvm/TensorFlowCompile.cmake:35       COMMAND "XLA_FLAGS=\"--xla_cpu_multi_thread_eigen=false\"" ${TENSORFLOW_AOT_COMPILER} aot_compile_cpu
- lib/clang/13.0.0/include/sanitizer/asan_interface.h:29 /// \note This function is not thread-safe because no two threads can poison or
- lib/clang/13.0.0/include/sanitizer/hwasan_interface.h:49   // clearing shadow for the entire thread stack like __asan_handle_no_return

https://github.com/darksylinc/betsy
- bin/Data/bc4.glsl:25 /// Each thread works on 4 pixels
- bin/Data/etc2_p.glsl:17 shared float2 g_threadBestCandidates[4u][4u * 4u];
- Docs/technical_doc_advanced.md:4 The first obvious attempt is to compute each compressed block (usually composed of blocks of 4x4 pixels which is what most format use) in each GPU thread.
- bin/Data/etc2_th.glsl:13 shared float2 g_bestCandidates[120 * 8];  //.x = error; .y = threadId
- CMake/Dependencies/FindSDL2.cmake:42 # Added a search for threads which is needed by some platforms.

https://github.com/arduino/ArduinoCore-mbed
- cores/arduino/mbed/rtos/include/rtos/Thread.h:47 /** The Thread class allow defining, creating, and controlling thread functions in the system.
- libraries/MRI/src/core/cmd_thread.h:15 /* Command handler for gdb commands related to threads. */
- libraries/MRI/src/core/cmd_thread.c:15 /* Command handler for gdb commands related to threads. */
- libraries/rpclib/src/rpc/detail/thread_group.h:6 #include <thread>
- cores/arduino/mbed/connectivity/nanostack/mbed-mesh-api/source/include/thread_tasklet.h:43 int8_t thread_tasklet_connect(mesh_interface_cb callback, int8_t nwk_interface_id);

https://github.com/goldvideo/decoder_wasm
- ffmpeg/include/libavutil/threadmessage.h:42  *          lavu was built without thread support
- ffmpeg/include/libavutil/buffer.h:61  * @note Referencing and unreferencing the buffers is thread-safe and thus
- ffmpeg/include/libavutil/log.h:275  * @note The callback must be thread safe, even if the application does not use
- ffmpeg/include/libavcodec/avcodec.h:1022  * Codec supports frame-level multithreading.
- ffmpeg/lib/pkgconfig/libavutil.pc:12 Libs: -L${libdir}  -lavutil -pthread -lm

https://github.com/artemsen/swayimg
- src/imagelist.c:10 #include <pthread.h>
- meson.build:42 threads = dependency('threads')

https://github.com/ivpn/android-app
- core/src/main/cpp/opvpnutil/sslspeed.c:202     __android_log_write(ANDROID_LOG_DEBUG,"openvpn", "stop run thread started");
- core/src/main/cpp/lzo/autoconf/mkinstalldirs:72 # Solaris 8's mkdir -p isn't thread-safe.  If you mkdir -p a/b and
- core/src/main/cpp/lzo/doc/LZO.TXT:49  - Algorithm is thread safe.
- core/src/main/cpp/lzo/src/lzo1b_cc.c:104 // note: this is not thread safe, but as it is used for finetuning only
- core/src/main/cpp/lzo/src/lzo_supp.h:3083 #ifndef lzo_pclock_read_getthreadtimes

https://github.com/openNDS/openNDS
- src/ndsctl_thread.h:21 /** @file ndsctl_thread.h
- src/ndsctl_thread.c:21 /* @file ndsctl_thread.c
- Makefile:6 LDFLAGS+=-pthread
- src/auth.h:22     @brief Authentication handling thread
- src/client_list.h:105 t_client *client_list_find_by_ip(const char ip[]); /* needed by fw_iptables.c, auth.c * and ndsctl_thread.c */

https://github.com/luantty2/pheromone_keyboard
- readme.md:321 The mounting holes are compatible with insert threads with 3.5mm outter diameter, the size of threads could be M2 or M2.5, the depth would better be 3mm.

https://github.com/swharden/FftSharp
- dev/imp/readme.txt:165     Sep. 2001  : Add Pthread & Win32thread routines to "fftsg*.c"
- dev/imp/readme.md:11 This library implements some very creative optimizations for maximizing performance while maintaining thread-safety.
- dev/imp/ooura/fftsg.c:754 #include <pthread.h>
- dev/imp/ooura/fftsg_h.c:496 #include <pthread.h>
- dev/imp/ooura/sample2/Makefile.pth:26 	$(CC) pi_fft.o fftsgpt.o -lm -lpthread -o pi_fftsgpt

https://github.com/BaronStack/book_paper
- Book/CSAPP/code/conc/race.c:8 void *thread(void *vargp);
- Book/CSAPP/code/conc/hello.c:2  * hello.c - Pthreads "hello, world" program 
- Book/CSAPP/sample/ch12/badcnt.c:17 void *thread(void *vargp);      /* Thread routine prototype */
- Book/CSAPP/sample/ch12/goodcnt.c:14 void *thread(void *vargp);      /* Thread routine prototype */
- Book/CSAPP/code/conc/badcnt.c:7 void *thread(void *vargp);  /* Thread routine prototype */

https://github.com/yangsoon/cpptest
- muduo/unpv13e/server/pthread07.h:2   pthread_t		thread_tid;		/* thread ID */
- muduo/unpv13e/server/pthread08.h:2   pthread_t		thread_tid;		/* thread ID */
- muduo/unpv13e/lib/wrappthread.lc:1 /*##  1 ##src/lib/wrappthread.c##
- muduo/unpv13e/lib/wrappthread.c:2  * pthreads wrapper functions.
- muduo/unpv13e/threads/strclithread.lc:1 #include    "unpthread.h"##  1 ##src/threads/strclithread.c##

https://github.com/micro-nova/AmpliPi
- amplipi/updater/asgi.py:31 import threading
- amplipi/streams.py:29 import threading
- amplipi/ctrl.py:31 import threading
- streams/MPRIS_metadata_reader.py:124       print('metadata reader thread stopped', flush=True)
- fw/sam/cmake/sam.cmake:35   -fno-threadsafe-statics

https://github.com/ricardoquesada/bluepad32
- docs/plat_arduino.md:177    * "Loop thread stack size": depends on what you do. 8192 is a good default value.
- src/components/bluepad32/include/uni_bt_allowlist.h:32 // These functions are not %100 thread safe, but "safe-enough".
- src/components/bluepad32/uni_bt.c:231     btstack_run_loop_execute_on_main_thread(&cmd_callback_registration);
- src/components/bluepad32/include/uni_platform_unijoysticle.h:179 // Can be called from any thread. The command will get executed in the btthread.
- src/components/bluepad32/uni_platform_arduino.c:71 // BTStack / Bluepad32 are not thread safe.

https://github.com/sz3/libcimbar
- src/third_party_lib/zstd/common/threading.h:26  * Windows minimalist Pthread Wrapper
- src/third_party_lib/zstd/common/threading.c:15  * This file will hold wrapper for systems, which do not support pthreads
- src/lib/gui/window_glfw.h:10 #include <thread>
- src/third_party_lib/zstd/common/pool.h:26  *  Create a thread pool with at most `numThreads` threads.
- src/third_party_lib/zstd/common/debug.h:29  * and is a global variable, not multi-thread protected (use with care)

https://github.com/nanovna-v2/NanoVNA-QT
- libxavna/README.md:12 Note that the hardware is continuously sending data through the FIFO interface, so any time that you aren't reading it it is being queued up, meaning stale data can surface. The recommended usage pattern is to continuously read values in a loop, possibly in a background thread.
- libxavna/xavna_cpp.C:5 #include <pthread.h>
- vna_gtk/vna_ui_core.H:37 // you must call this function from a secondary thread (non UI thread)
- vna_gtk/vna_ui_core.C:65 // increment this variable to request the thread take an extended measurement (for when more accuracy is required)
- vna_qt/firmwareupdater.H:5 #include <pthread.h>

https://github.com/gsioteam/kinoko
- plugins/glib/thirdparties/sqlite3/threads.c:13 ** This file presents a simple cross-platform threading interface for
- plugins/glib/CMakeLists.txt:11     set(CMAKE_THREAD_LIBS_INIT "-lpthread")
- plugins/glib/src/gcore/script/java/jtools.h:19         bool new_thread;
- plugins/glib/thirdparties/sqlite3/mutex.c:161         "illegal multi-threaded access to database connection"
- plugins/glib/src/gcore/script/java/jtools.cpp:11 void JNIEnvWrap::initialize(JNIEnv *env, bool new_thread) {

https://github.com/riscv-non-isa/rvv-intrinsic-doc
- rvv-intrinsic-generator/.pylintrc:190 property-classes=abc.abstractproperty,cached_property.cached_property,cached_property.threaded_cached_property,cached_property.cached_property_with_ttl,cached_property.threaded_cached_property_with_ttl

https://github.com/saagarjha/TSOEnabler
- README.md:3 A kernel extension that enables total store ordering on Apple silicon, with semantics similar to x86_64's memory model. This is normally done by the kernel through modifications to a special register upon exit from the kernel for programs running under Rosetta 2; however, it is possible to enable this for arbitrary processes (on a per-thread basis, technically) as well by modifying the flag for this feature and letting the kernel enable it for us on. **This extension is designed to work on the M1 (t8101) kernel, where it attempts to automatically detect certain offsets from the kernel image.** If you are looking for the old code for the A12Z (t8020) kernel, it's available [on the t8020 branch](https://github.com/saagarjha/TSOEnabler/tree/t8020).
- testtso/main.c:8 #include <pthread.h>
- enabletso/enabletso.c:9 #include <pthread.h>
- TSOEnabler/TSOEnabler.c:39 			printf("TSOEnabler: Found thread pointer read at " KPTR_FMT "\n", KPTR_ARG(instructions + i));

https://github.com/nionio6915/Euclid_Probe
- Firmware_Examples/Marlin/Ender3_Configuration_adv.h:958    * Screw thread:
- scad/board.scad:2 use <./threads_v2p1.scad>
- Firmware_Examples/Klipper/user_contrib/FlashForgeCreator_Qidi/qidi_printer.cfg:147 screw_thread: CW-M4

https://github.com/Yu2erer/LuaJIT-5.3.6
- src/YGC.c:132       luaL_error(L, "Not support thread");
- src/lua.h:45 /* thread status */
- README.md:71 * thread
- src/lfunc.h:21 /* test whether thread is in 'twups' list */
- src/lfunc.c:75   if (!isintwups(L)) {  /* thread not in list of threads with upvalues? */

https://github.com/bitdefender/napoca
- winguest/winguest/umlibcomm.c:406         // notify HV communication thread that a new client is connected
- winguest/winguestdll/kerncomm.cpp:189     CMD_COMMAND_THREAD_COUNT threadCountCmd = { 0 };
- winguest/winguest/winguest_types.h:94     KEVENT                  HvEventThreadWork;          ///< Event that can wake the HvCommWorker thread
- winguest/winguestdll/event_timer.h:11 #include <thread>
- winguest/winguestdll/event_timer.cpp:153         Timer->Thread = std::thread(EventTimerTicker, Timer);

https://github.com/wineasio/wineasio
- README.md:145 * 05-OCT-2010: Code from Win32 callback thread moved to JACK process callback, except for bufferSwitch() call.
- asio.c:32 #include <pthread.h>

https://github.com/turgu1/EPub-InkPlate
- include/models/page_locs.hpp:8 #include <thread>
- src/models/page_locs.cpp:57   #include <esp_pthread.h>
- sdkconfig.inkplate_6_debug:1053 CONFIG_PTHREAD_TASK_NAME_DEFAULT="pthread"
- freetype-2.10.4/src/base/ftsystem.c:21    * low-level, i.e. memory management, i/o access as well as thread
- freetype-2.10.4/docs/CHANGES:1046     - Behdad  Esfahbod contributed  code  for improved  thread-safety,

https://github.com/accel-ppp/accel-ppp
- accel-pppd/log.c:55 static __thread struct ap_session *cur_ses;
- accel-pppd/net.c:6 #include <pthread.h>
- accel-pppd/main.c:13 #include <pthread.h>
- accel-pppd/ppp/ppp.c:53 static pthread_t uc_thr;
- accel-pppd/triton/md.c:17 static pthread_t md_thr;

https://github.com/ryan-weil/HideProcessHook
- HideProcessHookInjector/main.c:49 	HANDLE thread = CreateRemoteThread(handle, NULL, 0, (LPTHREAD_START_ROUTINE)loadlibrary, address, 0, NULL);

https://github.com/synacktiv/Windows-kernel-SegmentHeap-Aligned-Chunk-Confusion
- GenericExploit/src/utils.c:285 		printf("[+]Remote thread created !\n");

https://github.com/moonglow/pcan_pro_x
- Drivers/CMSIS/Include/tz_context.h:60 /// Load secure context (called on RTOS thread context switch)
- Drivers/CMSIS/RTOS2/Template/cmsis_os1.c:34 osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument) {
- Drivers/CMSIS/Core/Template/ARMv8-M/tz_context.c:29 /// Number of process slots (threads may call secure library code)
- Drivers/CMSIS/RTOS/Template/cmsis_os.h:11  *    osKernelStart added, optional feature: main started as thread
- Drivers/CMSIS/RTOS2/Include/cmsis_os2.h:106   osPriorityIdle          =  1,         ///< Reserved for Idle thread.

https://github.com/outflanknl/Zipper
- Src/Outflank-Zipper/Zipper/minizip/zlib.h:146    If zlib is used in a multi-threaded application, zalloc and zfree must be

https://github.com/alutov/ESP32-R4sGate-for-Redmond
- sdkconfig:1148 CONFIG_PTHREAD_TASK_NAME_DEFAULT="pthread"
- C3/sdkconfig:1149 CONFIG_PTHREAD_TASK_NAME_DEFAULT="pthread"

https://github.com/roleoroleo/sonoff-hack
- src/mosquitto/pthread_setname.patch:4 Subject: [PATCH] mosquitto remove pthread_setname
- src/mqtt/mqtt-sonoff/src/sql.c:42 static pthread_t *tr_sql = NULL;
- src/mqtt/mqtt-sonoff/src/inotify.c:19 static pthread_t *tr_inotify;
- src/mqtt/mqtt-sonoff/src/mqtt-sonoff.c:49 static void *motion_start_thread()
- src/onvif_srvd/onvif_srvd/src/ServiceDevice.cpp:18 #include <thread>

https://github.com/peng-zhihui/GRBL_for_STM32
- 2.Firmware/Clion_Proj/Drivers/CMSIS/Include/tz_context.h:60 /// Load secure context (called on RTOS thread context switch)
- 4.Android/GrblController/app/src/main/java/in/co/gorest/grblcontroller/NotificationArchiveActivity.java:92     @Subscribe(threadMode = ThreadMode.MAIN)
- 4.Android/GrblController/app/src/main/java/in/co/gorest/grblcontroller/service/GrblUsbSerialService.java:195      *  In this particular example. byte stream is converted to String and send to UI thread to
- 4.Android/GrblController/app/src/main/java/in/co/gorest/grblcontroller/service/GrblBluetoothSerialService.java:188         // Cancel any thread attempting to make a connection
- 4.Android/GrblController/app/src/main/java/in/co/gorest/grblcontroller/BluetoothConnectionActivity.java:102             Thread thread = new Thread(){

https://github.com/cloudflare/rakelimit
- include/bpf/bpf_helper_defs.h:923  * 	*src* to *dst* in memory. It only works for threads that are in
- include/linux/bpf.h:1273  * 		*src* to *dst* in memory. It only works for threads that are in

https://github.com/micro-ROS/micro_ros_espidf_component
- examples/multithread_publisher/main/main.c:27 void thread_1(void * arg)
- examples/multithread_publisher/CMakeLists.txt:6 project(multithread_publisher)
- CHANGELOG.rst:37 * Add multithread example (`#82 <https://github.com/micro-ROS/micro_ros_espidf_component/issues/82>`_)

https://github.com/aers/FFXIVClientStructs
- .editorconfig:918 resharper_cpp_clang_tidy_bugprone_bad_signal_to_kill_thread_highlighting = warning
- ida/data.yml:139   0x1413B7E50: lua_newthread
- ida/old/data_2022.10.26.0000.0000.yml:116   0x1412B0660: lua_newthread
- ida/old/data_2023.07.26.0000.0000.yml:134   0x141357EB0: lua_newthread
- ida/old/data_2023.07.06.0000.0000.yml:132   0x141357650: lua_newthread

https://github.com/hexhacking/xUnwind
- README.md:26 * Support unwinding for thread(s):
- xunwind/src/main/cpp/xu_cfi.c:28 #include <pthread.h>
- xunwind/src/main/cpp/xu_util.c:82 static void xu_util_get_process_or_thread_name(const char *path, char *buf, size_t buf_len, pid_t id) {
- xunwind/src/main/cpp/xu_util.h:39 void xu_util_get_thread_name(pid_t pid, pid_t tid, char *buf, size_t buf_len);
- xunwind/src/main/cpp/xu_fp_arm64.c:27 #include <pthread.h>

https://github.com/Dynmi/AlexNet
- readme.md:15 - **Multi-thread CPU** Apply MT in operator's forward computation and backward computation to boost speed 
- src/stb_image.h:843 // this is not threadsafe
- Makefile:7 CLFAGS=-w -lm -lpthread 
- src/fc_layer.c:9 #include <pthread.h>
- src/dropout_layer.c:8 #include <pthread.h>

https://github.com/Snapchat/ModJS
- js.cpp:122     static thread_local std::stack<std::experimental::filesystem::path> stackpath;
- Makefile:3 LD_FLAGS+=  -L$(V8_PATH)/out.gn/x64.release.sample/obj/ -lv8_monolith -lpthread -lstdc++fs -static-libstdc++ -Wl,-Bsymbolic 
- redismodule.h:342     int32_t sync;           /* Synchronous or threaded flush?. */

https://github.com/0x36/oob_events
- oob_events/init.c:9 uint32_t thread_no = 2;
- oob_events/exploit.h:11 extern uint32_t thread_no;
- oob_events/exploit.c:78 void *thread_map_memory(void *arg)
- oob_events/utils.h:20 #include <pthread.h>

https://github.com/ligurio/unreliablefs
- unreliablefs/unreliablefs.h:5 #include <pthread.h>
- unreliablefs/unreliablefs.c:171     if (pthread_mutex_init(&conf.mutex, NULL) != 0) {
- unreliablefs/unreliablefs_errinj.c:173     pthread_mutex_lock(&conf.mutex);

https://github.com/nfc-tools/mfoc-hardnested
- m4/ax_pthread.m4:2 #        http://www.gnu.org/software/autoconf-archive/ax_pthread.html
- src/include/pthread.h:1 /* This is an implementation of the threads API of the Single Unix Specification.
- src/include/sched.h:12  *      Pthreads4w - POSIX Threads for Windows
- src/include/lzma/hardware.h:11  * will be also a function to detect how many concurrent threads the system
- src/include/lzma/base.h:315 		 * LZMA_FULL_BARRIER is useful with a threaded encoder if

https://github.com/masagrator/ReverseNX-RT
- README.md:44 | Robotics;Notes Elite | 1.0.1 | Broken PopNotificationMessage() thread, not working at all |
- Overlay/.vscode/settings.json:49         "thread": "cpp",

https://github.com/MaJerle/lwprintf
- docs/user-manual/thread-safety.rst:1 .. _thread_safety:
- docs/examples_src/example_multi_thread_corrupted_text.c:16  * If thread safety is not enabled,
- docs/user-manual/index.rst:12     thread-safety
- docs/api-reference/lwprintf_sys.rst:6 System function are used in conjunction with thread safety.
- lwprintf/src/include/lwprintf/lwprintf_opt.h:80  * - Calls to direct printing functions are not thread-safe by default anymore

https://github.com/LumoSQL/lumosql
- doc/about-benchmarking.md:286 `mptest.c` and `threadtest3.c` look promising for testing async access. See the 
- doc/lumo-proposed-debug.md:12 This posting and the C code following in the same thread represent an approach I am volunteering to implement in SQLite, if it is agreed to be a good approach. 
- not-fork.d/sqlite3/files/blake3/blake3.c:165 // on a single thread. Write out the chunk chaining values and return the
- not-fork.d/bdb/files/db_pragma.c:198 		 * Database locking only optimizes for singled-threaded access
- not-fork.d/bdb/files/btree.c:33 **  BDBSQL_SINGLE_THREAD -- Omit support for multithreading.

https://github.com/safakkbilici/YTU-CE
- 3x5/BLM3011 - Operating Systems/LAB/Lab4_Codes/Ex_2_pthread2.c:2   A polyglot version of the Hello World program using Pthreads.
- 3x5/BLM3011 - Operating Systems/LAB/Lab4_Codes/Ex_4_pthread4.c:2   This example demonstrates how to use pthread_join and how to pass results
- 3x5/BLM3011 - Operating Systems/LAB/Lab4_Codes/Ex_1_pthread1.c:1 #include <pthread.h>
- 3x5/BLM3011 - Operating Systems/LAB/Lab4_Codes/Ex_3_pthread3.c:1 #include <pthread.h> // pthread_create(), pthread_exit(), pthread_join()
- 3x5/BLM3011 - Operating Systems/LAB/Lab4_Codes/Ex_6_pthread6.c:3   Pthreads program. The main data is made available to all threads through 

https://github.com/m5stack/M5EPD
- examples/Unit/KEY/KEY.ino:55         NULL);  // Create a thread for breathing LED. 创建一个线程用于LED呼吸灯.
- src/base/ftsystem.cpp:21 /* low-level, i.e. memory management, i/o access as well as thread       */
- src/freetype/freetype.h:318 /*    For multi-threading applications each thread should have its own   */
- src/truetype/ttinterp.c:534         /* In case of multi-threading it can happen that the old size object */

https://github.com/SMotlaq/LoRa
- Drivers/CMSIS/Include/tz_context.h:60 /// Load secure context (called on RTOS thread context switch)

https://github.com/tianxiaohuahua/Twantch
- 1-keli-project/V10.2/watch/Drivers/CMSIS/Include/tz_context.h:60 /// Load secure context (called on RTOS thread context switch)
- 1-keli-project/V10.2/watch/Drivers/CMSIS/RTOS2/Template/cmsis_os1.c:34 osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument) {
- 1-keli-project/V10.2/watch/Drivers/CMSIS/Core/Template/ARMv8-M/tz_context.c:29 /// Number of process slots (threads may call secure library code)
- 1-keli-project/V10.2/watch/Drivers/CMSIS/RTOS/Template/cmsis_os.h:11  *    osKernelStart added, optional feature: main started as thread
- 1-keli-project/V10.2/watch/Drivers/CMSIS/RTOS2/Include/cmsis_os2.h:106   osPriorityIdle          =  1,         ///< Reserved for Idle thread.

https://github.com/PKUFlyingPig/CS61C-summer20
- handouts/OMP_exercises/pi_v2.c:7 	int i, nthreads;
- handouts/OMP_exercises/solutions/hello_par.c:6    int nthreads = 4;
- handouts/OMP_exercises/solutions/random_par.c:17 //  sequences for each thread.
- handouts/OMP_exercises/solutions/pi_spmd_final.c:19 (2) A pragma that tells OpenMP to create a team of threads
- handouts/OMP_exercises/README.txt:26 OpenMP environment at this time does not support threadprivate

https://github.com/wasm3/wasm3-arduino
- src/m3_info.c:72 // TODO: these 'static char string []' aren't thread-friendly.  though these functions are
- examples/Wasm_Fibonacci/Wasm_Fibonacci.ino:103     // On ESP32, we can launch in a separate thread (with 16Kb stack)
- examples/Wasm_Blink/Wasm_Blink.ino:219     // On ESP32, we can launch in a separate thread
- examples_pio/Wasm_Advanced/wasm_vm/wasm_vm.ino:214     // On ESP32, we can launch in a separate thread

https://github.com/acidanthera/MacKernelSDK
- Headers/kern/thread.h:59  *	File:	thread.h
- Headers/mach/thread_info.h:59  *	File:	mach/thread_info
- Headers/kern/thread_call.h:30  *  @header thread_call.h
- Headers/kern/thread_group.h:35 struct thread_group;
- Headers/mach/thread_policy.h:36  * of a particular thread.

https://github.com/arjenhiemstra/ithowifi
- software/NRG_itho_wifi/sdkconfig.dev:1192 CONFIG_PTHREAD_TASK_NAME_DEFAULT="pthread"
- software/NRG_itho_wifi/lib/mongoose/docs/README.md:76 sure that all `mg_*` API functions are called from the same thread or RTOS
- software/NRG_itho_wifi/main/cirbuf.hpp:128         // Can have a race condition in a multi-threaded application
- software/NRG_itho_wifi/sdkconfig.beta:1192 CONFIG_PTHREAD_TASK_NAME_DEFAULT="pthread"
- software/NRG_itho_wifi/sdkconfig.beta_cve:1175 CONFIG_PTHREAD_TASK_NAME_DEFAULT="pthread"

https://github.com/matrixcascade/SoundLab
- PainterEngine_Filter/PainterEngine_Filter/PainterEngine_Application.c:35 	DWORD threadId;
- PainterEngine_Filter/PainterEngine_Filter/__main.c:186 	DWORD  threadId;
- PainterEngine_SoundLab/PainterEngine_SoundLab/__main.c:186 	DWORD  threadId;

https://github.com/webview/webview_csharp
- src/SharpWebview/Bindings.cs:97         /// background thread.
- src/SharpWebview/Webview.cs:154         /// Posts a function to be executed on the main thread of the webview.

https://github.com/niuus/WiiSXRX
- README.md:11 * Official thread for discussion:
- Gamecube/utils/mload.c:234 // run one thread (you can use to load modules or binary files)
- Gamecube/menu/MainFrame.cpp:274 	pause_netinit_thread();
- Gamecube/fileBrowser/fileBrowser-SMB.h:43 void init_network_thread();
- Gamecube/fileBrowser/fileBrowser-SMB.c:39 // net init thread

https://github.com/james34602/SpleeterRT
- Executable/cpthread.c:1 #include "cpthread.h"
- VST/Source/cpthread.h:6 typedef void pthread_attr_t;
- README.MD:45 We have to initialize a buck of memory and spawn some threads before processing begins, we allow developers to adjust the number of frequency bins and time frames for the neural network to inference, the __official__ Spleeter set FFTLength = 4096, Flim = 1024 and T = 512 for default CNN input, then the neural network will predict mask up to 11kHz and take about 10 secs.
- Executable/stftFix.c:76 #include "cpthread.h"
- Executable/dr_mp3.h:3417     think of to do this is with wcsrtombs(). Note that wcstombs() is apparently not thread-safe because it uses a static global mbstate_t object for

https://github.com/shuveb/loti-examples
- eventfd.c:6 #include <pthread.h>
- sq_poll.c:13 void print_sq_poll_kernel_thread_status() {
- CMakeLists.txt:22 target_link_libraries(eventfd uring pthread)

https://github.com/lorol/LITTLEFS
- src/lfs.c:4544         // we also need to check if we contain a threaded v2 directory

https://github.com/nwpuaslp/ASR_Course
- 03-GMM-EM/kaldi_io.py:78     import subprocess, io, threading
- 06-DNN-HMM/kaldi_io.py:78     import subprocess, io, threading

https://github.com/SnosMe/uiohook-napi
- src/lib/addon.c:8 static napi_threadsafe_function threadsafe_fn = NULL;
- src/lib/uiohook_worker.c:9 #include <pthread.h>
- src/libuiohook.patch:27  static DWORD hook_thread_id = 0;
- binding.gyp:44               '-lX11', '-lXrandr', '-lXtst', '-lpthread', '-lXt'

https://github.com/AFLplusplus/AFL-Snapshot-LKM
- src/threads.c:12     pos = next_thread(start);
- src/snapshot.h:16 #include <linux/threads.h>
- src/Makefile:32 afl_snapshot-objs := memory.o files.o threads.o task_data.o snapshot.o hook.o module.o
- src/snapshot.c:75   recover_threads_snapshot(data);
- README.md:94  + support for multithreaded applications

https://github.com/noptrix/lulzbuster
- src/thpool.c:4  * Description:  Library providing a threading pool where you can add
- inc/http.h:31 #include <pthread.h>
- inc/thpool.h:17 typedef struct thpool_* threadpool;
- src/attack.c:39 /* attack worker thread */
- lists/small.txt:5012 showthread

https://github.com/salutesh/DayZ-Expansion-Scripts
- DayZExpansion/AI/Scripts/4_World/DayZExpansion_AI/Classes/Roads/eAIRoadNetwork.c:811 		//thread _FindPath(start, end, pathFinding);

https://github.com/Jieli-Tech/fw-AC63_BT_SDK
- apps/common/third_party_profile/hilink_protocol/mbedtls_protocol/mbedtls/threading.h:2  * \file threading.h
- include_lib/btstack/btstack_task.h:7 void ble_bqb_test_thread_init(void);
- apps/mesh/app_mesh.c:157             void ble_bqb_test_thread_init(void);
- apps/hid/modules/bt/app_comm_ble.c:105         void ble_bqb_test_thread_init(void);
- include_lib/system/os/FreeRTOS/mpu_wrappers.h:54     compatible FAT file system, and our tiny thread aware UDP/IP stack.

https://github.com/wagiminator/C64-Collection
- C64_xu1541/software/tools/opencbm-0.4.99.99/opencbm/sys/libcommon/sources:19 		thread.c \
- C64_xu1541/software/tools/opencbm-0.4.99.99/opencbm/tape/tapview/tapview.c:24 // Loader thread handle
- C64_xu1541/software/tools/opencbm-0.4.99.99/opencbm/tape/tapview/fileopen.c:154 // CAP file loading thread.
- C64_xu1541/software/tools/opencbm-0.4.99.99/opencbm/sys/include/cbm_driver.h:67 /*! Performance evaluation: Schedule a start of the thread */
- C64_xu1541/software/tools/opencbm-0.4.99.99/opencbm/include/WINDOWS/perfeval.h:45     /*! The thread which is executing this event. New in v2 */

https://github.com/rogerxiii/kernel-codecave-poc
- README.md:3 Having a thread which has a base address not in a valid module and registering notify routines where the callback is not in a valid module, which can trigger *PatchGuard*, depending on which routine.  
- kernel-codecave-poc/src/main.c:9 QWORD g_callback_address = 0, g_thread_address = 0;

https://github.com/blindpirate/no2-linggong-road
- src/sqlite3.h:179 ** ^The sqlite3_threadsafe() function returns zero if and only if

https://github.com/kevinwu1024/ExtremeCopy
- ExtremeCopy/Common/stl_threads.h:22 // Supported threading models are native SGI, pthreads, uithreads
- ExtremeCopy/Common/ptWinHandleMang.h:28 	static HANDLE CptWinHandleMang::_beginthreadex( 
- ExtremeCopy/Common/ptWinHandleMang.cpp:113 HANDLE CptWinHandleMang::_beginthreadex( 
- ExtremeCopy/Common/sqlite/sqlite3ext.h:143   void  (*thread_cleanup)(void);
- BugReport/openssl/bn.h:316  * It cannot be shared between threads

https://github.com/NVSL/OptaneStudy
- src/README.md:87          [parallel|p] Concurrent kthreads, default=1
- src/kernel/lat.c:14 #include <linux/kthread.h>
- src/kernel/proc.c:39 	int threads = 1;
- src/kernel/lattester.h:139 	ALIGN_GLOBAL = 0, /* All threads writes to entire dataset, interleaved */
- src/kernel/tasks.c:21 #include <linux/kthread.h>

https://github.com/NVIDIA/MAXINE-AFX-SDK
- samples/effects_demo/effects_demo.cpp:30 #include <thread>

https://github.com/Xubuntu/lightdm-gtk-greeter
- src/lightdm-gtk-greeter.c:159 static gboolean clock_timeout_thread (void);

https://github.com/LuoXukun/AI-homework
- chapters/pycnml/src/cnpy/build/CMakeFiles/3.5.1/CMakeCXXCompiler.cmake:7 set(CMAKE_CXX_COMPILE_FEATURES "cxx_template_template_parameters;cxx_alias_templates;cxx_alignas;cxx_alignof;cxx_attributes;cxx_auto_type;cxx_constexpr;cxx_decltype;cxx_decltype_incomplete_return_types;cxx_default_function_template_args;cxx_defaulted_functions;cxx_defaulted_move_initializers;cxx_delegating_constructors;cxx_deleted_functions;cxx_enum_forward_declarations;cxx_explicit_conversions;cxx_extended_friend_declarations;cxx_extern_templates;cxx_final;cxx_func_identifier;cxx_generalized_initializers;cxx_inheriting_constructors;cxx_inline_namespaces;cxx_lambdas;cxx_local_type_template_args;cxx_long_long_type;cxx_noexcept;cxx_nonstatic_member_init;cxx_nullptr;cxx_override;cxx_range_for;cxx_raw_string_literals;cxx_reference_qualified_functions;cxx_right_angle_brackets;cxx_rvalue_references;cxx_sizeof_member;cxx_static_assert;cxx_strong_enums;cxx_thread_local;cxx_trailing_return_types;cxx_unicode_literals;cxx_uniform_initialization;cxx_unrestricted_unions;cxx_user_literals;cxx_variadic_macros;cxx_variadic_templates;cxx_aggregate_default_initializers;cxx_attribute_deprecated;cxx_binary_literals;cxx_contextual_conversions;cxx_decltype_auto;cxx_digit_separators;cxx_generic_lambdas;cxx_lambda_init_captures;cxx_relaxed_constexpr;cxx_return_type_deduction;cxx_variable_templates")
- chapters/pycnml/env/neuware/include/cnrt.h:732  * @brief Sets the device handle for current thread execution context.
- chapters/pycnml/src/cnpy/build/CMakeFiles/CMakeOutput.log:57 Configured with: ../src/configure -v --with-pkgversion='Ubuntu 5.4.0-6ubuntu1~16.04.12' --with-bugurl=file:///usr/share/doc/gcc-5/README.Bugs --enable-languages=c,ada,c++,java,go,d,fortran,objc,obj-c++ --prefix=/usr --program-suffix=-5 --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --with-default-libstdcxx-abi=new --enable-gnu-unique-object --disable-vtable-verify --enable-libmpx --enable-plugin --with-system-zlib --disable-browser-plugin --enable-java-awt=gtk --enable-gtk-cairo --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-5-amd64/jre --enable-java-home --with-jvm-root-dir=/usr/lib/jvm/java-1.5.0-gcj-5-amd64 --with-jvm-jar-dir=/usr/lib/jvm-exports/java-1.5.0-gcj-5-amd64 --with-arch-directory=amd64 --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --enable-objc-gc --enable-multiarch --disable-werror --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --enable-multilib --with-tune=generic --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu
- chapters/code_chap_5_student/code_chap_5_2_student/common/main.cpp:33 #include <thread>
- chapters/code_chap_5_student/code_chap_5_2_student/neuware/lib/clang/5.0.1/include/stdatomic.h:75 void atomic_thread_fence(memory_order);

https://github.com/kaist-cp/rv6
- kernel-rs/src/arena/mod.rs:4 //! For types that `impl Arena`, you can allocate a thread safe `Rc` (reference counted pointer) from it.
- kernel-rs/src/proc/kernel_ctx.rs:12 /// Type that stores the context of the current thread. Consists of
- kernel/arch.h:292 // read and write tp, the thread pointer, which holds
- kernel/proc.c:470 // kernel thread, not this CPU. It should
- kernel-rs/src/cpu.rs:35 // SAFETY: each thread access the cpu struct of the cpu on which it's running.

https://github.com/herpiko/unk
- README.md:68 | <a href="https://www.tokopedia.com/hpasesoris/m3x6mm-m3-6-black-nylon-hex-nut-m3-thread-female-standoff-spacer-aq21">M3 x 6mm female to female spacer</a>, 30 @ Rp 1.200 | 36.000 |

https://github.com/securesystemslab/agamotto
- scripts/fuzz.py:10 import threading
- libagamotto/src/fuzzer.c:3 #include <pthread.h>
- libagamotto/CMakeLists.txt:24 target_link_libraries(agamotto PUBLIC ${CMAKE_DL_LIBS} pthread)

https://github.com/chux0519/pegasocks
- src/log.c:4 #include <pthread.h>
- src/pegas.c:21 #include <pthread.h>
- CMakeLists.txt:14     "-fsanitize=thread -g -O1"
- doc/pegas.1.asciidoc:31     Specifies the number of worker threads, default is 4
- src/server/local.c:7 #include <pthread.h>

https://github.com/agroce/afl-compiler-fuzzer
- docs/status_screen.txt:327   - Multiple threads executing at once in semi-random order. This is harmless
- libdislocator/libdislocator.so.c:86 static __thread size_t total_mem;       /* Currently allocated mem          */
- docs/notes_for_asan.txt:141 mailing list thread for tips:
- afl-as.c:107      by the user. See the thread here: http://goo.gl/HBWDtn.
- docs/ChangeLog:86   - Addressed a libtokencap / pthreads incompatibility issue. Likewise, spotted

https://github.com/0vercl0k/sic
- src/sic-drv/sic-drv.c:1300     // Ensure that only one thread handles a request at a time.
- src/shareme/shareme.cc:79     // https://docs.microsoft.com/en-us/windows/win32/procthread/inheritance

https://github.com/raspberrypi/windows-drivers
- drivers/misc/userland/interface/vcos/vcos_thread.h:43  * \file vcos_thread.h
- drivers/misc/userland/interface/vcos/vcos_thread_attr.h:29 VideoCore OS Abstraction Layer - thread attributes
- drivers/spi/bcm2836/driver.cpp:376                 "Failed to create transfer thread WDFDEVICE %p- %!STATUS!",
- drivers/misc/vchiq/device.h:112     //VHIQ system thread
- drivers/sd/bcm2836/rpisdhc/rpisdhc.hpp:75 // When enabled, spawns a system thread that keeps updating a shadowed copy of

https://github.com/afarhan/sbitx
- sound.h:2 1. The sound system is kickstarted by calling sound_thread_start() with the 
- telnet.c:19 #include <pthread.h>
- webserver.c:5 #include <pthread.h>
- sbitx_sound.c:3 #include <pthread.h>
- sbitx.c:16 #include <pthread.h>

https://github.com/FaEryICE/MemScanner
- MemScanner/NativeStruct.h:629     // The address of the thread structure is provided in the

